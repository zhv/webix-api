// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.7,
// any modifications will be overwritten.
// ==============================================================

package com.webix.ui.model.auxiliary;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import com.webix.ui.model.context.Context;
import com.webix.ui.model.context.Contextmenu;
import com.webix.ui.model.context.Datasuggest;
import com.webix.ui.model.context.Gridsuggest;
import com.webix.ui.model.context.Menu;
import com.webix.ui.model.context.Popup;
import com.webix.ui.model.context.Submenu;
import com.webix.ui.model.context.Suggest;
import com.webix.ui.model.context.Window;
import com.webix.ui.model.data.Chart;
import com.webix.ui.model.data.Datatable;
import com.webix.ui.model.data.Dataview;
import com.webix.ui.model.data.Grouplist;
import com.webix.ui.model.data.List;
import com.webix.ui.model.data.Property;
import com.webix.ui.model.data.Tree;
import com.webix.ui.model.data.Treetable;
import com.webix.ui.model.data.Unitlist;
import com.webix.ui.model.form.Button;
import com.webix.ui.model.form.Checkbox;
import com.webix.ui.model.form.Colorpicker;
import com.webix.ui.model.form.Combo;
import com.webix.ui.model.form.Counter;
import com.webix.ui.model.form.Datepicker;
import com.webix.ui.model.form.Fieldset;
import com.webix.ui.model.form.Icon;
import com.webix.ui.model.form.Label;
import com.webix.ui.model.form.Multiselect;
import com.webix.ui.model.form.Multitext;
import com.webix.ui.model.form.Radio;
import com.webix.ui.model.form.Richselect;
import com.webix.ui.model.form.Search;
import com.webix.ui.model.form.Segmented;
import com.webix.ui.model.form.Select;
import com.webix.ui.model.form.Slider;
import com.webix.ui.model.form.Tabbar;
import com.webix.ui.model.form.Text;
import com.webix.ui.model.form.Textarea;
import com.webix.ui.model.form.Toggle;
import com.webix.ui.model.html.Htmlform;
import com.webix.ui.model.html.Iframe;
import com.webix.ui.model.html.Scrollview;
import com.webix.ui.model.html.Template;
import com.webix.ui.model.layouts.Accordion;
import com.webix.ui.model.layouts.Accordionitem;
import com.webix.ui.model.layouts.Carousel;
import com.webix.ui.model.layouts.Form;
import com.webix.ui.model.layouts.Headerlayout;
import com.webix.ui.model.layouts.Layout;
import com.webix.ui.model.layouts.Multiview;
import com.webix.ui.model.layouts.Tabview;
import com.webix.ui.model.layouts.Toolbar;

/**
 * A single-month calendar that allows users to select dates and
 * move to the next/previous month.The control supports all date
 * and time formats. Besides the days of the month, it can display
 * day headings for the week days, the week number, a title with
 * the month name and year, hour and minite selectors. Customizable
 * and mostly used as a flat calendar. Check calendar documentation
 * for more detailed description.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class Calendar
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Defines or disables view change animation.
     */
    private Byte animate;

    /**
     * Defines the selectable range.
     */
    private Byte blockDates;

    /**
     * Used to hide the component borders.
     */
    private Byte borderless;

    /**
     * The format for the title with the month name and year.
     */
    private Byte calendarHeader;

    /**
     * Defines calendar time format (with timepicker enabled).
     */
    private Byte calendarTime;

    /**
     * Specifies the label for the column with weeks numbers.
     */
    private Byte calendarWeekHeader;

    /**
     * The height of the cell with day (36).
     */
    private Byte cellHeight;

    /**
     * An html container (or its id) where the component needs
     * initializing.
     */
    private Byte container;

    /**
     * The name of a css class that will be applied to the view
     * container.
     */
    private Byte css;

    /**
     * Sets the initial date of the calendar (particularly month
     * and year).
     */
    private Byte date;

    /**
     * Defines a template for a calendar day cell.
     */
    private Byte dayTemplate;

    /**
     * Disables item.
     */
    private Byte disabled;

    /**
     * Sets an additional css class that will be applied to days.
     */
    private Byte events;

    /**
     * Sets the view gravity (1 by default).
     */
    private Byte gravity;

    /**
     * Total height of the area not taken by calendar body.
     */
    private Byte headerHeight;

    /**
     * Sets the height of the component.
     */
    private Byte height;

    /**
     * Defines whether the view will be hidden initially.
     */
    private Byte hidden;

    /**
     * The component ID.
     */
    private Byte id;

    /**
     * Set man limit for selected date.
     */
    private Byte maxDate;

    /**
     * Sets the maximum height for the view.
     */
    private Byte maxHeight;

    /**
     * Sets the maximum width for the view.
     */
    private Byte maxWidth;

    /**
     * Set min limit for selected date.
     */
    private Byte minDate;

    /**
     * Sets the minimal height for the view.
     */
    private Byte minHeight;

    /**
     * Sets the minimal width for the view.
     */
    private Byte minWidth;

    /**
     * Step of time selector.
     */
    private Byte minuteStep;

    /**
     * Enables the ability to select month by clicking the "month"
     * panel.
     */
    private Byte monthSelect;

    /**
     * The delay between a real mouse action and invoking the
     * related events.
     */
    private Byte mouseEventDelay;

    /**
     * Enables/disables month navigation in header - the
     * possibility to change months (true).
     */
    private Byte navigation;

    /**
     * Allows attaching custom handlers to inner events of the
     * component.
     */
    private Byte on;

    /**
     * Attaches a click behavior for component items with the
     * specified CSS class.
     */
    private Byte onClick;

    /**
     * A property used to define custom context-click (right click)
     * handlers for elements in the DataTable cells
     * .
     */
    private Byte onContext;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private Byte onDblClick;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private Byte onMouseMove;

    /**
     * Enables date selection within the calendar.
     */
    private Byte select;

    /**
     * Enables/disables displaying empty weeks (true).
     */
    private Byte skipEmptyWeeks;

    /**
     * Enables clock for time selection.
     */
    private Byte timepicker;

    /**
     * Sets height of timepicker area.
     */
    private Byte timepickerHeight;

    /**
     * Enables/disables additional header with week days (false).
     */
    private Byte weekHeader;

    /**
     * Enables/disables additional left column with weeks' numbers
     * (false).
     */
    private Byte weekNumber;

    /**
     * Sets the width of the component.
     */
    private Byte width;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Get defines or disables view change animation.
     * 
     * @return Byte
     */
    public Byte getAnimate()
    {
        return this.animate;
    } //-- Byte getAnimate()

    /**
     * Get defines the selectable range.
     * 
     * @return Byte
     */
    public Byte getBlockDates()
    {
        return this.blockDates;
    } //-- Byte getBlockDates()

    /**
     * Get used to hide the component borders.
     * 
     * @return Byte
     */
    public Byte getBorderless()
    {
        return this.borderless;
    } //-- Byte getBorderless()

    /**
     * Get the format for the title with the month name and year.
     * 
     * @return Byte
     */
    public Byte getCalendarHeader()
    {
        return this.calendarHeader;
    } //-- Byte getCalendarHeader()

    /**
     * Get defines calendar time format (with timepicker enabled).
     * 
     * @return Byte
     */
    public Byte getCalendarTime()
    {
        return this.calendarTime;
    } //-- Byte getCalendarTime()

    /**
     * Get specifies the label for the column with weeks numbers.
     * 
     * @return Byte
     */
    public Byte getCalendarWeekHeader()
    {
        return this.calendarWeekHeader;
    } //-- Byte getCalendarWeekHeader()

    /**
     * Get the height of the cell with day (36).
     * 
     * @return Byte
     */
    public Byte getCellHeight()
    {
        return this.cellHeight;
    } //-- Byte getCellHeight()

    /**
     * Get an html container (or its id) where the component needs
     * initializing.
     * 
     * @return Byte
     */
    public Byte getContainer()
    {
        return this.container;
    } //-- Byte getContainer()

    /**
     * Get the name of a css class that will be applied to the view
     * container.
     * 
     * @return Byte
     */
    public Byte getCss()
    {
        return this.css;
    } //-- Byte getCss()

    /**
     * Get sets the initial date of the calendar (particularly
     * month and year).
     * 
     * @return Byte
     */
    public Byte getDate()
    {
        return this.date;
    } //-- Byte getDate()

    /**
     * Get defines a template for a calendar day cell.
     * 
     * @return Byte
     */
    public Byte getDayTemplate()
    {
        return this.dayTemplate;
    } //-- Byte getDayTemplate()

    /**
     * Get disables item.
     * 
     * @return Byte
     */
    public Byte getDisabled()
    {
        return this.disabled;
    } //-- Byte getDisabled()

    /**
     * Get sets an additional css class that will be applied to
     * days.
     * 
     * @return Byte
     */
    public Byte getEvents()
    {
        return this.events;
    } //-- Byte getEvents()

    /**
     * Get sets the view gravity (1 by default).
     * 
     * @return Byte
     */
    public Byte getGravity()
    {
        return this.gravity;
    } //-- Byte getGravity()

    /**
     * Get total height of the area not taken by calendar body.
     * 
     * @return Byte
     */
    public Byte getHeaderHeight()
    {
        return this.headerHeight;
    } //-- Byte getHeaderHeight()

    /**
     * Get sets the height of the component.
     * 
     * @return Byte
     */
    public Byte getHeight()
    {
        return this.height;
    } //-- Byte getHeight()

    /**
     * Get defines whether the view will be hidden initially.
     * 
     * @return Byte
     */
    public Byte getHidden()
    {
        return this.hidden;
    } //-- Byte getHidden()

    /**
     * Get the component ID.
     * 
     * @return Byte
     */
    public Byte getId()
    {
        return this.id;
    } //-- Byte getId()

    /**
     * Get set man limit for selected date.
     * 
     * @return Byte
     */
    public Byte getMaxDate()
    {
        return this.maxDate;
    } //-- Byte getMaxDate()

    /**
     * Get sets the maximum height for the view.
     * 
     * @return Byte
     */
    public Byte getMaxHeight()
    {
        return this.maxHeight;
    } //-- Byte getMaxHeight()

    /**
     * Get sets the maximum width for the view.
     * 
     * @return Byte
     */
    public Byte getMaxWidth()
    {
        return this.maxWidth;
    } //-- Byte getMaxWidth()

    /**
     * Get set min limit for selected date.
     * 
     * @return Byte
     */
    public Byte getMinDate()
    {
        return this.minDate;
    } //-- Byte getMinDate()

    /**
     * Get sets the minimal height for the view.
     * 
     * @return Byte
     */
    public Byte getMinHeight()
    {
        return this.minHeight;
    } //-- Byte getMinHeight()

    /**
     * Get sets the minimal width for the view.
     * 
     * @return Byte
     */
    public Byte getMinWidth()
    {
        return this.minWidth;
    } //-- Byte getMinWidth()

    /**
     * Get step of time selector.
     * 
     * @return Byte
     */
    public Byte getMinuteStep()
    {
        return this.minuteStep;
    } //-- Byte getMinuteStep()

    /**
     * Get enables the ability to select month by clicking the
     * "month" panel.
     * 
     * @return Byte
     */
    public Byte getMonthSelect()
    {
        return this.monthSelect;
    } //-- Byte getMonthSelect()

    /**
     * Get the delay between a real mouse action and invoking the
     * related events.
     * 
     * @return Byte
     */
    public Byte getMouseEventDelay()
    {
        return this.mouseEventDelay;
    } //-- Byte getMouseEventDelay()

    /**
     * Get enables/disables month navigation in header - the
     * possibility to change months (true).
     * 
     * @return Byte
     */
    public Byte getNavigation()
    {
        return this.navigation;
    } //-- Byte getNavigation()

    /**
     * Get allows attaching custom handlers to inner events of the
     * component.
     * 
     * @return Byte
     */
    public Byte getOn()
    {
        return this.on;
    } //-- Byte getOn()

    /**
     * Get attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnClick()
    {
        return this.onClick;
    } //-- Byte getOnClick()

    /**
     * Get a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @return Byte
     */
    public Byte getOnContext()
    {
        return this.onContext;
    } //-- Byte getOnContext()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnDblClick()
    {
        return this.onDblClick;
    } //-- Byte getOnDblClick()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnMouseMove()
    {
        return this.onMouseMove;
    } //-- Byte getOnMouseMove()

    /**
     * Get enables date selection within the calendar.
     * 
     * @return Byte
     */
    public Byte getSelect()
    {
        return this.select;
    } //-- Byte getSelect()

    /**
     * Get enables/disables displaying empty weeks (true).
     * 
     * @return Byte
     */
    public Byte getSkipEmptyWeeks()
    {
        return this.skipEmptyWeeks;
    } //-- Byte getSkipEmptyWeeks()

    /**
     * Get enables clock for time selection.
     * 
     * @return Byte
     */
    public Byte getTimepicker()
    {
        return this.timepicker;
    } //-- Byte getTimepicker()

    /**
     * Get sets height of timepicker area.
     * 
     * @return Byte
     */
    public Byte getTimepickerHeight()
    {
        return this.timepickerHeight;
    } //-- Byte getTimepickerHeight()

    /**
     * Get enables/disables additional header with week days
     * (false).
     * 
     * @return Byte
     */
    public Byte getWeekHeader()
    {
        return this.weekHeader;
    } //-- Byte getWeekHeader()

    /**
     * Get enables/disables additional left column with weeks'
     * numbers (false).
     * 
     * @return Byte
     */
    public Byte getWeekNumber()
    {
        return this.weekNumber;
    } //-- Byte getWeekNumber()

    /**
     * Get sets the width of the component.
     * 
     * @return Byte
     */
    public Byte getWidth()
    {
        return this.width;
    } //-- Byte getWidth()

    /**
     * Set defines or disables view change animation.
     * 
     * @param animate
     */
    public void setAnimate( Byte animate )
    {
        this.animate = animate;
    } //-- void setAnimate( Byte )

    /**
     * Set defines the selectable range.
     * 
     * @param blockDates
     */
    public void setBlockDates( Byte blockDates )
    {
        this.blockDates = blockDates;
    } //-- void setBlockDates( Byte )

    /**
     * Set used to hide the component borders.
     * 
     * @param borderless
     */
    public void setBorderless( Byte borderless )
    {
        this.borderless = borderless;
    } //-- void setBorderless( Byte )

    /**
     * Set the format for the title with the month name and year.
     * 
     * @param calendarHeader
     */
    public void setCalendarHeader( Byte calendarHeader )
    {
        this.calendarHeader = calendarHeader;
    } //-- void setCalendarHeader( Byte )

    /**
     * Set defines calendar time format (with timepicker enabled).
     * 
     * @param calendarTime
     */
    public void setCalendarTime( Byte calendarTime )
    {
        this.calendarTime = calendarTime;
    } //-- void setCalendarTime( Byte )

    /**
     * Set specifies the label for the column with weeks numbers.
     * 
     * @param calendarWeekHeader
     */
    public void setCalendarWeekHeader( Byte calendarWeekHeader )
    {
        this.calendarWeekHeader = calendarWeekHeader;
    } //-- void setCalendarWeekHeader( Byte )

    /**
     * Set the height of the cell with day (36).
     * 
     * @param cellHeight
     */
    public void setCellHeight( Byte cellHeight )
    {
        this.cellHeight = cellHeight;
    } //-- void setCellHeight( Byte )

    /**
     * Set an html container (or its id) where the component needs
     * initializing.
     * 
     * @param container
     */
    public void setContainer( Byte container )
    {
        this.container = container;
    } //-- void setContainer( Byte )

    /**
     * Set the name of a css class that will be applied to the view
     * container.
     * 
     * @param css
     */
    public void setCss( Byte css )
    {
        this.css = css;
    } //-- void setCss( Byte )

    /**
     * Set sets the initial date of the calendar (particularly
     * month and year).
     * 
     * @param date
     */
    public void setDate( Byte date )
    {
        this.date = date;
    } //-- void setDate( Byte )

    /**
     * Set defines a template for a calendar day cell.
     * 
     * @param dayTemplate
     */
    public void setDayTemplate( Byte dayTemplate )
    {
        this.dayTemplate = dayTemplate;
    } //-- void setDayTemplate( Byte )

    /**
     * Set disables item.
     * 
     * @param disabled
     */
    public void setDisabled( Byte disabled )
    {
        this.disabled = disabled;
    } //-- void setDisabled( Byte )

    /**
     * Set sets an additional css class that will be applied to
     * days.
     * 
     * @param events
     */
    public void setEvents( Byte events )
    {
        this.events = events;
    } //-- void setEvents( Byte )

    /**
     * Set sets the view gravity (1 by default).
     * 
     * @param gravity
     */
    public void setGravity( Byte gravity )
    {
        this.gravity = gravity;
    } //-- void setGravity( Byte )

    /**
     * Set total height of the area not taken by calendar body.
     * 
     * @param headerHeight
     */
    public void setHeaderHeight( Byte headerHeight )
    {
        this.headerHeight = headerHeight;
    } //-- void setHeaderHeight( Byte )

    /**
     * Set sets the height of the component.
     * 
     * @param height
     */
    public void setHeight( Byte height )
    {
        this.height = height;
    } //-- void setHeight( Byte )

    /**
     * Set defines whether the view will be hidden initially.
     * 
     * @param hidden
     */
    public void setHidden( Byte hidden )
    {
        this.hidden = hidden;
    } //-- void setHidden( Byte )

    /**
     * Set the component ID.
     * 
     * @param id
     */
    public void setId( Byte id )
    {
        this.id = id;
    } //-- void setId( Byte )

    /**
     * Set set man limit for selected date.
     * 
     * @param maxDate
     */
    public void setMaxDate( Byte maxDate )
    {
        this.maxDate = maxDate;
    } //-- void setMaxDate( Byte )

    /**
     * Set sets the maximum height for the view.
     * 
     * @param maxHeight
     */
    public void setMaxHeight( Byte maxHeight )
    {
        this.maxHeight = maxHeight;
    } //-- void setMaxHeight( Byte )

    /**
     * Set sets the maximum width for the view.
     * 
     * @param maxWidth
     */
    public void setMaxWidth( Byte maxWidth )
    {
        this.maxWidth = maxWidth;
    } //-- void setMaxWidth( Byte )

    /**
     * Set set min limit for selected date.
     * 
     * @param minDate
     */
    public void setMinDate( Byte minDate )
    {
        this.minDate = minDate;
    } //-- void setMinDate( Byte )

    /**
     * Set sets the minimal height for the view.
     * 
     * @param minHeight
     */
    public void setMinHeight( Byte minHeight )
    {
        this.minHeight = minHeight;
    } //-- void setMinHeight( Byte )

    /**
     * Set sets the minimal width for the view.
     * 
     * @param minWidth
     */
    public void setMinWidth( Byte minWidth )
    {
        this.minWidth = minWidth;
    } //-- void setMinWidth( Byte )

    /**
     * Set step of time selector.
     * 
     * @param minuteStep
     */
    public void setMinuteStep( Byte minuteStep )
    {
        this.minuteStep = minuteStep;
    } //-- void setMinuteStep( Byte )

    /**
     * Set enables the ability to select month by clicking the
     * "month" panel.
     * 
     * @param monthSelect
     */
    public void setMonthSelect( Byte monthSelect )
    {
        this.monthSelect = monthSelect;
    } //-- void setMonthSelect( Byte )

    /**
     * Set the delay between a real mouse action and invoking the
     * related events.
     * 
     * @param mouseEventDelay
     */
    public void setMouseEventDelay( Byte mouseEventDelay )
    {
        this.mouseEventDelay = mouseEventDelay;
    } //-- void setMouseEventDelay( Byte )

    /**
     * Set enables/disables month navigation in header - the
     * possibility to change months (true).
     * 
     * @param navigation
     */
    public void setNavigation( Byte navigation )
    {
        this.navigation = navigation;
    } //-- void setNavigation( Byte )

    /**
     * Set allows attaching custom handlers to inner events of the
     * component.
     * 
     * @param on
     */
    public void setOn( Byte on )
    {
        this.on = on;
    } //-- void setOn( Byte )

    /**
     * Set attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @param onClick
     */
    public void setOnClick( Byte onClick )
    {
        this.onClick = onClick;
    } //-- void setOnClick( Byte )

    /**
     * Set a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @param onContext
     */
    public void setOnContext( Byte onContext )
    {
        this.onContext = onContext;
    } //-- void setOnContext( Byte )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onDblClick
     */
    public void setOnDblClick( Byte onDblClick )
    {
        this.onDblClick = onDblClick;
    } //-- void setOnDblClick( Byte )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onMouseMove
     */
    public void setOnMouseMove( Byte onMouseMove )
    {
        this.onMouseMove = onMouseMove;
    } //-- void setOnMouseMove( Byte )

    /**
     * Set enables date selection within the calendar.
     * 
     * @param select
     */
    public void setSelect( Byte select )
    {
        this.select = select;
    } //-- void setSelect( Byte )

    /**
     * Set enables/disables displaying empty weeks (true).
     * 
     * @param skipEmptyWeeks
     */
    public void setSkipEmptyWeeks( Byte skipEmptyWeeks )
    {
        this.skipEmptyWeeks = skipEmptyWeeks;
    } //-- void setSkipEmptyWeeks( Byte )

    /**
     * Set enables clock for time selection.
     * 
     * @param timepicker
     */
    public void setTimepicker( Byte timepicker )
    {
        this.timepicker = timepicker;
    } //-- void setTimepicker( Byte )

    /**
     * Set sets height of timepicker area.
     * 
     * @param timepickerHeight
     */
    public void setTimepickerHeight( Byte timepickerHeight )
    {
        this.timepickerHeight = timepickerHeight;
    } //-- void setTimepickerHeight( Byte )

    /**
     * Set enables/disables additional header with week days
     * (false).
     * 
     * @param weekHeader
     */
    public void setWeekHeader( Byte weekHeader )
    {
        this.weekHeader = weekHeader;
    } //-- void setWeekHeader( Byte )

    /**
     * Set enables/disables additional left column with weeks'
     * numbers (false).
     * 
     * @param weekNumber
     */
    public void setWeekNumber( Byte weekNumber )
    {
        this.weekNumber = weekNumber;
    } //-- void setWeekNumber( Byte )

    /**
     * Set sets the width of the component.
     * 
     * @param width
     */
    public void setWidth( Byte width )
    {
        this.width = width;
    } //-- void setWidth( Byte )

    /**
     * Adjusts the component to the size of the parent HTML container
     */
    public void adjust() {
        return;
    }
    /**
     * Attaches the handler to an inner event of the component (allows behaviour customizations)
     */
    public Byte attachEvent() {
        return null;
    }
    /**
     * Binds components
     */
    public void bind() {
        return;
    }
    /**
     * Temporarily blocks triggering of ALL events of the calling object
     */
    public void blockEvent() {
        return;
    }
    /**
     * Calls an inner event
     */
    public Boolean callEvent() {
        return null;
    }
    /**
     * Redefines a single configuration property (or a hash of properties)
     */
    public void define() {
        return;
    }
    /**
     * Destructs the calling object
     */
    public void destructor() {
        return;
    }
    /**
     * Detaches a handler from an event (which was attached before by the attachEvent method)
     */
    public void detachEvent() {
        return;
    }
    /**
     * Disables the calling view (makes it dimmed and unclickable)
     */
    public void disable() {
        return;
    }
    /**
     * Enables the calling view that was disabled by the 'disable' method
     */
    public void enable() {
        return;
    }
    /**
     * Returns child views of the calling component
     */
    public Byte getChildViews() {
        return null;
    }
    /**
     * Returns master form for the input
     */
    public Byte getFormView() {
        return null;
    }
    /**
     * Returns the main HTML container for the calling object
     */
    public Byte getNode() {
        return null;
    }
    /**
     * Returns the parent view of the component
     */
    public Byte getParentView() {
        return null;
    }
    /**
     * Gets the current selected date
     */
    public Byte getSelectedDate() {
        return null;
    }
    /**
     * Returns top parent view
     */
    public Byte getTopParentView() {
        return null;
    }
    /**
     * Returns the current value of the component
     */
    public Byte getValue() {
        return null;
    }
    /**
     * Gets visible date
     */
    public Byte getVisibleDate() {
        return null;
    }
    /**
     * Checks whether the component has the specified event
     */
    public Boolean hasEvent() {
        return null;
    }
    /**
     * Hides the view
     */
    public void hide() {
        return;
    }
    /**
     * Checks whether the view is enabled
     */
    public Boolean isEnabled() {
        return null;
    }
    /**
     * Checks whether the view is visible
     */
    public Boolean isVisible() {
        return null;
    }
    /**
     * Gets the id of an item from the specified HTML event
     */
    public Byte locate() {
        return null;
    }
    /**
     * Routes events from one object to another
     */
    public void mapEvent() {
        return;
    }
    /**
     * Repaints the component
     */
    public void refresh() {
        return;
    }
    /**
     * Renders the specified item or the whole component
     */
    public void render() {
        return;
    }
    /**
     * Adjusts the view to a new size
     */
    public void resize() {
        return;
    }
    /**
     * Selects the specified date
     */
    public void selectDate() {
        return;
    }
    /**
     * Sets a new value for the component
     */
    public void setValue() {
        return;
    }
    /**
     * Makes the component visible
     */
    public void show() {
        return;
    }
    /**
     * Makes the specified date displayed in the calendar
     */
    public void showCalendar() {
        return;
    }
    /**
     * Breaks "bind" link
     */
    public void unbind() {
        return;
    }
    /**
     * Cancels blocking events that was enabled by the 'blockEvent' command
     */
    public void unblockEvent() {
        return;
    }
}
