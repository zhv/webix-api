// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.7,
// any modifications will be overwritten.
// ==============================================================

package com.webix.ui.model.auxiliary;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import com.webix.ui.model.UnknownType;
import com.webix.ui.model.context.Context;
import com.webix.ui.model.context.Contextmenu;
import com.webix.ui.model.context.Datasuggest;
import com.webix.ui.model.context.Gridsuggest;
import com.webix.ui.model.context.Menu;
import com.webix.ui.model.context.Popup;
import com.webix.ui.model.context.Submenu;
import com.webix.ui.model.context.Suggest;
import com.webix.ui.model.context.Window;
import com.webix.ui.model.data.Chart;
import com.webix.ui.model.data.Datatable;
import com.webix.ui.model.data.Dataview;
import com.webix.ui.model.data.Grouplist;
import com.webix.ui.model.data.List;
import com.webix.ui.model.data.Property;
import com.webix.ui.model.data.Tree;
import com.webix.ui.model.data.Treetable;
import com.webix.ui.model.data.Unitlist;
import com.webix.ui.model.form.Button;
import com.webix.ui.model.form.Checkbox;
import com.webix.ui.model.form.Colorpicker;
import com.webix.ui.model.form.Combo;
import com.webix.ui.model.form.Counter;
import com.webix.ui.model.form.Datepicker;
import com.webix.ui.model.form.Fieldset;
import com.webix.ui.model.form.Icon;
import com.webix.ui.model.form.Label;
import com.webix.ui.model.form.Multiselect;
import com.webix.ui.model.form.Multitext;
import com.webix.ui.model.form.Radio;
import com.webix.ui.model.form.Richselect;
import com.webix.ui.model.form.Search;
import com.webix.ui.model.form.Segmented;
import com.webix.ui.model.form.Select;
import com.webix.ui.model.form.Slider;
import com.webix.ui.model.form.Tabbar;
import com.webix.ui.model.form.Text;
import com.webix.ui.model.form.Textarea;
import com.webix.ui.model.form.Toggle;
import com.webix.ui.model.html.Htmlform;
import com.webix.ui.model.html.Iframe;
import com.webix.ui.model.html.Scrollview;
import com.webix.ui.model.html.Template;
import com.webix.ui.model.layouts.Accordion;
import com.webix.ui.model.layouts.Accordionitem;
import com.webix.ui.model.layouts.Carousel;
import com.webix.ui.model.layouts.Form;
import com.webix.ui.model.layouts.Headerlayout;
import com.webix.ui.model.layouts.Layout;
import com.webix.ui.model.layouts.Multiview;
import com.webix.ui.model.layouts.Tabview;
import com.webix.ui.model.layouts.Toolbar;

/**
 * A single-month calendar that allows users to select dates and
 * move to the next/previous month.The control supports all date
 * and time formats. Besides the days of the month, it can display
 * day headings for the week days, the week number, a title with
 * the month name and year, hour and minite selectors. Customizable
 * and mostly used as a flat calendar. Check <a
 * href="http://docs.webix.com/desktop__calendar.html">calendar</a>
 * documentation for more detailed description.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
@com.webix.ui.model.SupportsEvent({com.webix.ui.model.Event.ON_AFTER_CONTEXT_MENU, com.webix.ui.model.Event.ON_AFTER_DATE_SELECT, com.webix.ui.model.Event.ON_AFTER_MONTH_CHANGE, com.webix.ui.model.Event.ON_AFTER_RENDER, com.webix.ui.model.Event.ON_AFTER_SCROLL, com.webix.ui.model.Event.ON_AFTER_ZOOM, com.webix.ui.model.Event.ON_BEFORE_CONTEXT_MENU, com.webix.ui.model.Event.ON_BEFORE_DATE_SELECT, com.webix.ui.model.Event.ON_BEFORE_MONTH_CHANGE, com.webix.ui.model.Event.ON_BEFORE_RENDER, com.webix.ui.model.Event.ON_BEFORE_ZOOM, com.webix.ui.model.Event.ON_BIND_REQUEST, com.webix.ui.model.Event.ON_CHANGE, com.webix.ui.model.Event.ON_DATE_SELECT, com.webix.ui.model.Event.ON_DESTRUCT, com.webix.ui.model.Event.ON_ITEM_CLICK, com.webix.ui.model.Event.ON_ITEM_DBL_CLICK, com.webix.ui.model.Event.ON_LONG_TOUCH, com.webix.ui.model.Event.ON_MOUSE_MOVE, com.webix.ui.model.Event.ON_MOUSE_MOVING, com.webix.ui.model.Event.ON_MOUSE_OUT, com.webix.ui.model.Event.ON_ROTATE, com.webix.ui.model.Event.ON_SWIPE_X, com.webix.ui.model.Event.ON_SWIPE_Y, com.webix.ui.model.Event.ON_TOUCH_END, com.webix.ui.model.Event.ON_TOUCH_MOVE, com.webix.ui.model.Event.ON_TOUCH_START, com.webix.ui.model.Event.ON_VIEW_RESIZE})
public class Calendar
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Defines or disables view change animation.
     */
    private UnknownType animate;

    /**
     * Defines the selectable range.
     */
    private UnknownType blockDates;

    /**
     * Used to hide the component borders.
     */
    private Boolean borderless;

    /**
     * The format for the title with the month name and year.
     */
    private String calendarHeader;

    /**
     * Defines calendar time format (with timepicker enabled).
     */
    private String calendarTime;

    /**
     * Specifies the label for the column with weeks numbers.
     */
    private String calendarWeekHeader;

    /**
     * The height of the cell with day (36).
     */
    private Integer cellHeight;

    /**
     * An html container (or its id) where the component needs
     * initializing.
     */
    private UnknownType container;

    /**
     * The name of a css class that will be applied to the view
     * container.
     */
    private String css;

    /**
     * Sets the initial date of the calendar (particularly month
     * and year).
     */
    private UnknownType date;

    /**
     * Defines a template for a calendar day cell.
     */
    private UnknownType dayTemplate;

    /**
     * Disables item.
     */
    private Boolean disabled;

    /**
     * Sets an additional css class that will be applied to days.
     */
    private UnknownType events;

    /**
     * Sets the view gravity (1 by default).
     */
    private Integer gravity;

    /**
     * Total height of the area not taken by calendar body.
     */
    private Integer headerHeight;

    /**
     * Sets the height of the component.
     */
    private Integer height;

    /**
     * Defines whether the view will be hidden initially.
     */
    private Boolean hidden;

    /**
     * The component ID.
     */
    private String id;

    /**
     * Set man limit for selected date.
     */
    private UnknownType maxDate;

    /**
     * Sets the maximum height for the view.
     */
    private Integer maxHeight;

    /**
     * Sets the maximum width for the view.
     */
    private Integer maxWidth;

    /**
     * Set min limit for selected date.
     */
    private UnknownType minDate;

    /**
     * Sets the minimal height for the view.
     */
    private Integer minHeight;

    /**
     * Sets the minimal width for the view.
     */
    private Integer minWidth;

    /**
     * Step of time selector.
     */
    private UnknownType minuteStep;

    /**
     * Enables the ability to select month by clicking the "month"
     * panel.
     */
    private Boolean monthSelect;

    /**
     * The delay between a real mouse action and invoking the
     * related events.
     */
    private Integer mouseEventDelay;

    /**
     * Enables/disables month navigation in header - the
     * possibility to change months (true).
     */
    private Boolean navigation;

    /**
     * Allows attaching custom handlers to inner events of the
     * component.
     */
    private UnknownType on;

    /**
     * Attaches a click behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onClick;

    /**
     * A property used to define custom context-click (right click)
     * handlers for elements in the DataTable cells
     * .
     */
    private UnknownType onContext;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onDblClick;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onMouseMove;

    /**
     * Enables date selection within the calendar.
     */
    private Boolean select;

    /**
     * Enables/disables displaying empty weeks (true).
     */
    private Boolean skipEmptyWeeks;

    /**
     * Enables clock for time selection.
     */
    private Boolean timepicker;

    /**
     * Sets height of timepicker area.
     */
    private Integer timepickerHeight;

    /**
     * Enables/disables additional header with week days (false).
     */
    private Boolean weekHeader;

    /**
     * Enables/disables additional left column with weeks' numbers
     * (false).
     */
    private Boolean weekNumber;

    /**
     * Sets the width of the component.
     */
    private Integer width;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Get defines or disables view change animation.
     * 
     * @return UnknownType
     */
    public UnknownType getAnimate()
    {
        return this.animate;
    } //-- UnknownType getAnimate()

    /**
     * Get defines the selectable range.
     * 
     * @return UnknownType
     */
    public UnknownType getBlockDates()
    {
        return this.blockDates;
    } //-- UnknownType getBlockDates()

    /**
     * Get the format for the title with the month name and year.
     * 
     * @return String
     */
    public String getCalendarHeader()
    {
        return this.calendarHeader;
    } //-- String getCalendarHeader()

    /**
     * Get defines calendar time format (with timepicker enabled).
     * 
     * @return String
     */
    public String getCalendarTime()
    {
        return this.calendarTime;
    } //-- String getCalendarTime()

    /**
     * Get specifies the label for the column with weeks numbers.
     * 
     * @return String
     */
    public String getCalendarWeekHeader()
    {
        return this.calendarWeekHeader;
    } //-- String getCalendarWeekHeader()

    /**
     * Get the height of the cell with day (36).
     * 
     * @return Integer
     */
    public Integer getCellHeight()
    {
        return this.cellHeight;
    } //-- Integer getCellHeight()

    /**
     * Get an html container (or its id) where the component needs
     * initializing.
     * 
     * @return UnknownType
     */
    public UnknownType getContainer()
    {
        return this.container;
    } //-- UnknownType getContainer()

    /**
     * Get the name of a css class that will be applied to the view
     * container.
     * 
     * @return String
     */
    public String getCss()
    {
        return this.css;
    } //-- String getCss()

    /**
     * Get sets the initial date of the calendar (particularly
     * month and year).
     * 
     * @return UnknownType
     */
    public UnknownType getDate()
    {
        return this.date;
    } //-- UnknownType getDate()

    /**
     * Get defines a template for a calendar day cell.
     * 
     * @return UnknownType
     */
    public UnknownType getDayTemplate()
    {
        return this.dayTemplate;
    } //-- UnknownType getDayTemplate()

    /**
     * Get sets an additional css class that will be applied to
     * days.
     * 
     * @return UnknownType
     */
    public UnknownType getEvents()
    {
        return this.events;
    } //-- UnknownType getEvents()

    /**
     * Get sets the view gravity (1 by default).
     * 
     * @return Integer
     */
    public Integer getGravity()
    {
        return this.gravity;
    } //-- Integer getGravity()

    /**
     * Get total height of the area not taken by calendar body.
     * 
     * @return Integer
     */
    public Integer getHeaderHeight()
    {
        return this.headerHeight;
    } //-- Integer getHeaderHeight()

    /**
     * Get sets the height of the component.
     * 
     * @return Integer
     */
    public Integer getHeight()
    {
        return this.height;
    } //-- Integer getHeight()

    /**
     * Get the component ID.
     * 
     * @return String
     */
    public String getId()
    {
        return this.id;
    } //-- String getId()

    /**
     * Get set man limit for selected date.
     * 
     * @return UnknownType
     */
    public UnknownType getMaxDate()
    {
        return this.maxDate;
    } //-- UnknownType getMaxDate()

    /**
     * Get sets the maximum height for the view.
     * 
     * @return Integer
     */
    public Integer getMaxHeight()
    {
        return this.maxHeight;
    } //-- Integer getMaxHeight()

    /**
     * Get sets the maximum width for the view.
     * 
     * @return Integer
     */
    public Integer getMaxWidth()
    {
        return this.maxWidth;
    } //-- Integer getMaxWidth()

    /**
     * Get set min limit for selected date.
     * 
     * @return UnknownType
     */
    public UnknownType getMinDate()
    {
        return this.minDate;
    } //-- UnknownType getMinDate()

    /**
     * Get sets the minimal height for the view.
     * 
     * @return Integer
     */
    public Integer getMinHeight()
    {
        return this.minHeight;
    } //-- Integer getMinHeight()

    /**
     * Get sets the minimal width for the view.
     * 
     * @return Integer
     */
    public Integer getMinWidth()
    {
        return this.minWidth;
    } //-- Integer getMinWidth()

    /**
     * Get step of time selector.
     * 
     * @return UnknownType
     */
    public UnknownType getMinuteStep()
    {
        return this.minuteStep;
    } //-- UnknownType getMinuteStep()

    /**
     * Get the delay between a real mouse action and invoking the
     * related events.
     * 
     * @return Integer
     */
    public Integer getMouseEventDelay()
    {
        return this.mouseEventDelay;
    } //-- Integer getMouseEventDelay()

    /**
     * Get allows attaching custom handlers to inner events of the
     * component.
     * 
     * @return UnknownType
     */
    public UnknownType getOn()
    {
        return this.on;
    } //-- UnknownType getOn()

    /**
     * Get attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnClick()
    {
        return this.onClick;
    } //-- UnknownType getOnClick()

    /**
     * Get a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @return UnknownType
     */
    public UnknownType getOnContext()
    {
        return this.onContext;
    } //-- UnknownType getOnContext()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnDblClick()
    {
        return this.onDblClick;
    } //-- UnknownType getOnDblClick()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnMouseMove()
    {
        return this.onMouseMove;
    } //-- UnknownType getOnMouseMove()

    /**
     * Get sets height of timepicker area.
     * 
     * @return Integer
     */
    public Integer getTimepickerHeight()
    {
        return this.timepickerHeight;
    } //-- Integer getTimepickerHeight()

    /**
     * Get sets the width of the component.
     * 
     * @return Integer
     */
    public Integer getWidth()
    {
        return this.width;
    } //-- Integer getWidth()

    /**
     * Get used to hide the component borders.
     * 
     * @return Boolean
     */
    public Boolean isBorderless()
    {
        return this.borderless;
    } //-- Boolean isBorderless()

    /**
     * Get disables item.
     * 
     * @return Boolean
     */
    public Boolean isDisabled()
    {
        return this.disabled;
    } //-- Boolean isDisabled()

    /**
     * Get defines whether the view will be hidden initially.
     * 
     * @return Boolean
     */
    public Boolean isHidden()
    {
        return this.hidden;
    } //-- Boolean isHidden()

    /**
     * Get enables the ability to select month by clicking the
     * "month" panel.
     * 
     * @return Boolean
     */
    public Boolean isMonthSelect()
    {
        return this.monthSelect;
    } //-- Boolean isMonthSelect()

    /**
     * Get enables/disables month navigation in header - the
     * possibility to change months (true).
     * 
     * @return Boolean
     */
    public Boolean isNavigation()
    {
        return this.navigation;
    } //-- Boolean isNavigation()

    /**
     * Get enables date selection within the calendar.
     * 
     * @return Boolean
     */
    public Boolean isSelect()
    {
        return this.select;
    } //-- Boolean isSelect()

    /**
     * Get enables/disables displaying empty weeks (true).
     * 
     * @return Boolean
     */
    public Boolean isSkipEmptyWeeks()
    {
        return this.skipEmptyWeeks;
    } //-- Boolean isSkipEmptyWeeks()

    /**
     * Get enables clock for time selection.
     * 
     * @return Boolean
     */
    public Boolean isTimepicker()
    {
        return this.timepicker;
    } //-- Boolean isTimepicker()

    /**
     * Get enables/disables additional header with week days
     * (false).
     * 
     * @return Boolean
     */
    public Boolean isWeekHeader()
    {
        return this.weekHeader;
    } //-- Boolean isWeekHeader()

    /**
     * Get enables/disables additional left column with weeks'
     * numbers (false).
     * 
     * @return Boolean
     */
    public Boolean isWeekNumber()
    {
        return this.weekNumber;
    } //-- Boolean isWeekNumber()

    /**
     * Set defines or disables view change animation.
     * 
     * @param animate
     */
    public void setAnimate( UnknownType animate )
    {
        this.animate = animate;
    } //-- void setAnimate( UnknownType )

    /**
     * Set defines the selectable range.
     * 
     * @param blockDates
     */
    public void setBlockDates( UnknownType blockDates )
    {
        this.blockDates = blockDates;
    } //-- void setBlockDates( UnknownType )

    /**
     * Set used to hide the component borders.
     * 
     * @param borderless
     */
    public void setBorderless( Boolean borderless )
    {
        this.borderless = borderless;
    } //-- void setBorderless( Boolean )

    /**
     * Set the format for the title with the month name and year.
     * 
     * @param calendarHeader
     */
    public void setCalendarHeader( String calendarHeader )
    {
        this.calendarHeader = calendarHeader;
    } //-- void setCalendarHeader( String )

    /**
     * Set defines calendar time format (with timepicker enabled).
     * 
     * @param calendarTime
     */
    public void setCalendarTime( String calendarTime )
    {
        this.calendarTime = calendarTime;
    } //-- void setCalendarTime( String )

    /**
     * Set specifies the label for the column with weeks numbers.
     * 
     * @param calendarWeekHeader
     */
    public void setCalendarWeekHeader( String calendarWeekHeader )
    {
        this.calendarWeekHeader = calendarWeekHeader;
    } //-- void setCalendarWeekHeader( String )

    /**
     * Set the height of the cell with day (36).
     * 
     * @param cellHeight
     */
    public void setCellHeight( Integer cellHeight )
    {
        this.cellHeight = cellHeight;
    } //-- void setCellHeight( Integer )

    /**
     * Set an html container (or its id) where the component needs
     * initializing.
     * 
     * @param container
     */
    public void setContainer( UnknownType container )
    {
        this.container = container;
    } //-- void setContainer( UnknownType )

    /**
     * Set the name of a css class that will be applied to the view
     * container.
     * 
     * @param css
     */
    public void setCss( String css )
    {
        this.css = css;
    } //-- void setCss( String )

    /**
     * Set sets the initial date of the calendar (particularly
     * month and year).
     * 
     * @param date
     */
    public void setDate( UnknownType date )
    {
        this.date = date;
    } //-- void setDate( UnknownType )

    /**
     * Set defines a template for a calendar day cell.
     * 
     * @param dayTemplate
     */
    public void setDayTemplate( UnknownType dayTemplate )
    {
        this.dayTemplate = dayTemplate;
    } //-- void setDayTemplate( UnknownType )

    /**
     * Set disables item.
     * 
     * @param disabled
     */
    public void setDisabled( Boolean disabled )
    {
        this.disabled = disabled;
    } //-- void setDisabled( Boolean )

    /**
     * Set sets an additional css class that will be applied to
     * days.
     * 
     * @param events
     */
    public void setEvents( UnknownType events )
    {
        this.events = events;
    } //-- void setEvents( UnknownType )

    /**
     * Set sets the view gravity (1 by default).
     * 
     * @param gravity
     */
    public void setGravity( Integer gravity )
    {
        this.gravity = gravity;
    } //-- void setGravity( Integer )

    /**
     * Set total height of the area not taken by calendar body.
     * 
     * @param headerHeight
     */
    public void setHeaderHeight( Integer headerHeight )
    {
        this.headerHeight = headerHeight;
    } //-- void setHeaderHeight( Integer )

    /**
     * Set sets the height of the component.
     * 
     * @param height
     */
    public void setHeight( Integer height )
    {
        this.height = height;
    } //-- void setHeight( Integer )

    /**
     * Set defines whether the view will be hidden initially.
     * 
     * @param hidden
     */
    public void setHidden( Boolean hidden )
    {
        this.hidden = hidden;
    } //-- void setHidden( Boolean )

    /**
     * Set the component ID.
     * 
     * @param id
     */
    public void setId( String id )
    {
        this.id = id;
    } //-- void setId( String )

    /**
     * Set set man limit for selected date.
     * 
     * @param maxDate
     */
    public void setMaxDate( UnknownType maxDate )
    {
        this.maxDate = maxDate;
    } //-- void setMaxDate( UnknownType )

    /**
     * Set sets the maximum height for the view.
     * 
     * @param maxHeight
     */
    public void setMaxHeight( Integer maxHeight )
    {
        this.maxHeight = maxHeight;
    } //-- void setMaxHeight( Integer )

    /**
     * Set sets the maximum width for the view.
     * 
     * @param maxWidth
     */
    public void setMaxWidth( Integer maxWidth )
    {
        this.maxWidth = maxWidth;
    } //-- void setMaxWidth( Integer )

    /**
     * Set set min limit for selected date.
     * 
     * @param minDate
     */
    public void setMinDate( UnknownType minDate )
    {
        this.minDate = minDate;
    } //-- void setMinDate( UnknownType )

    /**
     * Set sets the minimal height for the view.
     * 
     * @param minHeight
     */
    public void setMinHeight( Integer minHeight )
    {
        this.minHeight = minHeight;
    } //-- void setMinHeight( Integer )

    /**
     * Set sets the minimal width for the view.
     * 
     * @param minWidth
     */
    public void setMinWidth( Integer minWidth )
    {
        this.minWidth = minWidth;
    } //-- void setMinWidth( Integer )

    /**
     * Set step of time selector.
     * 
     * @param minuteStep
     */
    public void setMinuteStep( UnknownType minuteStep )
    {
        this.minuteStep = minuteStep;
    } //-- void setMinuteStep( UnknownType )

    /**
     * Set enables the ability to select month by clicking the
     * "month" panel.
     * 
     * @param monthSelect
     */
    public void setMonthSelect( Boolean monthSelect )
    {
        this.monthSelect = monthSelect;
    } //-- void setMonthSelect( Boolean )

    /**
     * Set the delay between a real mouse action and invoking the
     * related events.
     * 
     * @param mouseEventDelay
     */
    public void setMouseEventDelay( Integer mouseEventDelay )
    {
        this.mouseEventDelay = mouseEventDelay;
    } //-- void setMouseEventDelay( Integer )

    /**
     * Set enables/disables month navigation in header - the
     * possibility to change months (true).
     * 
     * @param navigation
     */
    public void setNavigation( Boolean navigation )
    {
        this.navigation = navigation;
    } //-- void setNavigation( Boolean )

    /**
     * Set allows attaching custom handlers to inner events of the
     * component.
     * 
     * @param on
     */
    public void setOn( UnknownType on )
    {
        this.on = on;
    } //-- void setOn( UnknownType )

    /**
     * Set attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @param onClick
     */
    public void setOnClick( UnknownType onClick )
    {
        this.onClick = onClick;
    } //-- void setOnClick( UnknownType )

    /**
     * Set a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @param onContext
     */
    public void setOnContext( UnknownType onContext )
    {
        this.onContext = onContext;
    } //-- void setOnContext( UnknownType )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onDblClick
     */
    public void setOnDblClick( UnknownType onDblClick )
    {
        this.onDblClick = onDblClick;
    } //-- void setOnDblClick( UnknownType )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onMouseMove
     */
    public void setOnMouseMove( UnknownType onMouseMove )
    {
        this.onMouseMove = onMouseMove;
    } //-- void setOnMouseMove( UnknownType )

    /**
     * Set enables date selection within the calendar.
     * 
     * @param select
     */
    public void setSelect( Boolean select )
    {
        this.select = select;
    } //-- void setSelect( Boolean )

    /**
     * Set enables/disables displaying empty weeks (true).
     * 
     * @param skipEmptyWeeks
     */
    public void setSkipEmptyWeeks( Boolean skipEmptyWeeks )
    {
        this.skipEmptyWeeks = skipEmptyWeeks;
    } //-- void setSkipEmptyWeeks( Boolean )

    /**
     * Set enables clock for time selection.
     * 
     * @param timepicker
     */
    public void setTimepicker( Boolean timepicker )
    {
        this.timepicker = timepicker;
    } //-- void setTimepicker( Boolean )

    /**
     * Set sets height of timepicker area.
     * 
     * @param timepickerHeight
     */
    public void setTimepickerHeight( Integer timepickerHeight )
    {
        this.timepickerHeight = timepickerHeight;
    } //-- void setTimepickerHeight( Integer )

    /**
     * Set enables/disables additional header with week days
     * (false).
     * 
     * @param weekHeader
     */
    public void setWeekHeader( Boolean weekHeader )
    {
        this.weekHeader = weekHeader;
    } //-- void setWeekHeader( Boolean )

    /**
     * Set enables/disables additional left column with weeks'
     * numbers (false).
     * 
     * @param weekNumber
     */
    public void setWeekNumber( Boolean weekNumber )
    {
        this.weekNumber = weekNumber;
    } //-- void setWeekNumber( Boolean )

    /**
     * Set sets the width of the component.
     * 
     * @param width
     */
    public void setWidth( Integer width )
    {
        this.width = width;
    } //-- void setWidth( Integer )

    /**
     * Adjusts the component to the size of the parent HTML container
     */
    public void adjust() {
        return;
    }
    /**
     * Attaches the handler to an inner event of the component (allows behaviour customizations)
     */
    public Byte attachEvent() {
        return null;
    }
    /**
     * Binds components
     */
    public void bind() {
        return;
    }
    /**
     * Temporarily blocks triggering of ALL events of the calling object
     */
    public void blockEvent() {
        return;
    }
    /**
     * Calls an inner event
     */
    public Boolean callEvent() {
        return null;
    }
    /**
     * Redefines a single configuration property (or a hash of properties)
     */
    public void define() {
        return;
    }
    /**
     * Destructs the calling object
     */
    public void destructor() {
        return;
    }
    /**
     * Detaches a handler from an event (which was attached before by the attachEvent method)
     */
    public void detachEvent() {
        return;
    }
    /**
     * Disables the calling view (makes it dimmed and unclickable)
     */
    public void disable() {
        return;
    }
    /**
     * Enables the calling view that was disabled by the 'disable' method
     */
    public void enable() {
        return;
    }
    /**
     * Returns child views of the calling component
     */
    public Byte getChildViews() {
        return null;
    }
    /**
     * Returns master form for the input
     */
    public Byte getFormView() {
        return null;
    }
    /**
     * Returns the main HTML container for the calling object
     */
    public Byte getNode() {
        return null;
    }
    /**
     * Returns the parent view of the component
     */
    public Byte getParentView() {
        return null;
    }
    /**
     * Gets the current selected date
     */
    public Byte getSelectedDate() {
        return null;
    }
    /**
     * Returns top parent view
     */
    public Byte getTopParentView() {
        return null;
    }
    /**
     * Returns the current value of the component
     */
    public Byte getValue() {
        return null;
    }
    /**
     * Gets visible date
     */
    public Byte getVisibleDate() {
        return null;
    }
    /**
     * Checks whether the component has the specified event
     */
    public Boolean hasEvent() {
        return null;
    }
    /**
     * Hides the view
     */
    public void hide() {
        return;
    }
    /**
     * Checks whether the view is enabled
     */
    public Boolean isEnabled() {
        return null;
    }
    /**
     * Checks whether the view is visible
     */
    public Boolean isVisible() {
        return null;
    }
    /**
     * Gets the id of an item from the specified HTML event
     */
    public Byte locate() {
        return null;
    }
    /**
     * Routes events from one object to another
     */
    public void mapEvent() {
        return;
    }
    /**
     * Repaints the component
     */
    public void refresh() {
        return;
    }
    /**
     * Renders the specified item or the whole component
     */
    public void render() {
        return;
    }
    /**
     * Adjusts the view to a new size
     */
    public void resize() {
        return;
    }
    /**
     * Selects the specified date
     */
    public void selectDate() {
        return;
    }
    /**
     * Sets a new value for the component
     */
    public void setValue() {
        return;
    }
    /**
     * Makes the component visible
     */
    public void show() {
        return;
    }
    /**
     * Makes the specified date displayed in the calendar
     */
    public void showCalendar() {
        return;
    }
    /**
     * Breaks "bind" link
     */
    public void unbind() {
        return;
    }
    /**
     * Cancels blocking events that was enabled by the 'blockEvent' command
     */
    public void unblockEvent() {
        return;
    }
}
