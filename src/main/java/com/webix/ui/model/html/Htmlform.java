// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.7,
// any modifications will be overwritten.
// ==============================================================

package com.webix.ui.model.html;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import com.webix.ui.model.auxiliary.Calendar;
import com.webix.ui.model.auxiliary.Colorboard;
import com.webix.ui.model.auxiliary.Pager;
import com.webix.ui.model.auxiliary.Resizer;
import com.webix.ui.model.auxiliary.Spacer;
import com.webix.ui.model.auxiliary.Tooltip;
import com.webix.ui.model.auxiliary.Video;
import com.webix.ui.model.context.Context;
import com.webix.ui.model.context.Contextmenu;
import com.webix.ui.model.context.Datasuggest;
import com.webix.ui.model.context.Gridsuggest;
import com.webix.ui.model.context.Menu;
import com.webix.ui.model.context.Popup;
import com.webix.ui.model.context.Submenu;
import com.webix.ui.model.context.Suggest;
import com.webix.ui.model.context.Window;
import com.webix.ui.model.data.Chart;
import com.webix.ui.model.data.Datatable;
import com.webix.ui.model.data.Dataview;
import com.webix.ui.model.data.Grouplist;
import com.webix.ui.model.data.List;
import com.webix.ui.model.data.Property;
import com.webix.ui.model.data.Tree;
import com.webix.ui.model.data.Treetable;
import com.webix.ui.model.data.Unitlist;
import com.webix.ui.model.form.Button;
import com.webix.ui.model.form.Checkbox;
import com.webix.ui.model.form.Colorpicker;
import com.webix.ui.model.form.Combo;
import com.webix.ui.model.form.Counter;
import com.webix.ui.model.form.Datepicker;
import com.webix.ui.model.form.Fieldset;
import com.webix.ui.model.form.Icon;
import com.webix.ui.model.form.Label;
import com.webix.ui.model.form.Multiselect;
import com.webix.ui.model.form.Multitext;
import com.webix.ui.model.form.Radio;
import com.webix.ui.model.form.Richselect;
import com.webix.ui.model.form.Search;
import com.webix.ui.model.form.Segmented;
import com.webix.ui.model.form.Select;
import com.webix.ui.model.form.Slider;
import com.webix.ui.model.form.Tabbar;
import com.webix.ui.model.form.Text;
import com.webix.ui.model.form.Textarea;
import com.webix.ui.model.form.Toggle;
import com.webix.ui.model.layouts.Accordion;
import com.webix.ui.model.layouts.Accordionitem;
import com.webix.ui.model.layouts.Carousel;
import com.webix.ui.model.layouts.Form;
import com.webix.ui.model.layouts.Headerlayout;
import com.webix.ui.model.layouts.Layout;
import com.webix.ui.model.layouts.Multiview;
import com.webix.ui.model.layouts.Tabview;
import com.webix.ui.model.layouts.Toolbar;

/**
 * A control for integration with an HTML form.The component allows
 * you to get an HTML Form as a lib-based view, so that to use it
 * together with the other lib components (common API, techniques,
 * architecture etc.). Check htmlform documentation for more
 * detailed description.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class Htmlform
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Defines or disables view change animation.
     */
    private Byte animate;

    /**
     * Lets the component autosize to its contents.
     */
    private Byte autoheight;

    /**
     * Used to hide the component borders.
     */
    private Byte borderless;

    /**
     * An html container (or its id) where the component needs
     * initializing.
     */
    private Byte container;

    /**
     * The id or node, whose content will be moved to the view.
     */
    private Byte content;

    /**
     * The name of a css class that will be applied to the view
     * container.
     */
    private Byte css;

    /**
     * An inline dataset that data to the component will be load
     * from.
     */
    private Byte data;

    /**
     * The url to the data source that the component will use to
     * reload data from.
     */
    private Byte dataFeed;

    /**
     * The type of loaded data.
     */
    private Byte datatype;

    /**
     * Disables item.
     */
    private Byte disabled;

    /**
     * Sets the view gravity (1 by default).
     */
    private Byte gravity;

    /**
     * Sets the height of the component.
     */
    private Byte height;

    /**
     * Defines whether the view will be hidden initially.
     */
    private Byte hidden;

    /**
     * The component ID.
     */
    private Byte id;

    /**
     * Sets the maximum height for the view.
     */
    private Byte maxHeight;

    /**
     * Sets the maximum width for the view.
     */
    private Byte maxWidth;

    /**
     * Sets the minimal height for the view.
     */
    private Byte minHeight;

    /**
     * Sets the minimal width for the view.
     */
    private Byte minWidth;

    /**
     * Allows attaching custom handlers to inner events of the
     * component.
     */
    private Byte on;

    /**
     * Attaches a click behavior for component items with the
     * specified CSS class.
     */
    private Byte onClick;

    /**
     * Defines a set of rules for input field(s) of the
     * form(htmlform).
     */
    private Byte rules;

    /**
     * Enables/disables the scroll bar.
     */
    private Byte scroll;

    /**
     * The time during which the component is scrolled to the
     * specified position (in milliseconds).
     */
    private Byte scrollSpeed;

    /**
     * The path to an external template that is loaded by Ajax.
     */
    private Byte src;

    /**
     * The component template.
     */
    private Byte template;

    /**
     * Name of predefined styling type.
     */
    private Byte type;

    /**
     * The url of a data feed which will be loaded after component
     * initialization.
     */
    private Byte url;

    /**
     * Sets the width of the component.
     */
    private Byte width;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Get defines or disables view change animation.
     * 
     * @return Byte
     */
    public Byte getAnimate()
    {
        return this.animate;
    } //-- Byte getAnimate()

    /**
     * Get lets the component autosize to its contents.
     * 
     * @return Byte
     */
    public Byte getAutoheight()
    {
        return this.autoheight;
    } //-- Byte getAutoheight()

    /**
     * Get used to hide the component borders.
     * 
     * @return Byte
     */
    public Byte getBorderless()
    {
        return this.borderless;
    } //-- Byte getBorderless()

    /**
     * Get an html container (or its id) where the component needs
     * initializing.
     * 
     * @return Byte
     */
    public Byte getContainer()
    {
        return this.container;
    } //-- Byte getContainer()

    /**
     * Get the id or node, whose content will be moved to the view.
     * 
     * @return Byte
     */
    public Byte getContent()
    {
        return this.content;
    } //-- Byte getContent()

    /**
     * Get the name of a css class that will be applied to the view
     * container.
     * 
     * @return Byte
     */
    public Byte getCss()
    {
        return this.css;
    } //-- Byte getCss()

    /**
     * Get an inline dataset that data to the component will be
     * load from.
     * 
     * @return Byte
     */
    public Byte getData()
    {
        return this.data;
    } //-- Byte getData()

    /**
     * Get the url to the data source that the component will use
     * to reload data from.
     * 
     * @return Byte
     */
    public Byte getDataFeed()
    {
        return this.dataFeed;
    } //-- Byte getDataFeed()

    /**
     * Get the type of loaded data.
     * 
     * @return Byte
     */
    public Byte getDatatype()
    {
        return this.datatype;
    } //-- Byte getDatatype()

    /**
     * Get disables item.
     * 
     * @return Byte
     */
    public Byte getDisabled()
    {
        return this.disabled;
    } //-- Byte getDisabled()

    /**
     * Get sets the view gravity (1 by default).
     * 
     * @return Byte
     */
    public Byte getGravity()
    {
        return this.gravity;
    } //-- Byte getGravity()

    /**
     * Get sets the height of the component.
     * 
     * @return Byte
     */
    public Byte getHeight()
    {
        return this.height;
    } //-- Byte getHeight()

    /**
     * Get defines whether the view will be hidden initially.
     * 
     * @return Byte
     */
    public Byte getHidden()
    {
        return this.hidden;
    } //-- Byte getHidden()

    /**
     * Get the component ID.
     * 
     * @return Byte
     */
    public Byte getId()
    {
        return this.id;
    } //-- Byte getId()

    /**
     * Get sets the maximum height for the view.
     * 
     * @return Byte
     */
    public Byte getMaxHeight()
    {
        return this.maxHeight;
    } //-- Byte getMaxHeight()

    /**
     * Get sets the maximum width for the view.
     * 
     * @return Byte
     */
    public Byte getMaxWidth()
    {
        return this.maxWidth;
    } //-- Byte getMaxWidth()

    /**
     * Get sets the minimal height for the view.
     * 
     * @return Byte
     */
    public Byte getMinHeight()
    {
        return this.minHeight;
    } //-- Byte getMinHeight()

    /**
     * Get sets the minimal width for the view.
     * 
     * @return Byte
     */
    public Byte getMinWidth()
    {
        return this.minWidth;
    } //-- Byte getMinWidth()

    /**
     * Get allows attaching custom handlers to inner events of the
     * component.
     * 
     * @return Byte
     */
    public Byte getOn()
    {
        return this.on;
    } //-- Byte getOn()

    /**
     * Get attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnClick()
    {
        return this.onClick;
    } //-- Byte getOnClick()

    /**
     * Get defines a set of rules for input field(s) of the
     * form(htmlform).
     * 
     * @return Byte
     */
    public Byte getRules()
    {
        return this.rules;
    } //-- Byte getRules()

    /**
     * Get enables/disables the scroll bar.
     * 
     * @return Byte
     */
    public Byte getScroll()
    {
        return this.scroll;
    } //-- Byte getScroll()

    /**
     * Get the time during which the component is scrolled to the
     * specified position (in milliseconds).
     * 
     * @return Byte
     */
    public Byte getScrollSpeed()
    {
        return this.scrollSpeed;
    } //-- Byte getScrollSpeed()

    /**
     * Get the path to an external template that is loaded by Ajax.
     * 
     * @return Byte
     */
    public Byte getSrc()
    {
        return this.src;
    } //-- Byte getSrc()

    /**
     * Get the component template.
     * 
     * @return Byte
     */
    public Byte getTemplate()
    {
        return this.template;
    } //-- Byte getTemplate()

    /**
     * Get name of predefined styling type.
     * 
     * @return Byte
     */
    public Byte getType()
    {
        return this.type;
    } //-- Byte getType()

    /**
     * Get the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @return Byte
     */
    public Byte getUrl()
    {
        return this.url;
    } //-- Byte getUrl()

    /**
     * Get sets the width of the component.
     * 
     * @return Byte
     */
    public Byte getWidth()
    {
        return this.width;
    } //-- Byte getWidth()

    /**
     * Set defines or disables view change animation.
     * 
     * @param animate
     */
    public void setAnimate( Byte animate )
    {
        this.animate = animate;
    } //-- void setAnimate( Byte )

    /**
     * Set lets the component autosize to its contents.
     * 
     * @param autoheight
     */
    public void setAutoheight( Byte autoheight )
    {
        this.autoheight = autoheight;
    } //-- void setAutoheight( Byte )

    /**
     * Set used to hide the component borders.
     * 
     * @param borderless
     */
    public void setBorderless( Byte borderless )
    {
        this.borderless = borderless;
    } //-- void setBorderless( Byte )

    /**
     * Set an html container (or its id) where the component needs
     * initializing.
     * 
     * @param container
     */
    public void setContainer( Byte container )
    {
        this.container = container;
    } //-- void setContainer( Byte )

    /**
     * Set the id or node, whose content will be moved to the view.
     * 
     * @param content
     */
    public void setContent( Byte content )
    {
        this.content = content;
    } //-- void setContent( Byte )

    /**
     * Set the name of a css class that will be applied to the view
     * container.
     * 
     * @param css
     */
    public void setCss( Byte css )
    {
        this.css = css;
    } //-- void setCss( Byte )

    /**
     * Set an inline dataset that data to the component will be
     * load from.
     * 
     * @param data
     */
    public void setData( Byte data )
    {
        this.data = data;
    } //-- void setData( Byte )

    /**
     * Set the url to the data source that the component will use
     * to reload data from.
     * 
     * @param dataFeed
     */
    public void setDataFeed( Byte dataFeed )
    {
        this.dataFeed = dataFeed;
    } //-- void setDataFeed( Byte )

    /**
     * Set the type of loaded data.
     * 
     * @param datatype
     */
    public void setDatatype( Byte datatype )
    {
        this.datatype = datatype;
    } //-- void setDatatype( Byte )

    /**
     * Set disables item.
     * 
     * @param disabled
     */
    public void setDisabled( Byte disabled )
    {
        this.disabled = disabled;
    } //-- void setDisabled( Byte )

    /**
     * Set sets the view gravity (1 by default).
     * 
     * @param gravity
     */
    public void setGravity( Byte gravity )
    {
        this.gravity = gravity;
    } //-- void setGravity( Byte )

    /**
     * Set sets the height of the component.
     * 
     * @param height
     */
    public void setHeight( Byte height )
    {
        this.height = height;
    } //-- void setHeight( Byte )

    /**
     * Set defines whether the view will be hidden initially.
     * 
     * @param hidden
     */
    public void setHidden( Byte hidden )
    {
        this.hidden = hidden;
    } //-- void setHidden( Byte )

    /**
     * Set the component ID.
     * 
     * @param id
     */
    public void setId( Byte id )
    {
        this.id = id;
    } //-- void setId( Byte )

    /**
     * Set sets the maximum height for the view.
     * 
     * @param maxHeight
     */
    public void setMaxHeight( Byte maxHeight )
    {
        this.maxHeight = maxHeight;
    } //-- void setMaxHeight( Byte )

    /**
     * Set sets the maximum width for the view.
     * 
     * @param maxWidth
     */
    public void setMaxWidth( Byte maxWidth )
    {
        this.maxWidth = maxWidth;
    } //-- void setMaxWidth( Byte )

    /**
     * Set sets the minimal height for the view.
     * 
     * @param minHeight
     */
    public void setMinHeight( Byte minHeight )
    {
        this.minHeight = minHeight;
    } //-- void setMinHeight( Byte )

    /**
     * Set sets the minimal width for the view.
     * 
     * @param minWidth
     */
    public void setMinWidth( Byte minWidth )
    {
        this.minWidth = minWidth;
    } //-- void setMinWidth( Byte )

    /**
     * Set allows attaching custom handlers to inner events of the
     * component.
     * 
     * @param on
     */
    public void setOn( Byte on )
    {
        this.on = on;
    } //-- void setOn( Byte )

    /**
     * Set attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @param onClick
     */
    public void setOnClick( Byte onClick )
    {
        this.onClick = onClick;
    } //-- void setOnClick( Byte )

    /**
     * Set defines a set of rules for input field(s) of the
     * form(htmlform).
     * 
     * @param rules
     */
    public void setRules( Byte rules )
    {
        this.rules = rules;
    } //-- void setRules( Byte )

    /**
     * Set enables/disables the scroll bar.
     * 
     * @param scroll
     */
    public void setScroll( Byte scroll )
    {
        this.scroll = scroll;
    } //-- void setScroll( Byte )

    /**
     * Set the time during which the component is scrolled to the
     * specified position (in milliseconds).
     * 
     * @param scrollSpeed
     */
    public void setScrollSpeed( Byte scrollSpeed )
    {
        this.scrollSpeed = scrollSpeed;
    } //-- void setScrollSpeed( Byte )

    /**
     * Set the path to an external template that is loaded by Ajax.
     * 
     * @param src
     */
    public void setSrc( Byte src )
    {
        this.src = src;
    } //-- void setSrc( Byte )

    /**
     * Set the component template.
     * 
     * @param template
     */
    public void setTemplate( Byte template )
    {
        this.template = template;
    } //-- void setTemplate( Byte )

    /**
     * Set name of predefined styling type.
     * 
     * @param type
     */
    public void setType( Byte type )
    {
        this.type = type;
    } //-- void setType( Byte )

    /**
     * Set the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @param url
     */
    public void setUrl( Byte url )
    {
        this.url = url;
    } //-- void setUrl( Byte )

    /**
     * Set sets the width of the component.
     * 
     * @param width
     */
    public void setWidth( Byte width )
    {
        this.width = width;
    } //-- void setWidth( Byte )

    /**
     * Adjusts the component to the size of the parent HTML container
     */
    public void adjust() {
        return;
    }
    /**
     * Attaches the handler to an inner event of the component (allows behaviour customizations)
     */
    public Byte attachEvent() {
        return null;
    }
    /**
     * Binds components
     */
    public void bind() {
        return;
    }
    /**
     * Temporarily blocks triggering of ALL events of the calling object
     */
    public void blockEvent() {
        return;
    }
    /**
     * Calls an inner event
     */
    public Boolean callEvent() {
        return null;
    }
    /**
     * Restores initial form values
     */
    public void clear() {
        return;
    }
    /**
     * Removes "data incorrect" highlighting from invalid text fields
     */
    public void clearValidation() {
        return;
    }
    /**
     * Redefines a single configuration property (or a hash of properties)
     */
    public void define() {
        return;
    }
    /**
     * Destructs the calling object
     */
    public void destructor() {
        return;
    }
    /**
     * Detaches a handler from an event (which was attached before by the attachEvent method)
     */
    public void detachEvent() {
        return;
    }
    /**
     * Disables the calling view (makes it dimmed and unclickable)
     */
    public void disable() {
        return;
    }
    /**
     * Enables the calling view that was disabled by the 'disable' method
     */
    public void enable() {
        return;
    }
    /**
     * Sets focus into the necessary component
     */
    public void focus() {
        return;
    }
    /**
     * Returns child views of the calling component
     */
    public Byte getChildViews() {
        return null;
    }
    /**
     * Returns hash of original form values
     */
    public Byte getCleanValues() {
        return null;
    }
    /**
     * Returns hash of changed values
     */
    public Byte getDirtyValues() {
        return null;
    }
    /**
     * Returns master form for the input
     */
    public Byte getFormView() {
        return null;
    }
    /**
     * Returns the main HTML container for the calling object
     */
    public Byte getNode() {
        return null;
    }
    /**
     * Returns the parent view of the component
     */
    public Byte getParentView() {
        return null;
    }
    /**
     * Returns the scroll position
     */
    public Byte getScrollState() {
        return null;
    }
    /**
     * Returns top parent view
     */
    public Byte getTopParentView() {
        return null;
    }
    /**
     * Derives input values from the form
     */
    public Byte getValues() {
        return null;
    }
    /**
     * Checks whether the component has the specified event
     */
    public Boolean hasEvent() {
        return null;
    }
    /**
     * Hides the view
     */
    public void hide() {
        return;
    }
    /**
     * Checks whether changes within form were made
     */
    public Boolean isDirty() {
        return null;
    }
    /**
     * Checks whether the view is enabled
     */
    public Boolean isEnabled() {
        return null;
    }
    /**
     * Checks whether the view is visible
     */
    public Boolean isVisible() {
        return null;
    }
    /**
     * Loads data from an external data source
     */
    public Byte load() {
        return null;
    }
    /**
     * Routes events from one object to another
     */
    public void mapEvent() {
        return;
    }
    /**
     * Loads data to the component from an inline data source
     */
    public void parse() {
        return;
    }
    /**
     * Repaints the component
     */
    public void refresh() {
        return;
    }
    /**
     * Renders the specified item or the whole component
     */
    public void render() {
        return;
    }
    /**
     * Adjusts the view to a new size
     */
    public void resize() {
        return;
    }
    /**
     * Scrolls the data container to a certain position
     */
    public void scrollTo() {
        return;
    }
    /**
     * Marks the form as the one with changed values and vice versa
     */
    public void setDirty() {
        return;
    }
    /**
     * Set hmlt for template
     */
    public void setHTML() {
        return;
    }
    /**
     * Sets values into all the form inputs
     */
    public void setValues() {
        return;
    }
    /**
     * Makes the component visible
     */
    public void show() {
        return;
    }
    /**
     * Allows you to sync two copy of data (all or just a part of it) from one DataCollection to another
     */
    public void sync() {
        return;
    }
    /**
     * Breaks "bind" link
     */
    public void unbind() {
        return;
    }
    /**
     * Cancels blocking events that was enabled by the 'blockEvent' command
     */
    public void unblockEvent() {
        return;
    }
    /**
     * Checks data in the component during adding new item or editing existing ones
     */
    public Boolean validate() {
        return null;
    }
}
