// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.7,
// any modifications will be overwritten.
// ==============================================================

package com.webix.ui.model.data;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import com.webix.ui.model.UnknownType;
import com.webix.ui.model.auxiliary.Calendar;
import com.webix.ui.model.auxiliary.Colorboard;
import com.webix.ui.model.auxiliary.Pager;
import com.webix.ui.model.auxiliary.Resizer;
import com.webix.ui.model.auxiliary.Spacer;
import com.webix.ui.model.auxiliary.Tooltip;
import com.webix.ui.model.auxiliary.Video;
import com.webix.ui.model.context.Context;
import com.webix.ui.model.context.Contextmenu;
import com.webix.ui.model.context.Datasuggest;
import com.webix.ui.model.context.Gridsuggest;
import com.webix.ui.model.context.Menu;
import com.webix.ui.model.context.Popup;
import com.webix.ui.model.context.Submenu;
import com.webix.ui.model.context.Suggest;
import com.webix.ui.model.context.Window;
import com.webix.ui.model.form.Button;
import com.webix.ui.model.form.Checkbox;
import com.webix.ui.model.form.Colorpicker;
import com.webix.ui.model.form.Combo;
import com.webix.ui.model.form.Counter;
import com.webix.ui.model.form.Datepicker;
import com.webix.ui.model.form.Fieldset;
import com.webix.ui.model.form.Icon;
import com.webix.ui.model.form.Label;
import com.webix.ui.model.form.Multiselect;
import com.webix.ui.model.form.Multitext;
import com.webix.ui.model.form.Radio;
import com.webix.ui.model.form.Richselect;
import com.webix.ui.model.form.Search;
import com.webix.ui.model.form.Segmented;
import com.webix.ui.model.form.Select;
import com.webix.ui.model.form.Slider;
import com.webix.ui.model.form.Tabbar;
import com.webix.ui.model.form.Text;
import com.webix.ui.model.form.Textarea;
import com.webix.ui.model.form.Toggle;
import com.webix.ui.model.html.Htmlform;
import com.webix.ui.model.html.Iframe;
import com.webix.ui.model.html.Scrollview;
import com.webix.ui.model.html.Template;
import com.webix.ui.model.layouts.Accordion;
import com.webix.ui.model.layouts.Accordionitem;
import com.webix.ui.model.layouts.Carousel;
import com.webix.ui.model.layouts.Form;
import com.webix.ui.model.layouts.Headerlayout;
import com.webix.ui.model.layouts.Layout;
import com.webix.ui.model.layouts.Multiview;
import com.webix.ui.model.layouts.Tabview;
import com.webix.ui.model.layouts.Toolbar;

/**
 * A vertical list of items grouped into sections by some
 * category.The component provides navigation within the list and
 * between the sections. Support for various data template formats,
 * sorting and filtering features. Check <a
 * href="http://docs.webix.com/desktop__grouplist.html">grouplist</a>
 * documentation for more detailed description.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
@com.webix.ui.model.SupportsEvent({com.webix.ui.model.Event.ON_AFTER_ADD, com.webix.ui.model.Event.ON_AFTER_CONTEXT_MENU, com.webix.ui.model.Event.ON_AFTER_DELETE, com.webix.ui.model.Event.ON_AFTER_DROP, com.webix.ui.model.Event.ON_AFTER_LOAD, com.webix.ui.model.Event.ON_AFTER_RENDER, com.webix.ui.model.Event.ON_AFTER_SCROLL, com.webix.ui.model.Event.ON_AFTER_SELECT, com.webix.ui.model.Event.ON_AFTER_SORT, com.webix.ui.model.Event.ON_BEFORE_ADD, com.webix.ui.model.Event.ON_BEFORE_CONTEXT_MENU, com.webix.ui.model.Event.ON_BEFORE_DELETE, com.webix.ui.model.Event.ON_BEFORE_DRAG, com.webix.ui.model.Event.ON_BEFORE_DRAG_IN, com.webix.ui.model.Event.ON_BEFORE_DROP, com.webix.ui.model.Event.ON_BEFORE_DROP_OUT, com.webix.ui.model.Event.ON_BEFORE_LOAD, com.webix.ui.model.Event.ON_BEFORE_RENDER, com.webix.ui.model.Event.ON_BEFORE_SELECT, com.webix.ui.model.Event.ON_BEFORE_SORT, com.webix.ui.model.Event.ON_BIND_REQUEST, com.webix.ui.model.Event.ON_DATA_REQUEST, com.webix.ui.model.Event.ON_DATA_UPDATE, com.webix.ui.model.Event.ON_DESTRUCT, com.webix.ui.model.Event.ON_DRAG_OUT, com.webix.ui.model.Event.ON_ITEM_CLICK, com.webix.ui.model.Event.ON_ITEM_DBL_CLICK, com.webix.ui.model.Event.ON_ITEM_RENDER, com.webix.ui.model.Event.ON_LOAD_ERROR, com.webix.ui.model.Event.ON_LONG_TOUCH, com.webix.ui.model.Event.ON_MOUSE_MOVE, com.webix.ui.model.Event.ON_MOUSE_MOVING, com.webix.ui.model.Event.ON_MOUSE_OUT, com.webix.ui.model.Event.ON_PASTE, com.webix.ui.model.Event.ON_ROTATE, com.webix.ui.model.Event.ON_SELECT_CHANGE, com.webix.ui.model.Event.ON_SWIPE_X, com.webix.ui.model.Event.ON_SWIPE_Y, com.webix.ui.model.Event.ON_TOUCH_END, com.webix.ui.model.Event.ON_TOUCH_MOVE, com.webix.ui.model.Event.ON_TOUCH_START, com.webix.ui.model.Event.ON_VALIDATION_ERROR, com.webix.ui.model.Event.ON_VALIDATION_SUCCESS, com.webix.ui.model.Event.ON_VIEW_RESIZE})
public class Grouplist
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Defines or disables view change animation.
     */
    private UnknownType animate;

    /**
     * Height of view will be adjusted to show all items.
     */
    private Boolean autoheight;

    /**
     * Width of view will be adjusted to show all items.
     */
    private Boolean autowidth;

    /**
     * Used to hide the component borders.
     */
    private Boolean borderless;

    /**
     * Sets an action happening on a button click.
     */
    private UnknownType click;

    /**
     * Enables/disables clipboard support.
     */
    private UnknownType clipboard;

    /**
     * An html container (or its id) where the component needs
     * initializing.
     */
    private UnknownType container;

    /**
     * The name of a css class that will be applied to the view
     * container.
     */
    private String css;

    /**
     * An inline dataset that data to the component will be load
     * from.
     */
    private UnknownType data;

    /**
     * The url to the data source that the component will use to
     * reload data from.
     */
    private UnknownType dataFeed;

    /**
     * Sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     */
    private Integer datathrottle;

    /**
     * The type of loaded data.
     */
    private String datatype;

    /**
     * Disables item.
     */
    private Boolean disabled;

    /**
     * Enables or disables drag-and-drop.
     */
    private UnknownType drag;

    /**
     * Enables autoscroll of component during drag-n-drop.
     */
    private UnknownType dragscroll;

    /**
     * Allows defining custom 'move' logic for the component.
     */
    private UnknownType externalData;

    /**
     * Sets the view gravity (1 by default).
     */
    private Integer gravity;

    /**
     * Sets the height of the component.
     */
    private Integer height;

    /**
     * Defines whether the view will be hidden initially.
     */
    private Boolean hidden;

    /**
     * The component ID.
     */
    private String id;

    /**
     * Defines x or y orientation of layout.
     */
    private String layout;

    /**
     * Sets the maximum height for the view.
     */
    private Integer maxHeight;

    /**
     * Sets the maximum width for the view.
     */
    private Integer maxWidth;

    /**
     * Sets the minimal height for the view.
     */
    private Integer minHeight;

    /**
     * Sets the minimal width for the view.
     */
    private Integer minWidth;

    /**
     * The delay between a real mouse action and invoking the
     * related events.
     */
    private Integer mouseEventDelay;

    /**
     * Activates the selection keyboard navigation.
     */
    private Boolean navigation;

    /**
     * Allows attaching custom handlers to inner events of the
     * component.
     */
    private UnknownType on;

    /**
     * Attaches a click behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onClick;

    /**
     * A property used to define custom context-click (right click)
     * handlers for elements in the DataTable cells
     * .
     */
    private UnknownType onContext;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onDblClick;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onMouseMove;

    /**
     * Defines paging configuration ( creates a 'ui.pager' object).
     */
    private UnknownType pager;

    /**
     * A handler that is called just after the page has been
     * completely parsed.
     */
    private UnknownType ready;

    /**
     * Defines how to treat items in case of reloading.
     */
    private Boolean removeMissed;

    /**
     * Set of validation rules for the component.
     */
    private UnknownType rules;

    /**
     * Defines urls for datasaving.
     */
    private String save;

    /**
     * Defines schemes for data processing.
     */
    private UnknownType scheme;

    /**
     * Enables/disables the scroll bar.
     */
    private UnknownType scroll;

    /**
     * The time during which the component is scrolled to the
     * specified position (in milliseconds).
     */
    private String scrollSpeed;

    /**
     * Enables/disables item selection or multiselection in
     * grouplist.
     */
    private UnknownType select;

    /**
     * The component template.
     */
    private UnknownType template;

    /**
     * An html template that defines data that will be presented in
     * group header in the expanded state.
     */
    private UnknownType templateBack;

    /**
     * Sets the template according to which data will be copied to
     * the clipboard.
     */
    private UnknownType templateCopy;

    /**
     * An html template that defines data that will be presented in
     * group header in the collapsed state.
     */
    private UnknownType templateGroup;

    /**
     * An html template that defines data that will be presented in
     * grouplist.
     */
    private UnknownType templateItem;

    /**
     * Sets a popup message appearing on pointing a mouse cursor
     * over the dedicated item.
     */
    private UnknownType tooltip;

    /**
     * Object that specifies items presentation.
     */
    private UnknownType type;

    /**
     * The url of a data feed which will be loaded after component
     * initialization.
     */
    private String url;

    /**
     * Sets the width of the component.
     */
    private Integer width;

    /**
     * Defines width of view in items.
     */
    private UnknownType xCount;

    /**
     * Defines height of view in items.
     */
    private Integer yCount;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Get defines or disables view change animation.
     * 
     * @return UnknownType
     */
    public UnknownType getAnimate()
    {
        return this.animate;
    } //-- UnknownType getAnimate()

    /**
     * Get sets an action happening on a button click.
     * 
     * @return UnknownType
     */
    public UnknownType getClick()
    {
        return this.click;
    } //-- UnknownType getClick()

    /**
     * Get enables/disables clipboard support.
     * 
     * @return UnknownType
     */
    public UnknownType getClipboard()
    {
        return this.clipboard;
    } //-- UnknownType getClipboard()

    /**
     * Get an html container (or its id) where the component needs
     * initializing.
     * 
     * @return UnknownType
     */
    public UnknownType getContainer()
    {
        return this.container;
    } //-- UnknownType getContainer()

    /**
     * Get the name of a css class that will be applied to the view
     * container.
     * 
     * @return String
     */
    public String getCss()
    {
        return this.css;
    } //-- String getCss()

    /**
     * Get an inline dataset that data to the component will be
     * load from.
     * 
     * @return UnknownType
     */
    public UnknownType getData()
    {
        return this.data;
    } //-- UnknownType getData()

    /**
     * Get the url to the data source that the component will use
     * to reload data from.
     * 
     * @return UnknownType
     */
    public UnknownType getDataFeed()
    {
        return this.dataFeed;
    } //-- UnknownType getDataFeed()

    /**
     * Get sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     * 
     * @return Integer
     */
    public Integer getDatathrottle()
    {
        return this.datathrottle;
    } //-- Integer getDatathrottle()

    /**
     * Get the type of loaded data.
     * 
     * @return String
     */
    public String getDatatype()
    {
        return this.datatype;
    } //-- String getDatatype()

    /**
     * Get enables or disables drag-and-drop.
     * 
     * @return UnknownType
     */
    public UnknownType getDrag()
    {
        return this.drag;
    } //-- UnknownType getDrag()

    /**
     * Get enables autoscroll of component during drag-n-drop.
     * 
     * @return UnknownType
     */
    public UnknownType getDragscroll()
    {
        return this.dragscroll;
    } //-- UnknownType getDragscroll()

    /**
     * Get allows defining custom 'move' logic for the component.
     * 
     * @return UnknownType
     */
    public UnknownType getExternalData()
    {
        return this.externalData;
    } //-- UnknownType getExternalData()

    /**
     * Get sets the view gravity (1 by default).
     * 
     * @return Integer
     */
    public Integer getGravity()
    {
        return this.gravity;
    } //-- Integer getGravity()

    /**
     * Get sets the height of the component.
     * 
     * @return Integer
     */
    public Integer getHeight()
    {
        return this.height;
    } //-- Integer getHeight()

    /**
     * Get the component ID.
     * 
     * @return String
     */
    public String getId()
    {
        return this.id;
    } //-- String getId()

    /**
     * Get defines x or y orientation of layout.
     * 
     * @return String
     */
    public String getLayout()
    {
        return this.layout;
    } //-- String getLayout()

    /**
     * Get sets the maximum height for the view.
     * 
     * @return Integer
     */
    public Integer getMaxHeight()
    {
        return this.maxHeight;
    } //-- Integer getMaxHeight()

    /**
     * Get sets the maximum width for the view.
     * 
     * @return Integer
     */
    public Integer getMaxWidth()
    {
        return this.maxWidth;
    } //-- Integer getMaxWidth()

    /**
     * Get sets the minimal height for the view.
     * 
     * @return Integer
     */
    public Integer getMinHeight()
    {
        return this.minHeight;
    } //-- Integer getMinHeight()

    /**
     * Get sets the minimal width for the view.
     * 
     * @return Integer
     */
    public Integer getMinWidth()
    {
        return this.minWidth;
    } //-- Integer getMinWidth()

    /**
     * Get the delay between a real mouse action and invoking the
     * related events.
     * 
     * @return Integer
     */
    public Integer getMouseEventDelay()
    {
        return this.mouseEventDelay;
    } //-- Integer getMouseEventDelay()

    /**
     * Get allows attaching custom handlers to inner events of the
     * component.
     * 
     * @return UnknownType
     */
    public UnknownType getOn()
    {
        return this.on;
    } //-- UnknownType getOn()

    /**
     * Get attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnClick()
    {
        return this.onClick;
    } //-- UnknownType getOnClick()

    /**
     * Get a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @return UnknownType
     */
    public UnknownType getOnContext()
    {
        return this.onContext;
    } //-- UnknownType getOnContext()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnDblClick()
    {
        return this.onDblClick;
    } //-- UnknownType getOnDblClick()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnMouseMove()
    {
        return this.onMouseMove;
    } //-- UnknownType getOnMouseMove()

    /**
     * Get defines paging configuration ( creates a 'ui.pager'
     * object).
     * 
     * @return UnknownType
     */
    public UnknownType getPager()
    {
        return this.pager;
    } //-- UnknownType getPager()

    /**
     * Get a handler that is called just after the page has been
     * completely parsed.
     * 
     * @return UnknownType
     */
    public UnknownType getReady()
    {
        return this.ready;
    } //-- UnknownType getReady()

    /**
     * Get set of validation rules for the component.
     * 
     * @return UnknownType
     */
    public UnknownType getRules()
    {
        return this.rules;
    } //-- UnknownType getRules()

    /**
     * Get defines urls for datasaving.
     * 
     * @return String
     */
    public String getSave()
    {
        return this.save;
    } //-- String getSave()

    /**
     * Get defines schemes for data processing.
     * 
     * @return UnknownType
     */
    public UnknownType getScheme()
    {
        return this.scheme;
    } //-- UnknownType getScheme()

    /**
     * Get enables/disables the scroll bar.
     * 
     * @return UnknownType
     */
    public UnknownType getScroll()
    {
        return this.scroll;
    } //-- UnknownType getScroll()

    /**
     * Get the time during which the component is scrolled to the
     * specified position (in milliseconds).
     * 
     * @return String
     */
    public String getScrollSpeed()
    {
        return this.scrollSpeed;
    } //-- String getScrollSpeed()

    /**
     * Get enables/disables item selection or multiselection in
     * grouplist.
     * 
     * @return UnknownType
     */
    public UnknownType getSelect()
    {
        return this.select;
    } //-- UnknownType getSelect()

    /**
     * Get the component template.
     * 
     * @return UnknownType
     */
    public UnknownType getTemplate()
    {
        return this.template;
    } //-- UnknownType getTemplate()

    /**
     * Get an html template that defines data that will be
     * presented in group header in the expanded state.
     * 
     * @return UnknownType
     */
    public UnknownType getTemplateBack()
    {
        return this.templateBack;
    } //-- UnknownType getTemplateBack()

    /**
     * Get sets the template according to which data will be copied
     * to the clipboard.
     * 
     * @return UnknownType
     */
    public UnknownType getTemplateCopy()
    {
        return this.templateCopy;
    } //-- UnknownType getTemplateCopy()

    /**
     * Get an html template that defines data that will be
     * presented in group header in the collapsed state.
     * 
     * @return UnknownType
     */
    public UnknownType getTemplateGroup()
    {
        return this.templateGroup;
    } //-- UnknownType getTemplateGroup()

    /**
     * Get an html template that defines data that will be
     * presented in grouplist.
     * 
     * @return UnknownType
     */
    public UnknownType getTemplateItem()
    {
        return this.templateItem;
    } //-- UnknownType getTemplateItem()

    /**
     * Get sets a popup message appearing on pointing a mouse
     * cursor over the dedicated item.
     * 
     * @return UnknownType
     */
    public UnknownType getTooltip()
    {
        return this.tooltip;
    } //-- UnknownType getTooltip()

    /**
     * Get object that specifies items presentation.
     * 
     * @return UnknownType
     */
    public UnknownType getType()
    {
        return this.type;
    } //-- UnknownType getType()

    /**
     * Get the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @return String
     */
    public String getUrl()
    {
        return this.url;
    } //-- String getUrl()

    /**
     * Get sets the width of the component.
     * 
     * @return Integer
     */
    public Integer getWidth()
    {
        return this.width;
    } //-- Integer getWidth()

    /**
     * Get defines width of view in items.
     * 
     * @return UnknownType
     */
    public UnknownType getXCount()
    {
        return this.xCount;
    } //-- UnknownType getXCount()

    /**
     * Get defines height of view in items.
     * 
     * @return Integer
     */
    public Integer getYCount()
    {
        return this.yCount;
    } //-- Integer getYCount()

    /**
     * Get height of view will be adjusted to show all items.
     * 
     * @return Boolean
     */
    public Boolean isAutoheight()
    {
        return this.autoheight;
    } //-- Boolean isAutoheight()

    /**
     * Get width of view will be adjusted to show all items.
     * 
     * @return Boolean
     */
    public Boolean isAutowidth()
    {
        return this.autowidth;
    } //-- Boolean isAutowidth()

    /**
     * Get used to hide the component borders.
     * 
     * @return Boolean
     */
    public Boolean isBorderless()
    {
        return this.borderless;
    } //-- Boolean isBorderless()

    /**
     * Get disables item.
     * 
     * @return Boolean
     */
    public Boolean isDisabled()
    {
        return this.disabled;
    } //-- Boolean isDisabled()

    /**
     * Get defines whether the view will be hidden initially.
     * 
     * @return Boolean
     */
    public Boolean isHidden()
    {
        return this.hidden;
    } //-- Boolean isHidden()

    /**
     * Get activates the selection keyboard navigation.
     * 
     * @return Boolean
     */
    public Boolean isNavigation()
    {
        return this.navigation;
    } //-- Boolean isNavigation()

    /**
     * Get defines how to treat items in case of reloading.
     * 
     * @return Boolean
     */
    public Boolean isRemoveMissed()
    {
        return this.removeMissed;
    } //-- Boolean isRemoveMissed()

    /**
     * Set defines or disables view change animation.
     * 
     * @param animate
     */
    public void setAnimate( UnknownType animate )
    {
        this.animate = animate;
    } //-- void setAnimate( UnknownType )

    /**
     * Set height of view will be adjusted to show all items.
     * 
     * @param autoheight
     */
    public void setAutoheight( Boolean autoheight )
    {
        this.autoheight = autoheight;
    } //-- void setAutoheight( Boolean )

    /**
     * Set width of view will be adjusted to show all items.
     * 
     * @param autowidth
     */
    public void setAutowidth( Boolean autowidth )
    {
        this.autowidth = autowidth;
    } //-- void setAutowidth( Boolean )

    /**
     * Set used to hide the component borders.
     * 
     * @param borderless
     */
    public void setBorderless( Boolean borderless )
    {
        this.borderless = borderless;
    } //-- void setBorderless( Boolean )

    /**
     * Set sets an action happening on a button click.
     * 
     * @param click
     */
    public void setClick( UnknownType click )
    {
        this.click = click;
    } //-- void setClick( UnknownType )

    /**
     * Set enables/disables clipboard support.
     * 
     * @param clipboard
     */
    public void setClipboard( UnknownType clipboard )
    {
        this.clipboard = clipboard;
    } //-- void setClipboard( UnknownType )

    /**
     * Set an html container (or its id) where the component needs
     * initializing.
     * 
     * @param container
     */
    public void setContainer( UnknownType container )
    {
        this.container = container;
    } //-- void setContainer( UnknownType )

    /**
     * Set the name of a css class that will be applied to the view
     * container.
     * 
     * @param css
     */
    public void setCss( String css )
    {
        this.css = css;
    } //-- void setCss( String )

    /**
     * Set an inline dataset that data to the component will be
     * load from.
     * 
     * @param data
     */
    public void setData( UnknownType data )
    {
        this.data = data;
    } //-- void setData( UnknownType )

    /**
     * Set the url to the data source that the component will use
     * to reload data from.
     * 
     * @param dataFeed
     */
    public void setDataFeed( UnknownType dataFeed )
    {
        this.dataFeed = dataFeed;
    } //-- void setDataFeed( UnknownType )

    /**
     * Set sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     * 
     * @param datathrottle
     */
    public void setDatathrottle( Integer datathrottle )
    {
        this.datathrottle = datathrottle;
    } //-- void setDatathrottle( Integer )

    /**
     * Set the type of loaded data.
     * 
     * @param datatype
     */
    public void setDatatype( String datatype )
    {
        this.datatype = datatype;
    } //-- void setDatatype( String )

    /**
     * Set disables item.
     * 
     * @param disabled
     */
    public void setDisabled( Boolean disabled )
    {
        this.disabled = disabled;
    } //-- void setDisabled( Boolean )

    /**
     * Set enables or disables drag-and-drop.
     * 
     * @param drag
     */
    public void setDrag( UnknownType drag )
    {
        this.drag = drag;
    } //-- void setDrag( UnknownType )

    /**
     * Set enables autoscroll of component during drag-n-drop.
     * 
     * @param dragscroll
     */
    public void setDragscroll( UnknownType dragscroll )
    {
        this.dragscroll = dragscroll;
    } //-- void setDragscroll( UnknownType )

    /**
     * Set allows defining custom 'move' logic for the component.
     * 
     * @param externalData
     */
    public void setExternalData( UnknownType externalData )
    {
        this.externalData = externalData;
    } //-- void setExternalData( UnknownType )

    /**
     * Set sets the view gravity (1 by default).
     * 
     * @param gravity
     */
    public void setGravity( Integer gravity )
    {
        this.gravity = gravity;
    } //-- void setGravity( Integer )

    /**
     * Set sets the height of the component.
     * 
     * @param height
     */
    public void setHeight( Integer height )
    {
        this.height = height;
    } //-- void setHeight( Integer )

    /**
     * Set defines whether the view will be hidden initially.
     * 
     * @param hidden
     */
    public void setHidden( Boolean hidden )
    {
        this.hidden = hidden;
    } //-- void setHidden( Boolean )

    /**
     * Set the component ID.
     * 
     * @param id
     */
    public void setId( String id )
    {
        this.id = id;
    } //-- void setId( String )

    /**
     * Set defines x or y orientation of layout.
     * 
     * @param layout
     */
    public void setLayout( String layout )
    {
        this.layout = layout;
    } //-- void setLayout( String )

    /**
     * Set sets the maximum height for the view.
     * 
     * @param maxHeight
     */
    public void setMaxHeight( Integer maxHeight )
    {
        this.maxHeight = maxHeight;
    } //-- void setMaxHeight( Integer )

    /**
     * Set sets the maximum width for the view.
     * 
     * @param maxWidth
     */
    public void setMaxWidth( Integer maxWidth )
    {
        this.maxWidth = maxWidth;
    } //-- void setMaxWidth( Integer )

    /**
     * Set sets the minimal height for the view.
     * 
     * @param minHeight
     */
    public void setMinHeight( Integer minHeight )
    {
        this.minHeight = minHeight;
    } //-- void setMinHeight( Integer )

    /**
     * Set sets the minimal width for the view.
     * 
     * @param minWidth
     */
    public void setMinWidth( Integer minWidth )
    {
        this.minWidth = minWidth;
    } //-- void setMinWidth( Integer )

    /**
     * Set the delay between a real mouse action and invoking the
     * related events.
     * 
     * @param mouseEventDelay
     */
    public void setMouseEventDelay( Integer mouseEventDelay )
    {
        this.mouseEventDelay = mouseEventDelay;
    } //-- void setMouseEventDelay( Integer )

    /**
     * Set activates the selection keyboard navigation.
     * 
     * @param navigation
     */
    public void setNavigation( Boolean navigation )
    {
        this.navigation = navigation;
    } //-- void setNavigation( Boolean )

    /**
     * Set allows attaching custom handlers to inner events of the
     * component.
     * 
     * @param on
     */
    public void setOn( UnknownType on )
    {
        this.on = on;
    } //-- void setOn( UnknownType )

    /**
     * Set attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @param onClick
     */
    public void setOnClick( UnknownType onClick )
    {
        this.onClick = onClick;
    } //-- void setOnClick( UnknownType )

    /**
     * Set a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @param onContext
     */
    public void setOnContext( UnknownType onContext )
    {
        this.onContext = onContext;
    } //-- void setOnContext( UnknownType )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onDblClick
     */
    public void setOnDblClick( UnknownType onDblClick )
    {
        this.onDblClick = onDblClick;
    } //-- void setOnDblClick( UnknownType )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onMouseMove
     */
    public void setOnMouseMove( UnknownType onMouseMove )
    {
        this.onMouseMove = onMouseMove;
    } //-- void setOnMouseMove( UnknownType )

    /**
     * Set defines paging configuration ( creates a 'ui.pager'
     * object).
     * 
     * @param pager
     */
    public void setPager( UnknownType pager )
    {
        this.pager = pager;
    } //-- void setPager( UnknownType )

    /**
     * Set a handler that is called just after the page has been
     * completely parsed.
     * 
     * @param ready
     */
    public void setReady( UnknownType ready )
    {
        this.ready = ready;
    } //-- void setReady( UnknownType )

    /**
     * Set defines how to treat items in case of reloading.
     * 
     * @param removeMissed
     */
    public void setRemoveMissed( Boolean removeMissed )
    {
        this.removeMissed = removeMissed;
    } //-- void setRemoveMissed( Boolean )

    /**
     * Set set of validation rules for the component.
     * 
     * @param rules
     */
    public void setRules( UnknownType rules )
    {
        this.rules = rules;
    } //-- void setRules( UnknownType )

    /**
     * Set defines urls for datasaving.
     * 
     * @param save
     */
    public void setSave( String save )
    {
        this.save = save;
    } //-- void setSave( String )

    /**
     * Set defines schemes for data processing.
     * 
     * @param scheme
     */
    public void setScheme( UnknownType scheme )
    {
        this.scheme = scheme;
    } //-- void setScheme( UnknownType )

    /**
     * Set enables/disables the scroll bar.
     * 
     * @param scroll
     */
    public void setScroll( UnknownType scroll )
    {
        this.scroll = scroll;
    } //-- void setScroll( UnknownType )

    /**
     * Set the time during which the component is scrolled to the
     * specified position (in milliseconds).
     * 
     * @param scrollSpeed
     */
    public void setScrollSpeed( String scrollSpeed )
    {
        this.scrollSpeed = scrollSpeed;
    } //-- void setScrollSpeed( String )

    /**
     * Set enables/disables item selection or multiselection in
     * grouplist.
     * 
     * @param select
     */
    public void setSelect( UnknownType select )
    {
        this.select = select;
    } //-- void setSelect( UnknownType )

    /**
     * Set the component template.
     * 
     * @param template
     */
    public void setTemplate( UnknownType template )
    {
        this.template = template;
    } //-- void setTemplate( UnknownType )

    /**
     * Set an html template that defines data that will be
     * presented in group header in the expanded state.
     * 
     * @param templateBack
     */
    public void setTemplateBack( UnknownType templateBack )
    {
        this.templateBack = templateBack;
    } //-- void setTemplateBack( UnknownType )

    /**
     * Set sets the template according to which data will be copied
     * to the clipboard.
     * 
     * @param templateCopy
     */
    public void setTemplateCopy( UnknownType templateCopy )
    {
        this.templateCopy = templateCopy;
    } //-- void setTemplateCopy( UnknownType )

    /**
     * Set an html template that defines data that will be
     * presented in group header in the collapsed state.
     * 
     * @param templateGroup
     */
    public void setTemplateGroup( UnknownType templateGroup )
    {
        this.templateGroup = templateGroup;
    } //-- void setTemplateGroup( UnknownType )

    /**
     * Set an html template that defines data that will be
     * presented in grouplist.
     * 
     * @param templateItem
     */
    public void setTemplateItem( UnknownType templateItem )
    {
        this.templateItem = templateItem;
    } //-- void setTemplateItem( UnknownType )

    /**
     * Set sets a popup message appearing on pointing a mouse
     * cursor over the dedicated item.
     * 
     * @param tooltip
     */
    public void setTooltip( UnknownType tooltip )
    {
        this.tooltip = tooltip;
    } //-- void setTooltip( UnknownType )

    /**
     * Set object that specifies items presentation.
     * 
     * @param type
     */
    public void setType( UnknownType type )
    {
        this.type = type;
    } //-- void setType( UnknownType )

    /**
     * Set the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @param url
     */
    public void setUrl( String url )
    {
        this.url = url;
    } //-- void setUrl( String )

    /**
     * Set sets the width of the component.
     * 
     * @param width
     */
    public void setWidth( Integer width )
    {
        this.width = width;
    } //-- void setWidth( Integer )

    /**
     * Set defines width of view in items.
     * 
     * @param xCount
     */
    public void setXCount( UnknownType xCount )
    {
        this.xCount = xCount;
    } //-- void setXCount( UnknownType )

    /**
     * Set defines height of view in items.
     * 
     * @param yCount
     */
    public void setYCount( Integer yCount )
    {
        this.yCount = yCount;
    } //-- void setYCount( Integer )

    /**
     * Adds an item to the store
     */
    public Byte add() {
        return null;
    }
    /**
     * Applied CSS class to a component item
     */
    public void addCss() {
        return;
    }
    /**
     * Adjusts the component to the size of the parent HTML container
     */
    public void adjust() {
        return;
    }
    /**
     * Attaches the handler to an inner event of the component (allows behaviour customizations)
     */
    public Byte attachEvent() {
        return null;
    }
    /**
     * Binds components
     */
    public void bind() {
        return;
    }
    /**
     * Temporarily blocks triggering of ALL events of the calling object
     */
    public void blockEvent() {
        return;
    }
    /**
     * Calls an inner event
     */
    public Boolean callEvent() {
        return null;
    }
    /**
     * Removes all items from the component
     */
    public void clearAll() {
        return;
    }
    /**
     * Removes css class from all items
     */
    public void clearCss() {
        return;
    }
    /**
     * Removes all validation marks from the component
     */
    public void clearValidation() {
        return;
    }
    /**
     * Copies an item to the same or another object
     */
    public void copy() {
        return;
    }
    /**
     * Returns the count of items in the table
     */
    public Integer count() {
        return null;
    }
    /**
     * Redefines the 'type' property
     */
    public void customize() {
        return;
    }
    /**
     * Redefines a single configuration property (or a hash of properties)
     */
    public void define() {
        return;
    }
    /**
     * Destructs the calling object
     */
    public void destructor() {
        return;
    }
    /**
     * Detaches a handler from an event (which was attached before by the attachEvent method)
     */
    public void detachEvent() {
        return;
    }
    /**
     * Disables the calling view (makes it dimmed and unclickable)
     */
    public void disable() {
        return;
    }
    /**
     * Enables the calling view that was disabled by the 'disable' method
     */
    public void enable() {
        return;
    }
    /**
     * Checks whether an item with the specified id exists
     */
    public Boolean exists() {
        return null;
    }
    /**
     * Filters the component
     */
    public void filter() {
        return;
    }
    /**
     * Returns child views of the calling component
     */
    public Byte getChildViews() {
        return null;
    }
    /**
     * Returns the ID of the first item
     */
    public Byte getFirstId() {
        return null;
    }
    /**
     * Returns master form for the input
     */
    public Byte getFormView() {
        return null;
    }
    /**
     * Returns the id of the item with the specified index
     */
    public Byte getIdByIndex() {
        return null;
    }
    /**
     * Returns the index of the item with the specified id
     */
    public Integer getIndexById() {
        return null;
    }
    /**
     * Gets the object of the data item with the specified id
     */
    public Byte getItem() {
        return null;
    }
    /**
     * Returns html element of the item
     */
    public void getItemNode() {
        return;
    }
    /**
     * Returns the id of the last item
     */
    public Byte getLastId() {
        return null;
    }
    /**
     * Returns the ID of an item which is positioned the specified step after the specified item
     */
    public Byte getNextId() {
        return null;
    }
    /**
     * Returns the main HTML container for the calling object
     */
    public Byte getNode() {
        return null;
    }
    /**
     * Gets IDs of items taking part in the current group opening
     */
    public Byte getOpenState() {
        return null;
    }
    /**
     * Returns the currently visible page in case of paged view
     */
    public Integer getPage() {
        return null;
    }
    /**
     * Returns the parent view of the component
     */
    public Byte getParentView() {
        return null;
    }
    /**
     * Returns the ID of an item which is positioned the specified step before the specified item
     */
    public Byte getPrevId() {
        return null;
    }
    /**
     * Returns the scroll position
     */
    public Byte getScrollState() {
        return null;
    }
    /**
     * Returns the id(s) of the selected item(s)
     */
    public Byte getSelectedId() {
        return null;
    }
    /**
     * Returns selected object
     */
    public Byte getSelectedItem() {
        return null;
    }
    /**
     * Returns top parent view
     */
    public Byte getTopParentView() {
        return null;
    }
    /**
     * Returns the number of items that can be seen with the current view height
     */
    public Integer getVisibleCount() {
        return null;
    }
    /**
     * Groups data by the specified data property
     */
    public void group() {
        return;
    }
    /**
     * Checks if item has specific css class
     */
    public Boolean hasCss() {
        return null;
    }
    /**
     * Checks whether the component has the specified event
     */
    public Boolean hasEvent() {
        return null;
    }
    /**
     * Hides the view
     */
    public void hide() {
        return;
    }
    /**
     * Checks whether the view is enabled
     */
    public Boolean isEnabled() {
        return null;
    }
    /**
     * Checks whether the specified item is selected or not
     */
    public Boolean isSelected() {
        return null;
    }
    /**
     * Checks whether the view is visible
     */
    public Boolean isVisible() {
        return null;
    }
    /**
     * Loads data from an external data source
     */
    public Byte load() {
        return null;
    }
    /**
     * Sends a request to load the specified number of records to the end or to the specified position
     */
    public void loadNext() {
        return;
    }
    /**
     * Gets the id of an item from the specified HTML event
     */
    public Byte locate() {
        return null;
    }
    /**
     * Routes events from one object to another
     */
    public void mapEvent() {
        return;
    }
    /**
     * Moves the specified item to the new position
     */
    public String move() {
        return null;
    }
    /**
     * Moves the specified item to the last position
     */
    public void moveBottom() {
        return;
    }
    /**
     * Increases the item index and moves the item to the new position
     */
    public void moveDown() {
        return;
    }
    /**
     * Moves selection in the specified direction
     */
    public void moveSelection() {
        return;
    }
    /**
     * Moves the specified item to the first position
     */
    public void moveTop() {
        return;
    }
    /**
     * Decreases the item index and moves the item to the new position
     */
    public void moveUp() {
        return;
    }
    /**
     * Loads data to the component from an inline data source
     */
    public void parse() {
        return;
    }
    /**
     * Repaints the whole view or a certain item
     */
    public void refresh() {
        return;
    }
    /**
     * Removes the specified item from datastore
     */
    public void remove() {
        return;
    }
    /**
     * Removes CSS class from a component item
     */
    public void removeCss() {
        return;
    }
    /**
     * Renders the specified item or the whole component
     */
    public void render() {
        return;
    }
    /**
     * Adjusts the view to a new size
     */
    public void resize() {
        return;
    }
    /**
     * Scrolls the data container to a certain position
     */
    public void scrollTo() {
        return;
    }
    /**
     * Selects the specified item(s)
     */
    public void select() {
        return;
    }
    /**
     * Selects all items or the specified range
     */
    public void selectAll() {
        return;
    }
    /**
     * Serializes data to a json object
     */
    public Byte serialize() {
        return null;
    }
    /**
     * Makes the specified page visible (assuming that the pager was defined )
     */
    public void setPage() {
        return;
    }
    /**
     * Makes the component visible
     */
    public void show() {
        return;
    }
    /**
     * Scrolls the component to make the specified item visible
     */
    public void showItem() {
        return;
    }
    /**
     * Sorts datastore
     */
    public void sort() {
        return;
    }
    /**
     * Allows you to sync two copy of data (all or just a part of it) from one DataCollection to another
     */
    public void sync() {
        return;
    }
    /**
     * Breaks "bind" link
     */
    public void unbind() {
        return;
    }
    /**
     * Cancels blocking events that was enabled by the 'blockEvent' command
     */
    public void unblockEvent() {
        return;
    }
    /**
     * Ungroups data
     */
    public void ungroup() {
        return;
    }
    /**
     * Removes selection from the specified item
     */
    public void unselect() {
        return;
    }
    /**
     * Removes selection from all items
     */
    public void unselectAll() {
        return;
    }
    /**
     * Sets properties of the data item
     */
    public void updateItem() {
        return;
    }
    /**
     * Validates one record or all dataset against validation rules
     */
    public Boolean validate() {
        return null;
    }
}
