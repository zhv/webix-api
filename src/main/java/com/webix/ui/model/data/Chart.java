// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.7,
// any modifications will be overwritten.
// ==============================================================

package com.webix.ui.model.data;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import com.webix.ui.model.auxiliary.Calendar;
import com.webix.ui.model.auxiliary.Colorboard;
import com.webix.ui.model.auxiliary.Pager;
import com.webix.ui.model.auxiliary.Resizer;
import com.webix.ui.model.auxiliary.Spacer;
import com.webix.ui.model.auxiliary.Tooltip;
import com.webix.ui.model.auxiliary.Video;
import com.webix.ui.model.context.Context;
import com.webix.ui.model.context.Contextmenu;
import com.webix.ui.model.context.Datasuggest;
import com.webix.ui.model.context.Gridsuggest;
import com.webix.ui.model.context.Menu;
import com.webix.ui.model.context.Popup;
import com.webix.ui.model.context.Submenu;
import com.webix.ui.model.context.Suggest;
import com.webix.ui.model.context.Window;
import com.webix.ui.model.form.Button;
import com.webix.ui.model.form.Checkbox;
import com.webix.ui.model.form.Colorpicker;
import com.webix.ui.model.form.Combo;
import com.webix.ui.model.form.Counter;
import com.webix.ui.model.form.Datepicker;
import com.webix.ui.model.form.Fieldset;
import com.webix.ui.model.form.Icon;
import com.webix.ui.model.form.Label;
import com.webix.ui.model.form.Multiselect;
import com.webix.ui.model.form.Multitext;
import com.webix.ui.model.form.Radio;
import com.webix.ui.model.form.Richselect;
import com.webix.ui.model.form.Search;
import com.webix.ui.model.form.Segmented;
import com.webix.ui.model.form.Select;
import com.webix.ui.model.form.Slider;
import com.webix.ui.model.form.Tabbar;
import com.webix.ui.model.form.Text;
import com.webix.ui.model.form.Textarea;
import com.webix.ui.model.form.Toggle;
import com.webix.ui.model.html.Htmlform;
import com.webix.ui.model.html.Iframe;
import com.webix.ui.model.html.Scrollview;
import com.webix.ui.model.html.Template;
import com.webix.ui.model.layouts.Accordion;
import com.webix.ui.model.layouts.Accordionitem;
import com.webix.ui.model.layouts.Carousel;
import com.webix.ui.model.layouts.Form;
import com.webix.ui.model.layouts.Headerlayout;
import com.webix.ui.model.layouts.Layout;
import com.webix.ui.model.layouts.Multiview;
import com.webix.ui.model.layouts.Tabview;
import com.webix.ui.model.layouts.Toolbar;

/**
 * A tool for creating various charts.The library supports the most
 * common chart types:line, spline, area, bar, pie, donut, scatter,
 * radar. You can customize appearance of a chart through colors,
 * tooltips, templates, scales, labels. It's possible to present
 * multiple data sets on the same chart. Check chart documentation
 * for more detailed description.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class Chart
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Defines the opacity of chart items.
     */
    private Byte alpha;

    /**
     * Defines or disables view change animation.
     */
    private Byte animate;

    /**
     * The width of bars.
     */
    private Byte barWidth;

    /**
     * Enables/disables the bar borders.
     */
    private Byte border;

    /**
     * Sets the border color of each item in the graph.
     */
    private Byte borderColor;

    /**
     * Used to hide the component borders.
     */
    private Byte borderless;

    /**
     * Defines the slope angle of 3D pie.
     */
    private Byte cant;

    /**
     * Defines items colors.
     */
    private Byte color;

    /**
     * An html container (or its id) where the component needs
     * initializing.
     */
    private Byte container;

    /**
     * The name of a css class that will be applied to the view
     * container.
     */
    private Byte css;

    /**
     * An inline dataset that data to the component will be load
     * from.
     */
    private Byte data;

    /**
     * The url to the data source that the component will use to
     * reload data from.
     */
    private Byte dataFeed;

    /**
     * Sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     */
    private Byte datathrottle;

    /**
     * The type of loaded data.
     */
    private Byte datatype;

    /**
     * Disapbles graph lines with radar chart.
     */
    private Byte disableLines;

    /**
     * Disables item.
     */
    private Byte disabled;

    /**
     * Sets the radius (in pixels) of the virtual circle which
     * events will fire for items within.
     */
    private Byte eventRadius;

    /**
     * Fills the chart area with the specified background color.
     */
    private Byte fill;

    /**
     * Chart max limit mode.
     */
    private Byte fixOverflow;

    /**
     * Specifies the chart gradient.
     */
    private Byte gradient;

    /**
     * Sets the view gravity (1 by default).
     */
    private Byte gravity;

    /**
     * Sets the height of the component.
     */
    private Byte height;

    /**
     * Defines whether the view will be hidden initially.
     */
    private Byte hidden;

    /**
     * The component ID.
     */
    private Byte id;

    /**
     * Defines markers that present chart's data items.
     */
    private Byte item;

    /**
     * Sets the template for items' labels.
     */
    private Byte label;

    /**
     * The offset of sector labels from the pie frame.
     */
    private Byte labelOffset;

    /**
     * Defines the chart legend.
     */
    private Byte legend;

    /**
     * Defines chart lines.
     */
    private Byte line;

    /**
     * Sets the color for strips dividing the pie sectors.
     */
    private Byte lineColor;

    /**
     * Sets the maximum height for the view.
     */
    private Byte maxHeight;

    /**
     * Sets the maximum width for the view.
     */
    private Byte maxWidth;

    /**
     * Sets the minimal height for the view.
     */
    private Byte minHeight;

    /**
     * Sets the minimal width for the view.
     */
    private Byte minWidth;

    /**
     * The delay between a real mouse action and invoking the
     * related events.
     */
    private Byte mouseEventDelay;

    /**
     * Defines whether the first item of the scale will be drawn
     * with the offset equal to the half of the scale's step
     * (relative to the origin of the chart) or not.
     */
    private Byte offset;

    /**
     * Allows attaching custom handlers to inner events of the
     * component.
     */
    private Byte on;

    /**
     * Attaches a click behavior for component items with the
     * specified CSS class.
     */
    private Byte onClick;

    /**
     * A property used to define custom context-click (right click)
     * handlers for elements in the DataTable cells
     * .
     */
    private Byte onContext;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private Byte onDblClick;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private Byte onMouseMove;

    /**
     * Sets the scale origin.
     */
    private Byte origin;

    /**
     * Sets paddings of the chart content.
     */
    private Byte padding;

    /**
     * The height of the 3d pie.
     */
    private Byte pieHeight;

    /**
     * Sets the template for the pie inner labels.
     */
    private Byte pieInnerText;

    /**
     * Applies the predefined chart configuration object with the
     * specified name.
     */
    private Byte preset;

    /**
     * The radius of the bar's rounding.
     */
    private Byte radius;

    /**
     * A handler that is called just after the page has been
     * completely parsed.
     */
    private Byte ready;

    /**
     * Defines how to treat items in case of reloading.
     */
    private Byte removeMissed;

    /**
     * Defines urls for datasaving.
     */
    private Byte save;

    /**
     * Type of chart scale, logarithic or plain.
     */
    private Byte scale;

    /**
     * Defines schemes for data processing.
     */
    private Byte scheme;

    /**
     * Defines graphs presented on the chart.
     */
    private Byte series;

    /**
     * Enables/disables the pie shadow.
     */
    private Byte shadow;

    /**
     * Sets a popup message appearing on pointing a mouse cursor
     * over the dedicated item.
     */
    private Byte tooltip;

    /**
     * Sets the chart type.
     */
    private Byte type;

    /**
     * The url of a data feed which will be loaded after component
     * initialization.
     */
    private Byte url;

    /**
     * Defines values for the vertical axis.
     */
    private Byte value;

    /**
     * Sets the width of the component.
     */
    private Byte width;

    /**
     * The horizontal position of the pie center.
     */
    private Byte x;

    /**
     * Defines the horizontal axis.
     */
    private Byte xAxis;

    /**
     * A property of the dataset that defines values for the
     * horizontal axis.
     */
    private Byte xValue;

    /**
     * The vertical position of the pie center.
     */
    private Byte y;

    /**
     * Defines the vertical axis.
     */
    private Byte yAxis;

    /**
     * A property of the dataset that defines values for the
     * vertical axis.
     */
    private Byte yValue;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Get defines the opacity of chart items.
     * 
     * @return Byte
     */
    public Byte getAlpha()
    {
        return this.alpha;
    } //-- Byte getAlpha()

    /**
     * Get defines or disables view change animation.
     * 
     * @return Byte
     */
    public Byte getAnimate()
    {
        return this.animate;
    } //-- Byte getAnimate()

    /**
     * Get the width of bars.
     * 
     * @return Byte
     */
    public Byte getBarWidth()
    {
        return this.barWidth;
    } //-- Byte getBarWidth()

    /**
     * Get enables/disables the bar borders.
     * 
     * @return Byte
     */
    public Byte getBorder()
    {
        return this.border;
    } //-- Byte getBorder()

    /**
     * Get sets the border color of each item in the graph.
     * 
     * @return Byte
     */
    public Byte getBorderColor()
    {
        return this.borderColor;
    } //-- Byte getBorderColor()

    /**
     * Get used to hide the component borders.
     * 
     * @return Byte
     */
    public Byte getBorderless()
    {
        return this.borderless;
    } //-- Byte getBorderless()

    /**
     * Get defines the slope angle of 3D pie.
     * 
     * @return Byte
     */
    public Byte getCant()
    {
        return this.cant;
    } //-- Byte getCant()

    /**
     * Get defines items colors.
     * 
     * @return Byte
     */
    public Byte getColor()
    {
        return this.color;
    } //-- Byte getColor()

    /**
     * Get an html container (or its id) where the component needs
     * initializing.
     * 
     * @return Byte
     */
    public Byte getContainer()
    {
        return this.container;
    } //-- Byte getContainer()

    /**
     * Get the name of a css class that will be applied to the view
     * container.
     * 
     * @return Byte
     */
    public Byte getCss()
    {
        return this.css;
    } //-- Byte getCss()

    /**
     * Get an inline dataset that data to the component will be
     * load from.
     * 
     * @return Byte
     */
    public Byte getData()
    {
        return this.data;
    } //-- Byte getData()

    /**
     * Get the url to the data source that the component will use
     * to reload data from.
     * 
     * @return Byte
     */
    public Byte getDataFeed()
    {
        return this.dataFeed;
    } //-- Byte getDataFeed()

    /**
     * Get sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     * 
     * @return Byte
     */
    public Byte getDatathrottle()
    {
        return this.datathrottle;
    } //-- Byte getDatathrottle()

    /**
     * Get the type of loaded data.
     * 
     * @return Byte
     */
    public Byte getDatatype()
    {
        return this.datatype;
    } //-- Byte getDatatype()

    /**
     * Get disapbles graph lines with radar chart.
     * 
     * @return Byte
     */
    public Byte getDisableLines()
    {
        return this.disableLines;
    } //-- Byte getDisableLines()

    /**
     * Get disables item.
     * 
     * @return Byte
     */
    public Byte getDisabled()
    {
        return this.disabled;
    } //-- Byte getDisabled()

    /**
     * Get sets the radius (in pixels) of the virtual circle which
     * events will fire for items within.
     * 
     * @return Byte
     */
    public Byte getEventRadius()
    {
        return this.eventRadius;
    } //-- Byte getEventRadius()

    /**
     * Get fills the chart area with the specified background
     * color.
     * 
     * @return Byte
     */
    public Byte getFill()
    {
        return this.fill;
    } //-- Byte getFill()

    /**
     * Get chart max limit mode.
     * 
     * @return Byte
     */
    public Byte getFixOverflow()
    {
        return this.fixOverflow;
    } //-- Byte getFixOverflow()

    /**
     * Get specifies the chart gradient.
     * 
     * @return Byte
     */
    public Byte getGradient()
    {
        return this.gradient;
    } //-- Byte getGradient()

    /**
     * Get sets the view gravity (1 by default).
     * 
     * @return Byte
     */
    public Byte getGravity()
    {
        return this.gravity;
    } //-- Byte getGravity()

    /**
     * Get sets the height of the component.
     * 
     * @return Byte
     */
    public Byte getHeight()
    {
        return this.height;
    } //-- Byte getHeight()

    /**
     * Get defines whether the view will be hidden initially.
     * 
     * @return Byte
     */
    public Byte getHidden()
    {
        return this.hidden;
    } //-- Byte getHidden()

    /**
     * Get the component ID.
     * 
     * @return Byte
     */
    public Byte getId()
    {
        return this.id;
    } //-- Byte getId()

    /**
     * Get defines markers that present chart's data items.
     * 
     * @return Byte
     */
    public Byte getItem()
    {
        return this.item;
    } //-- Byte getItem()

    /**
     * Get sets the template for items' labels.
     * 
     * @return Byte
     */
    public Byte getLabel()
    {
        return this.label;
    } //-- Byte getLabel()

    /**
     * Get the offset of sector labels from the pie frame.
     * 
     * @return Byte
     */
    public Byte getLabelOffset()
    {
        return this.labelOffset;
    } //-- Byte getLabelOffset()

    /**
     * Get defines the chart legend.
     * 
     * @return Byte
     */
    public Byte getLegend()
    {
        return this.legend;
    } //-- Byte getLegend()

    /**
     * Get defines chart lines.
     * 
     * @return Byte
     */
    public Byte getLine()
    {
        return this.line;
    } //-- Byte getLine()

    /**
     * Get sets the color for strips dividing the pie sectors.
     * 
     * @return Byte
     */
    public Byte getLineColor()
    {
        return this.lineColor;
    } //-- Byte getLineColor()

    /**
     * Get sets the maximum height for the view.
     * 
     * @return Byte
     */
    public Byte getMaxHeight()
    {
        return this.maxHeight;
    } //-- Byte getMaxHeight()

    /**
     * Get sets the maximum width for the view.
     * 
     * @return Byte
     */
    public Byte getMaxWidth()
    {
        return this.maxWidth;
    } //-- Byte getMaxWidth()

    /**
     * Get sets the minimal height for the view.
     * 
     * @return Byte
     */
    public Byte getMinHeight()
    {
        return this.minHeight;
    } //-- Byte getMinHeight()

    /**
     * Get sets the minimal width for the view.
     * 
     * @return Byte
     */
    public Byte getMinWidth()
    {
        return this.minWidth;
    } //-- Byte getMinWidth()

    /**
     * Get the delay between a real mouse action and invoking the
     * related events.
     * 
     * @return Byte
     */
    public Byte getMouseEventDelay()
    {
        return this.mouseEventDelay;
    } //-- Byte getMouseEventDelay()

    /**
     * Get defines whether the first item of the scale will be
     * drawn with the offset equal to the half of the scale's step
     * (relative to the origin of the chart) or not.
     * 
     * @return Byte
     */
    public Byte getOffset()
    {
        return this.offset;
    } //-- Byte getOffset()

    /**
     * Get allows attaching custom handlers to inner events of the
     * component.
     * 
     * @return Byte
     */
    public Byte getOn()
    {
        return this.on;
    } //-- Byte getOn()

    /**
     * Get attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnClick()
    {
        return this.onClick;
    } //-- Byte getOnClick()

    /**
     * Get a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @return Byte
     */
    public Byte getOnContext()
    {
        return this.onContext;
    } //-- Byte getOnContext()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnDblClick()
    {
        return this.onDblClick;
    } //-- Byte getOnDblClick()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnMouseMove()
    {
        return this.onMouseMove;
    } //-- Byte getOnMouseMove()

    /**
     * Get sets the scale origin.
     * 
     * @return Byte
     */
    public Byte getOrigin()
    {
        return this.origin;
    } //-- Byte getOrigin()

    /**
     * Get sets paddings of the chart content.
     * 
     * @return Byte
     */
    public Byte getPadding()
    {
        return this.padding;
    } //-- Byte getPadding()

    /**
     * Get the height of the 3d pie.
     * 
     * @return Byte
     */
    public Byte getPieHeight()
    {
        return this.pieHeight;
    } //-- Byte getPieHeight()

    /**
     * Get sets the template for the pie inner labels.
     * 
     * @return Byte
     */
    public Byte getPieInnerText()
    {
        return this.pieInnerText;
    } //-- Byte getPieInnerText()

    /**
     * Get applies the predefined chart configuration object with
     * the specified name.
     * 
     * @return Byte
     */
    public Byte getPreset()
    {
        return this.preset;
    } //-- Byte getPreset()

    /**
     * Get the radius of the bar's rounding.
     * 
     * @return Byte
     */
    public Byte getRadius()
    {
        return this.radius;
    } //-- Byte getRadius()

    /**
     * Get a handler that is called just after the page has been
     * completely parsed.
     * 
     * @return Byte
     */
    public Byte getReady()
    {
        return this.ready;
    } //-- Byte getReady()

    /**
     * Get defines how to treat items in case of reloading.
     * 
     * @return Byte
     */
    public Byte getRemoveMissed()
    {
        return this.removeMissed;
    } //-- Byte getRemoveMissed()

    /**
     * Get defines urls for datasaving.
     * 
     * @return Byte
     */
    public Byte getSave()
    {
        return this.save;
    } //-- Byte getSave()

    /**
     * Get type of chart scale, logarithic or plain.
     * 
     * @return Byte
     */
    public Byte getScale()
    {
        return this.scale;
    } //-- Byte getScale()

    /**
     * Get defines schemes for data processing.
     * 
     * @return Byte
     */
    public Byte getScheme()
    {
        return this.scheme;
    } //-- Byte getScheme()

    /**
     * Get defines graphs presented on the chart.
     * 
     * @return Byte
     */
    public Byte getSeries()
    {
        return this.series;
    } //-- Byte getSeries()

    /**
     * Get enables/disables the pie shadow.
     * 
     * @return Byte
     */
    public Byte getShadow()
    {
        return this.shadow;
    } //-- Byte getShadow()

    /**
     * Get sets a popup message appearing on pointing a mouse
     * cursor over the dedicated item.
     * 
     * @return Byte
     */
    public Byte getTooltip()
    {
        return this.tooltip;
    } //-- Byte getTooltip()

    /**
     * Get sets the chart type.
     * 
     * @return Byte
     */
    public Byte getType()
    {
        return this.type;
    } //-- Byte getType()

    /**
     * Get the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @return Byte
     */
    public Byte getUrl()
    {
        return this.url;
    } //-- Byte getUrl()

    /**
     * Get defines values for the vertical axis.
     * 
     * @return Byte
     */
    public Byte getValue()
    {
        return this.value;
    } //-- Byte getValue()

    /**
     * Get sets the width of the component.
     * 
     * @return Byte
     */
    public Byte getWidth()
    {
        return this.width;
    } //-- Byte getWidth()

    /**
     * Get the horizontal position of the pie center.
     * 
     * @return Byte
     */
    public Byte getX()
    {
        return this.x;
    } //-- Byte getX()

    /**
     * Get defines the horizontal axis.
     * 
     * @return Byte
     */
    public Byte getXAxis()
    {
        return this.xAxis;
    } //-- Byte getXAxis()

    /**
     * Get a property of the dataset that defines values for the
     * horizontal axis.
     * 
     * @return Byte
     */
    public Byte getXValue()
    {
        return this.xValue;
    } //-- Byte getXValue()

    /**
     * Get the vertical position of the pie center.
     * 
     * @return Byte
     */
    public Byte getY()
    {
        return this.y;
    } //-- Byte getY()

    /**
     * Get defines the vertical axis.
     * 
     * @return Byte
     */
    public Byte getYAxis()
    {
        return this.yAxis;
    } //-- Byte getYAxis()

    /**
     * Get a property of the dataset that defines values for the
     * vertical axis.
     * 
     * @return Byte
     */
    public Byte getYValue()
    {
        return this.yValue;
    } //-- Byte getYValue()

    /**
     * Set defines the opacity of chart items.
     * 
     * @param alpha
     */
    public void setAlpha( Byte alpha )
    {
        this.alpha = alpha;
    } //-- void setAlpha( Byte )

    /**
     * Set defines or disables view change animation.
     * 
     * @param animate
     */
    public void setAnimate( Byte animate )
    {
        this.animate = animate;
    } //-- void setAnimate( Byte )

    /**
     * Set the width of bars.
     * 
     * @param barWidth
     */
    public void setBarWidth( Byte barWidth )
    {
        this.barWidth = barWidth;
    } //-- void setBarWidth( Byte )

    /**
     * Set enables/disables the bar borders.
     * 
     * @param border
     */
    public void setBorder( Byte border )
    {
        this.border = border;
    } //-- void setBorder( Byte )

    /**
     * Set sets the border color of each item in the graph.
     * 
     * @param borderColor
     */
    public void setBorderColor( Byte borderColor )
    {
        this.borderColor = borderColor;
    } //-- void setBorderColor( Byte )

    /**
     * Set used to hide the component borders.
     * 
     * @param borderless
     */
    public void setBorderless( Byte borderless )
    {
        this.borderless = borderless;
    } //-- void setBorderless( Byte )

    /**
     * Set defines the slope angle of 3D pie.
     * 
     * @param cant
     */
    public void setCant( Byte cant )
    {
        this.cant = cant;
    } //-- void setCant( Byte )

    /**
     * Set defines items colors.
     * 
     * @param color
     */
    public void setColor( Byte color )
    {
        this.color = color;
    } //-- void setColor( Byte )

    /**
     * Set an html container (or its id) where the component needs
     * initializing.
     * 
     * @param container
     */
    public void setContainer( Byte container )
    {
        this.container = container;
    } //-- void setContainer( Byte )

    /**
     * Set the name of a css class that will be applied to the view
     * container.
     * 
     * @param css
     */
    public void setCss( Byte css )
    {
        this.css = css;
    } //-- void setCss( Byte )

    /**
     * Set an inline dataset that data to the component will be
     * load from.
     * 
     * @param data
     */
    public void setData( Byte data )
    {
        this.data = data;
    } //-- void setData( Byte )

    /**
     * Set the url to the data source that the component will use
     * to reload data from.
     * 
     * @param dataFeed
     */
    public void setDataFeed( Byte dataFeed )
    {
        this.dataFeed = dataFeed;
    } //-- void setDataFeed( Byte )

    /**
     * Set sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     * 
     * @param datathrottle
     */
    public void setDatathrottle( Byte datathrottle )
    {
        this.datathrottle = datathrottle;
    } //-- void setDatathrottle( Byte )

    /**
     * Set the type of loaded data.
     * 
     * @param datatype
     */
    public void setDatatype( Byte datatype )
    {
        this.datatype = datatype;
    } //-- void setDatatype( Byte )

    /**
     * Set disapbles graph lines with radar chart.
     * 
     * @param disableLines
     */
    public void setDisableLines( Byte disableLines )
    {
        this.disableLines = disableLines;
    } //-- void setDisableLines( Byte )

    /**
     * Set disables item.
     * 
     * @param disabled
     */
    public void setDisabled( Byte disabled )
    {
        this.disabled = disabled;
    } //-- void setDisabled( Byte )

    /**
     * Set sets the radius (in pixels) of the virtual circle which
     * events will fire for items within.
     * 
     * @param eventRadius
     */
    public void setEventRadius( Byte eventRadius )
    {
        this.eventRadius = eventRadius;
    } //-- void setEventRadius( Byte )

    /**
     * Set fills the chart area with the specified background
     * color.
     * 
     * @param fill
     */
    public void setFill( Byte fill )
    {
        this.fill = fill;
    } //-- void setFill( Byte )

    /**
     * Set chart max limit mode.
     * 
     * @param fixOverflow
     */
    public void setFixOverflow( Byte fixOverflow )
    {
        this.fixOverflow = fixOverflow;
    } //-- void setFixOverflow( Byte )

    /**
     * Set specifies the chart gradient.
     * 
     * @param gradient
     */
    public void setGradient( Byte gradient )
    {
        this.gradient = gradient;
    } //-- void setGradient( Byte )

    /**
     * Set sets the view gravity (1 by default).
     * 
     * @param gravity
     */
    public void setGravity( Byte gravity )
    {
        this.gravity = gravity;
    } //-- void setGravity( Byte )

    /**
     * Set sets the height of the component.
     * 
     * @param height
     */
    public void setHeight( Byte height )
    {
        this.height = height;
    } //-- void setHeight( Byte )

    /**
     * Set defines whether the view will be hidden initially.
     * 
     * @param hidden
     */
    public void setHidden( Byte hidden )
    {
        this.hidden = hidden;
    } //-- void setHidden( Byte )

    /**
     * Set the component ID.
     * 
     * @param id
     */
    public void setId( Byte id )
    {
        this.id = id;
    } //-- void setId( Byte )

    /**
     * Set defines markers that present chart's data items.
     * 
     * @param item
     */
    public void setItem( Byte item )
    {
        this.item = item;
    } //-- void setItem( Byte )

    /**
     * Set sets the template for items' labels.
     * 
     * @param label
     */
    public void setLabel( Byte label )
    {
        this.label = label;
    } //-- void setLabel( Byte )

    /**
     * Set the offset of sector labels from the pie frame.
     * 
     * @param labelOffset
     */
    public void setLabelOffset( Byte labelOffset )
    {
        this.labelOffset = labelOffset;
    } //-- void setLabelOffset( Byte )

    /**
     * Set defines the chart legend.
     * 
     * @param legend
     */
    public void setLegend( Byte legend )
    {
        this.legend = legend;
    } //-- void setLegend( Byte )

    /**
     * Set defines chart lines.
     * 
     * @param line
     */
    public void setLine( Byte line )
    {
        this.line = line;
    } //-- void setLine( Byte )

    /**
     * Set sets the color for strips dividing the pie sectors.
     * 
     * @param lineColor
     */
    public void setLineColor( Byte lineColor )
    {
        this.lineColor = lineColor;
    } //-- void setLineColor( Byte )

    /**
     * Set sets the maximum height for the view.
     * 
     * @param maxHeight
     */
    public void setMaxHeight( Byte maxHeight )
    {
        this.maxHeight = maxHeight;
    } //-- void setMaxHeight( Byte )

    /**
     * Set sets the maximum width for the view.
     * 
     * @param maxWidth
     */
    public void setMaxWidth( Byte maxWidth )
    {
        this.maxWidth = maxWidth;
    } //-- void setMaxWidth( Byte )

    /**
     * Set sets the minimal height for the view.
     * 
     * @param minHeight
     */
    public void setMinHeight( Byte minHeight )
    {
        this.minHeight = minHeight;
    } //-- void setMinHeight( Byte )

    /**
     * Set sets the minimal width for the view.
     * 
     * @param minWidth
     */
    public void setMinWidth( Byte minWidth )
    {
        this.minWidth = minWidth;
    } //-- void setMinWidth( Byte )

    /**
     * Set the delay between a real mouse action and invoking the
     * related events.
     * 
     * @param mouseEventDelay
     */
    public void setMouseEventDelay( Byte mouseEventDelay )
    {
        this.mouseEventDelay = mouseEventDelay;
    } //-- void setMouseEventDelay( Byte )

    /**
     * Set defines whether the first item of the scale will be
     * drawn with the offset equal to the half of the scale's step
     * (relative to the origin of the chart) or not.
     * 
     * @param offset
     */
    public void setOffset( Byte offset )
    {
        this.offset = offset;
    } //-- void setOffset( Byte )

    /**
     * Set allows attaching custom handlers to inner events of the
     * component.
     * 
     * @param on
     */
    public void setOn( Byte on )
    {
        this.on = on;
    } //-- void setOn( Byte )

    /**
     * Set attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @param onClick
     */
    public void setOnClick( Byte onClick )
    {
        this.onClick = onClick;
    } //-- void setOnClick( Byte )

    /**
     * Set a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @param onContext
     */
    public void setOnContext( Byte onContext )
    {
        this.onContext = onContext;
    } //-- void setOnContext( Byte )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onDblClick
     */
    public void setOnDblClick( Byte onDblClick )
    {
        this.onDblClick = onDblClick;
    } //-- void setOnDblClick( Byte )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onMouseMove
     */
    public void setOnMouseMove( Byte onMouseMove )
    {
        this.onMouseMove = onMouseMove;
    } //-- void setOnMouseMove( Byte )

    /**
     * Set sets the scale origin.
     * 
     * @param origin
     */
    public void setOrigin( Byte origin )
    {
        this.origin = origin;
    } //-- void setOrigin( Byte )

    /**
     * Set sets paddings of the chart content.
     * 
     * @param padding
     */
    public void setPadding( Byte padding )
    {
        this.padding = padding;
    } //-- void setPadding( Byte )

    /**
     * Set the height of the 3d pie.
     * 
     * @param pieHeight
     */
    public void setPieHeight( Byte pieHeight )
    {
        this.pieHeight = pieHeight;
    } //-- void setPieHeight( Byte )

    /**
     * Set sets the template for the pie inner labels.
     * 
     * @param pieInnerText
     */
    public void setPieInnerText( Byte pieInnerText )
    {
        this.pieInnerText = pieInnerText;
    } //-- void setPieInnerText( Byte )

    /**
     * Set applies the predefined chart configuration object with
     * the specified name.
     * 
     * @param preset
     */
    public void setPreset( Byte preset )
    {
        this.preset = preset;
    } //-- void setPreset( Byte )

    /**
     * Set the radius of the bar's rounding.
     * 
     * @param radius
     */
    public void setRadius( Byte radius )
    {
        this.radius = radius;
    } //-- void setRadius( Byte )

    /**
     * Set a handler that is called just after the page has been
     * completely parsed.
     * 
     * @param ready
     */
    public void setReady( Byte ready )
    {
        this.ready = ready;
    } //-- void setReady( Byte )

    /**
     * Set defines how to treat items in case of reloading.
     * 
     * @param removeMissed
     */
    public void setRemoveMissed( Byte removeMissed )
    {
        this.removeMissed = removeMissed;
    } //-- void setRemoveMissed( Byte )

    /**
     * Set defines urls for datasaving.
     * 
     * @param save
     */
    public void setSave( Byte save )
    {
        this.save = save;
    } //-- void setSave( Byte )

    /**
     * Set type of chart scale, logarithic or plain.
     * 
     * @param scale
     */
    public void setScale( Byte scale )
    {
        this.scale = scale;
    } //-- void setScale( Byte )

    /**
     * Set defines schemes for data processing.
     * 
     * @param scheme
     */
    public void setScheme( Byte scheme )
    {
        this.scheme = scheme;
    } //-- void setScheme( Byte )

    /**
     * Set defines graphs presented on the chart.
     * 
     * @param series
     */
    public void setSeries( Byte series )
    {
        this.series = series;
    } //-- void setSeries( Byte )

    /**
     * Set enables/disables the pie shadow.
     * 
     * @param shadow
     */
    public void setShadow( Byte shadow )
    {
        this.shadow = shadow;
    } //-- void setShadow( Byte )

    /**
     * Set sets a popup message appearing on pointing a mouse
     * cursor over the dedicated item.
     * 
     * @param tooltip
     */
    public void setTooltip( Byte tooltip )
    {
        this.tooltip = tooltip;
    } //-- void setTooltip( Byte )

    /**
     * Set sets the chart type.
     * 
     * @param type
     */
    public void setType( Byte type )
    {
        this.type = type;
    } //-- void setType( Byte )

    /**
     * Set the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @param url
     */
    public void setUrl( Byte url )
    {
        this.url = url;
    } //-- void setUrl( Byte )

    /**
     * Set defines values for the vertical axis.
     * 
     * @param value
     */
    public void setValue( Byte value )
    {
        this.value = value;
    } //-- void setValue( Byte )

    /**
     * Set sets the width of the component.
     * 
     * @param width
     */
    public void setWidth( Byte width )
    {
        this.width = width;
    } //-- void setWidth( Byte )

    /**
     * Set the horizontal position of the pie center.
     * 
     * @param x
     */
    public void setX( Byte x )
    {
        this.x = x;
    } //-- void setX( Byte )

    /**
     * Set defines the horizontal axis.
     * 
     * @param xAxis
     */
    public void setXAxis( Byte xAxis )
    {
        this.xAxis = xAxis;
    } //-- void setXAxis( Byte )

    /**
     * Set a property of the dataset that defines values for the
     * horizontal axis.
     * 
     * @param xValue
     */
    public void setXValue( Byte xValue )
    {
        this.xValue = xValue;
    } //-- void setXValue( Byte )

    /**
     * Set the vertical position of the pie center.
     * 
     * @param y
     */
    public void setY( Byte y )
    {
        this.y = y;
    } //-- void setY( Byte )

    /**
     * Set defines the vertical axis.
     * 
     * @param yAxis
     */
    public void setYAxis( Byte yAxis )
    {
        this.yAxis = yAxis;
    } //-- void setYAxis( Byte )

    /**
     * Set a property of the dataset that defines values for the
     * vertical axis.
     * 
     * @param yValue
     */
    public void setYValue( Byte yValue )
    {
        this.yValue = yValue;
    } //-- void setYValue( Byte )

    /**
     * Adds an item to the store
     */
    public Byte add() {
        return null;
    }
    /**
     * Adds an additional graph to the chart
     */
    public void addSeries() {
        return;
    }
    /**
     * Adjusts the component to the size of the parent HTML container
     */
    public void adjust() {
        return;
    }
    /**
     * Attaches the handler to an inner event of the component (allows behaviour customizations)
     */
    public Byte attachEvent() {
        return null;
    }
    /**
     * Binds components
     */
    public void bind() {
        return;
    }
    /**
     * Temporarily blocks triggering of ALL events of the calling object
     */
    public void blockEvent() {
        return;
    }
    /**
     * Calls an inner event
     */
    public Boolean callEvent() {
        return null;
    }
    /**
     * Removes all items from the component
     */
    public void clearAll() {
        return;
    }
    /**
     * Clears the component canvas
     */
    public void clearCanvas() {
        return;
    }
    /**
     * Returns the count of items in the table
     */
    public Integer count() {
        return null;
    }
    /**
     * Redefines a single configuration property (or a hash of properties)
     */
    public void define() {
        return;
    }
    /**
     * Destructs the calling object
     */
    public void destructor() {
        return;
    }
    /**
     * Detaches a handler from an event (which was attached before by the attachEvent method)
     */
    public void detachEvent() {
        return;
    }
    /**
     * Disables the calling view (makes it dimmed and unclickable)
     */
    public void disable() {
        return;
    }
    /**
     * Enables the calling view that was disabled by the 'disable' method
     */
    public void enable() {
        return;
    }
    /**
     * Checks whether an item with the specified id exists
     */
    public Boolean exists() {
        return null;
    }
    /**
     * Filters the component
     */
    public void filter() {
        return;
    }
    /**
     * Returns child views of the calling component
     */
    public Byte getChildViews() {
        return null;
    }
    /**
     * Returns the ID of the first item
     */
    public Byte getFirstId() {
        return null;
    }
    /**
     * Returns master form for the input
     */
    public Byte getFormView() {
        return null;
    }
    /**
     * Returns the id of the item with the specified index
     */
    public Byte getIdByIndex() {
        return null;
    }
    /**
     * Returns the index of the item with the specified id
     */
    public Integer getIndexById() {
        return null;
    }
    /**
     * Returns the id of the last item
     */
    public Byte getLastId() {
        return null;
    }
    /**
     * Returns the ID of an item which is positioned the specified step after the specified item
     */
    public Byte getNextId() {
        return null;
    }
    /**
     * Returns the main HTML container for the calling object
     */
    public Byte getNode() {
        return null;
    }
    /**
     * Returns the parent view of the component
     */
    public Byte getParentView() {
        return null;
    }
    /**
     * Returns the ID of an item which is positioned the specified step before the specified item
     */
    public Byte getPrevId() {
        return null;
    }
    /**
     * Returns top parent view
     */
    public Byte getTopParentView() {
        return null;
    }
    /**
     * Groups data by the specified data property
     */
    public void group() {
        return;
    }
    /**
     * Checks whether the component has the specified event
     */
    public Boolean hasEvent() {
        return null;
    }
    /**
     * Hides the view
     */
    public void hide() {
        return;
    }
    /**
     * Hides the chosen graph in the chart with several graphs
     */
    public void hideSeries() {
        return;
    }
    /**
     * Checks whether the view is enabled
     */
    public Boolean isEnabled() {
        return null;
    }
    /**
     * Checks whether the view is visible
     */
    public Boolean isVisible() {
        return null;
    }
    /**
     * Loads data from an external data source
     */
    public Byte load() {
        return null;
    }
    /**
     * Sends a request to load the specified number of records to the end or to the specified position
     */
    public void loadNext() {
        return;
    }
    /**
     * Gets the id of an item from the specified HTML event
     */
    public Byte locate() {
        return null;
    }
    /**
     * Routes events from one object to another
     */
    public void mapEvent() {
        return;
    }
    /**
     * Loads data to the component from an inline data source
     */
    public void parse() {
        return;
    }
    /**
     * Repaints the whole view or a certain item
     */
    public void refresh() {
        return;
    }
    /**
     * Removes the specified item from datastore
     */
    public void remove() {
        return;
    }
    /**
     * Removes all series from the chart
     */
    public void removeAllSeries() {
        return;
    }
    /**
     * Renders the specified item or the whole component
     */
    public void render() {
        return;
    }
    /**
     * Adjusts the view to a new size
     */
    public void resize() {
        return;
    }
    /**
     * Serializes data to a json object
     */
    public Byte serialize() {
        return null;
    }
    /**
     * Makes the component visible
     */
    public void show() {
        return;
    }
    /**
     * Shows the hidden graph in the chart
     */
    public void showSeries() {
        return;
    }
    /**
     * Sorts datastore
     */
    public void sort() {
        return;
    }
    /**
     * Allows you to sync two copy of data (all or just a part of it) from one DataCollection to another
     */
    public void sync() {
        return;
    }
    /**
     * Breaks "bind" link
     */
    public void unbind() {
        return;
    }
    /**
     * Cancels blocking events that was enabled by the 'blockEvent' command
     */
    public void unblockEvent() {
        return;
    }
    /**
     * Ungroups data
     */
    public void ungroup() {
        return;
    }
    /**
     * Sets properties of the data item
     */
    public void updateItem() {
        return;
    }
}
