// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.7,
// any modifications will be overwritten.
// ==============================================================

package com.webix.ui.model.data;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import com.webix.ui.model.auxiliary.Calendar;
import com.webix.ui.model.auxiliary.Colorboard;
import com.webix.ui.model.auxiliary.Pager;
import com.webix.ui.model.auxiliary.Resizer;
import com.webix.ui.model.auxiliary.Spacer;
import com.webix.ui.model.auxiliary.Tooltip;
import com.webix.ui.model.auxiliary.Video;
import com.webix.ui.model.context.Context;
import com.webix.ui.model.context.Contextmenu;
import com.webix.ui.model.context.Datasuggest;
import com.webix.ui.model.context.Gridsuggest;
import com.webix.ui.model.context.Menu;
import com.webix.ui.model.context.Popup;
import com.webix.ui.model.context.Submenu;
import com.webix.ui.model.context.Suggest;
import com.webix.ui.model.context.Window;
import com.webix.ui.model.form.Button;
import com.webix.ui.model.form.Checkbox;
import com.webix.ui.model.form.Colorpicker;
import com.webix.ui.model.form.Combo;
import com.webix.ui.model.form.Counter;
import com.webix.ui.model.form.Datepicker;
import com.webix.ui.model.form.Fieldset;
import com.webix.ui.model.form.Icon;
import com.webix.ui.model.form.Label;
import com.webix.ui.model.form.Multiselect;
import com.webix.ui.model.form.Multitext;
import com.webix.ui.model.form.Radio;
import com.webix.ui.model.form.Richselect;
import com.webix.ui.model.form.Search;
import com.webix.ui.model.form.Segmented;
import com.webix.ui.model.form.Select;
import com.webix.ui.model.form.Slider;
import com.webix.ui.model.form.Tabbar;
import com.webix.ui.model.form.Text;
import com.webix.ui.model.form.Textarea;
import com.webix.ui.model.form.Toggle;
import com.webix.ui.model.html.Htmlform;
import com.webix.ui.model.html.Iframe;
import com.webix.ui.model.html.Scrollview;
import com.webix.ui.model.html.Template;
import com.webix.ui.model.layouts.Accordion;
import com.webix.ui.model.layouts.Accordionitem;
import com.webix.ui.model.layouts.Carousel;
import com.webix.ui.model.layouts.Form;
import com.webix.ui.model.layouts.Headerlayout;
import com.webix.ui.model.layouts.Layout;
import com.webix.ui.model.layouts.Multiview;
import com.webix.ui.model.layouts.Tabview;
import com.webix.ui.model.layouts.Toolbar;

/**
 * An editable table that can easily display huge data sets.The
 * component is full of various possibilities: filtering, sorting,
 * pagination, editing, nadigation, drag-and-drop,
 * internatialization, export to PDF, Excel etc. It also provides
 * the dynamic mode for fast handling thousands of records. Check
 * datatable documentation for more detailed description.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class Datatable
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Defines or disables view change animation.
     */
    private Byte animate;

    /**
     * Datatable adjust configuration to the data.
     */
    private Byte autoConfig;

    /**
     * Adjusts DataTable to the parent container size vertically.
     */
    private Byte autoheight;

    /**
     * Adjusts DataTable to the parent container size horizontally.
     */
    private Byte autowidth;

    /**
     * Enables/disables block selection.
     */
    private Byte blockselect;

    /**
     * Used to hide the component borders.
     */
    private Byte borderless;

    /**
     * Controls behavior of checkbox editors in grid.
     */
    private Byte checkboxRefresh;

    /**
     * Enables/disables clipboard support.
     */
    private Byte clipboard;

    /**
     * Defines the default width for columns (in pixels).
     */
    private Byte columnWidth;

    /**
     * Configures columns of the table.
     */
    private Byte columns;

    /**
     * An html container (or its id) where the component needs
     * initializing.
     */
    private Byte container;

    /**
     * The name of a css class that will be applied to the view
     * container.
     */
    private Byte css;

    /**
     * An inline dataset that data to the component will be load
     * from.
     */
    private Byte data;

    /**
     * The url to the data source that the component will use to
     * reload data from.
     */
    private Byte dataFeed;

    /**
     * Defines the start position DataTable will load data from.
     */
    private Byte datafetch;

    /**
     * Sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     */
    private Byte datathrottle;

    /**
     * The type of loaded data.
     */
    private Byte datatype;

    /**
     * Sets CSV delimiters for clipboard operations.
     */
    private Byte delimiter;

    /**
     * Disables item.
     */
    private Byte disabled;

    /**
     * Enables or disables drag-and-drop.
     */
    private Byte drag;

    /**
     * Enables drag-and-drop support for columns.
     */
    private Byte dragColumn;

    /**
     * Enables autoscroll of component during drag-n-drop.
     */
    private Byte dragscroll;

    /**
     * Enables formular editing.
     */
    private Byte editMath;

    /**
     * Defines which data item is editable (in case of several data
     * item in the cell/line).
     */
    private Byte editValue;

    /**
     * Allows/denies editing in the table.
     */
    private Byte editable;

    /**
     * Defines the action on which editors will be opened.
     */
    private Byte editaction;

    /**
     * Allows defining custom 'move' logic for the component.
     */
    private Byte externalData;

    /**
     * Defines filtering rules in tree-like components.
     */
    private Byte filterMode;

    /**
     * Defines whether the height should be fixed for all rows or
     * can vary.
     */
    private Byte fixedRowHeight;

    /**
     * Enables/disables the footer in DataTable (disabled, by
     * default).
     */
    private Byte footer;

    /**
     * Linked form.
     */
    private Byte form;

    /**
     * Sets the view gravity (1 by default).
     */
    private Byte gravity;

    /**
     * Enables/disables the header in DataTable (enabled, by
     * default).
     */
    private Byte header;

    /**
     * Sets the heigth of the header row.
     */
    private Byte headerRowHeight;

    /**
     * Adds a headermenu to control column visibility.
     */
    private Byte headermenu;

    /**
     * Sets the height of the component.
     */
    private Byte height;

    /**
     * Defines whether the view will be hidden initially.
     */
    private Byte hidden;

    /**
     * The component ID.
     */
    private Byte id;

    /**
     * The number of the fixed columns from the left side of the
     * table (actual for the split mode ).
     */
    private Byte leftSplit;

    /**
     * Validation during cell editing.
     */
    private Byte liveValidation;

    /**
     * Sets the number of items that will be loaded on each scroll
     * movement relative to the last item in the scrolling direction
     */
    private Byte loadahead;

    /**
     * Enables math formulas in DataTable.
     */
    private Byte math;

    /**
     * Sets the maximum height for the view.
     */
    private Byte maxHeight;

    /**
     * Sets the maximum width for the view.
     */
    private Byte maxWidth;

    /**
     * Sets the minimum height for a row.
     */
    private Byte minColumnHeight;

    /**
     * Sets the minimum width for a column.
     */
    private Byte minColumnWidth;

    /**
     * Sets the minimal height for the view.
     */
    private Byte minHeight;

    /**
     * Sets the minimal width for the view.
     */
    private Byte minWidth;

    /**
     * The delay between a real mouse action and invoking the
     * related events.
     */
    private Byte mouseEventDelay;

    /**
     * Enables the multi selection mode.
     */
    private Byte multiselect;

    /**
     * Activates the selection keyboard navigation.
     */
    private Byte navigation;

    /**
     * Allows attaching custom handlers to inner events of the
     * component.
     */
    private Byte on;

    /**
     * Attaches a click behavior for component items with the
     * specified CSS class.
     */
    private Byte onClick;

    /**
     * A property used to define custom context-click (right click)
     * handlers for elements in the DataTable cells
     * .
     */
    private Byte onContext;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private Byte onDblClick;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private Byte onMouseMove;

    /**
     * Defines paging configuration ( creates a 'ui.pager' object).
     */
    private Byte pager;

    /**
     * Invokes the full rendering of DataTable data.
     */
    private Byte prerender;

    /**
     * A handler that is called just after the page has been
     * completely parsed.
     */
    private Byte ready;

    /**
     * Defines how to treat items in case of reloading.
     */
    private Byte removeMissed;

    /**
     * Enables/disables horizontal resizing of columns.
     */
    private Byte resizeColumn;

    /**
     * Enables/disables vertical resizing of rows.
     */
    private Byte resizeRow;

    /**
     * Sets the number of the fixed columns from the right side of
     * the table (actual for the split mode ).
     */
    private Byte rightSplit;

    /**
     * Sets the default height for rows.
     */
    private Byte rowHeight;

    /**
     * Default line height for grid's row.
     */
    private Byte rowLineHeight;

    /**
     * Set of validation rules for the component.
     */
    private Byte rules;

    /**
     * Defines urls for datasaving.
     */
    private Byte save;

    /**
     * Defines schemes for data processing.
     */
    private Byte scheme;

    /**
     * Enables or disables scroll for the datatable.
     */
    private Byte scroll;

    /**
     * Enables/disables scrolling the table just by whole rows
     * (i.e. you won't be allowed to scroll along the full length
     * of rows).
     */
    private Byte scrollAlignY;

    /**
     * Enables/disables horizontal scrolling.
     */
    private Byte scrollX;

    /**
     * Enables/disables vertical scrolling.
     */
    private Byte scrollY;

    /**
     * Sets the selection mode in DataTable.
     */
    private Byte select;

    /**
     * Array of span configurations for the datatable.
     */
    private Byte spans;

    /**
     * Sets a popup message appearing on pointing a mouse cursor
     * over the dedicated item.
     */
    private Byte tooltip;

    /**
     * Used for configuring presentation of items.
     */
    private Byte type;

    /**
     * The url of a data feed which will be loaded after component
     * initialization.
     */
    private Byte url;

    /**
     * Sets the width of the component.
     */
    private Byte width;

    /**
     * Defines height of datatable in rows.
     */
    private Byte yCount;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Get defines or disables view change animation.
     * 
     * @return Byte
     */
    public Byte getAnimate()
    {
        return this.animate;
    } //-- Byte getAnimate()

    /**
     * Get datatable adjust configuration to the data.
     * 
     * @return Byte
     */
    public Byte getAutoConfig()
    {
        return this.autoConfig;
    } //-- Byte getAutoConfig()

    /**
     * Get adjusts DataTable to the parent container size
     * vertically.
     * 
     * @return Byte
     */
    public Byte getAutoheight()
    {
        return this.autoheight;
    } //-- Byte getAutoheight()

    /**
     * Get adjusts DataTable to the parent container size
     * horizontally.
     * 
     * @return Byte
     */
    public Byte getAutowidth()
    {
        return this.autowidth;
    } //-- Byte getAutowidth()

    /**
     * Get enables/disables block selection.
     * 
     * @return Byte
     */
    public Byte getBlockselect()
    {
        return this.blockselect;
    } //-- Byte getBlockselect()

    /**
     * Get used to hide the component borders.
     * 
     * @return Byte
     */
    public Byte getBorderless()
    {
        return this.borderless;
    } //-- Byte getBorderless()

    /**
     * Get controls behavior of checkbox editors in grid.
     * 
     * @return Byte
     */
    public Byte getCheckboxRefresh()
    {
        return this.checkboxRefresh;
    } //-- Byte getCheckboxRefresh()

    /**
     * Get enables/disables clipboard support.
     * 
     * @return Byte
     */
    public Byte getClipboard()
    {
        return this.clipboard;
    } //-- Byte getClipboard()

    /**
     * Get defines the default width for columns (in pixels).
     * 
     * @return Byte
     */
    public Byte getColumnWidth()
    {
        return this.columnWidth;
    } //-- Byte getColumnWidth()

    /**
     * Get configures columns of the table.
     * 
     * @return Byte
     */
    public Byte getColumns()
    {
        return this.columns;
    } //-- Byte getColumns()

    /**
     * Get an html container (or its id) where the component needs
     * initializing.
     * 
     * @return Byte
     */
    public Byte getContainer()
    {
        return this.container;
    } //-- Byte getContainer()

    /**
     * Get the name of a css class that will be applied to the view
     * container.
     * 
     * @return Byte
     */
    public Byte getCss()
    {
        return this.css;
    } //-- Byte getCss()

    /**
     * Get an inline dataset that data to the component will be
     * load from.
     * 
     * @return Byte
     */
    public Byte getData()
    {
        return this.data;
    } //-- Byte getData()

    /**
     * Get the url to the data source that the component will use
     * to reload data from.
     * 
     * @return Byte
     */
    public Byte getDataFeed()
    {
        return this.dataFeed;
    } //-- Byte getDataFeed()

    /**
     * Get defines the start position DataTable will load data
     * from.
     * 
     * @return Byte
     */
    public Byte getDatafetch()
    {
        return this.datafetch;
    } //-- Byte getDatafetch()

    /**
     * Get sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     * 
     * @return Byte
     */
    public Byte getDatathrottle()
    {
        return this.datathrottle;
    } //-- Byte getDatathrottle()

    /**
     * Get the type of loaded data.
     * 
     * @return Byte
     */
    public Byte getDatatype()
    {
        return this.datatype;
    } //-- Byte getDatatype()

    /**
     * Get sets CSV delimiters for clipboard operations.
     * 
     * @return Byte
     */
    public Byte getDelimiter()
    {
        return this.delimiter;
    } //-- Byte getDelimiter()

    /**
     * Get disables item.
     * 
     * @return Byte
     */
    public Byte getDisabled()
    {
        return this.disabled;
    } //-- Byte getDisabled()

    /**
     * Get enables or disables drag-and-drop.
     * 
     * @return Byte
     */
    public Byte getDrag()
    {
        return this.drag;
    } //-- Byte getDrag()

    /**
     * Get enables drag-and-drop support for columns.
     * 
     * @return Byte
     */
    public Byte getDragColumn()
    {
        return this.dragColumn;
    } //-- Byte getDragColumn()

    /**
     * Get enables autoscroll of component during drag-n-drop.
     * 
     * @return Byte
     */
    public Byte getDragscroll()
    {
        return this.dragscroll;
    } //-- Byte getDragscroll()

    /**
     * Get enables formular editing.
     * 
     * @return Byte
     */
    public Byte getEditMath()
    {
        return this.editMath;
    } //-- Byte getEditMath()

    /**
     * Get defines which data item is editable (in case of several
     * data item in the cell/line).
     * 
     * @return Byte
     */
    public Byte getEditValue()
    {
        return this.editValue;
    } //-- Byte getEditValue()

    /**
     * Get allows/denies editing in the table.
     * 
     * @return Byte
     */
    public Byte getEditable()
    {
        return this.editable;
    } //-- Byte getEditable()

    /**
     * Get defines the action on which editors will be opened.
     * 
     * @return Byte
     */
    public Byte getEditaction()
    {
        return this.editaction;
    } //-- Byte getEditaction()

    /**
     * Get allows defining custom 'move' logic for the component.
     * 
     * @return Byte
     */
    public Byte getExternalData()
    {
        return this.externalData;
    } //-- Byte getExternalData()

    /**
     * Get defines filtering rules in tree-like components.
     * 
     * @return Byte
     */
    public Byte getFilterMode()
    {
        return this.filterMode;
    } //-- Byte getFilterMode()

    /**
     * Get defines whether the height should be fixed for all rows
     * or can vary.
     * 
     * @return Byte
     */
    public Byte getFixedRowHeight()
    {
        return this.fixedRowHeight;
    } //-- Byte getFixedRowHeight()

    /**
     * Get enables/disables the footer in DataTable (disabled, by
     * default).
     * 
     * @return Byte
     */
    public Byte getFooter()
    {
        return this.footer;
    } //-- Byte getFooter()

    /**
     * Get linked form.
     * 
     * @return Byte
     */
    public Byte getForm()
    {
        return this.form;
    } //-- Byte getForm()

    /**
     * Get sets the view gravity (1 by default).
     * 
     * @return Byte
     */
    public Byte getGravity()
    {
        return this.gravity;
    } //-- Byte getGravity()

    /**
     * Get enables/disables the header in DataTable (enabled, by
     * default).
     * 
     * @return Byte
     */
    public Byte getHeader()
    {
        return this.header;
    } //-- Byte getHeader()

    /**
     * Get sets the heigth of the header row.
     * 
     * @return Byte
     */
    public Byte getHeaderRowHeight()
    {
        return this.headerRowHeight;
    } //-- Byte getHeaderRowHeight()

    /**
     * Get adds a headermenu to control column visibility.
     * 
     * @return Byte
     */
    public Byte getHeadermenu()
    {
        return this.headermenu;
    } //-- Byte getHeadermenu()

    /**
     * Get sets the height of the component.
     * 
     * @return Byte
     */
    public Byte getHeight()
    {
        return this.height;
    } //-- Byte getHeight()

    /**
     * Get defines whether the view will be hidden initially.
     * 
     * @return Byte
     */
    public Byte getHidden()
    {
        return this.hidden;
    } //-- Byte getHidden()

    /**
     * Get the component ID.
     * 
     * @return Byte
     */
    public Byte getId()
    {
        return this.id;
    } //-- Byte getId()

    /**
     * Get the number of the fixed columns from the left side of
     * the table (actual for the split mode ).
     * 
     * @return Byte
     */
    public Byte getLeftSplit()
    {
        return this.leftSplit;
    } //-- Byte getLeftSplit()

    /**
     * Get validation during cell editing.
     * 
     * @return Byte
     */
    public Byte getLiveValidation()
    {
        return this.liveValidation;
    } //-- Byte getLiveValidation()

    /**
     * Get sets the number of items that will be loaded on each
     * scroll movement relative to the last item in the scrolling
     * direction.
     * 
     * @return Byte
     */
    public Byte getLoadahead()
    {
        return this.loadahead;
    } //-- Byte getLoadahead()

    /**
     * Get enables math formulas in DataTable.
     * 
     * @return Byte
     */
    public Byte getMath()
    {
        return this.math;
    } //-- Byte getMath()

    /**
     * Get sets the maximum height for the view.
     * 
     * @return Byte
     */
    public Byte getMaxHeight()
    {
        return this.maxHeight;
    } //-- Byte getMaxHeight()

    /**
     * Get sets the maximum width for the view.
     * 
     * @return Byte
     */
    public Byte getMaxWidth()
    {
        return this.maxWidth;
    } //-- Byte getMaxWidth()

    /**
     * Get sets the minimum height for a row.
     * 
     * @return Byte
     */
    public Byte getMinColumnHeight()
    {
        return this.minColumnHeight;
    } //-- Byte getMinColumnHeight()

    /**
     * Get sets the minimum width for a column.
     * 
     * @return Byte
     */
    public Byte getMinColumnWidth()
    {
        return this.minColumnWidth;
    } //-- Byte getMinColumnWidth()

    /**
     * Get sets the minimal height for the view.
     * 
     * @return Byte
     */
    public Byte getMinHeight()
    {
        return this.minHeight;
    } //-- Byte getMinHeight()

    /**
     * Get sets the minimal width for the view.
     * 
     * @return Byte
     */
    public Byte getMinWidth()
    {
        return this.minWidth;
    } //-- Byte getMinWidth()

    /**
     * Get the delay between a real mouse action and invoking the
     * related events.
     * 
     * @return Byte
     */
    public Byte getMouseEventDelay()
    {
        return this.mouseEventDelay;
    } //-- Byte getMouseEventDelay()

    /**
     * Get enables the multi selection mode.
     * 
     * @return Byte
     */
    public Byte getMultiselect()
    {
        return this.multiselect;
    } //-- Byte getMultiselect()

    /**
     * Get activates the selection keyboard navigation.
     * 
     * @return Byte
     */
    public Byte getNavigation()
    {
        return this.navigation;
    } //-- Byte getNavigation()

    /**
     * Get allows attaching custom handlers to inner events of the
     * component.
     * 
     * @return Byte
     */
    public Byte getOn()
    {
        return this.on;
    } //-- Byte getOn()

    /**
     * Get attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnClick()
    {
        return this.onClick;
    } //-- Byte getOnClick()

    /**
     * Get a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @return Byte
     */
    public Byte getOnContext()
    {
        return this.onContext;
    } //-- Byte getOnContext()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnDblClick()
    {
        return this.onDblClick;
    } //-- Byte getOnDblClick()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return Byte
     */
    public Byte getOnMouseMove()
    {
        return this.onMouseMove;
    } //-- Byte getOnMouseMove()

    /**
     * Get defines paging configuration ( creates a 'ui.pager'
     * object).
     * 
     * @return Byte
     */
    public Byte getPager()
    {
        return this.pager;
    } //-- Byte getPager()

    /**
     * Get invokes the full rendering of DataTable data.
     * 
     * @return Byte
     */
    public Byte getPrerender()
    {
        return this.prerender;
    } //-- Byte getPrerender()

    /**
     * Get a handler that is called just after the page has been
     * completely parsed.
     * 
     * @return Byte
     */
    public Byte getReady()
    {
        return this.ready;
    } //-- Byte getReady()

    /**
     * Get defines how to treat items in case of reloading.
     * 
     * @return Byte
     */
    public Byte getRemoveMissed()
    {
        return this.removeMissed;
    } //-- Byte getRemoveMissed()

    /**
     * Get enables/disables horizontal resizing of columns.
     * 
     * @return Byte
     */
    public Byte getResizeColumn()
    {
        return this.resizeColumn;
    } //-- Byte getResizeColumn()

    /**
     * Get enables/disables vertical resizing of rows.
     * 
     * @return Byte
     */
    public Byte getResizeRow()
    {
        return this.resizeRow;
    } //-- Byte getResizeRow()

    /**
     * Get sets the number of the fixed columns from the right side
     * of the table (actual for the split mode ).
     * 
     * @return Byte
     */
    public Byte getRightSplit()
    {
        return this.rightSplit;
    } //-- Byte getRightSplit()

    /**
     * Get sets the default height for rows.
     * 
     * @return Byte
     */
    public Byte getRowHeight()
    {
        return this.rowHeight;
    } //-- Byte getRowHeight()

    /**
     * Get default line height for grid's row.
     * 
     * @return Byte
     */
    public Byte getRowLineHeight()
    {
        return this.rowLineHeight;
    } //-- Byte getRowLineHeight()

    /**
     * Get set of validation rules for the component.
     * 
     * @return Byte
     */
    public Byte getRules()
    {
        return this.rules;
    } //-- Byte getRules()

    /**
     * Get defines urls for datasaving.
     * 
     * @return Byte
     */
    public Byte getSave()
    {
        return this.save;
    } //-- Byte getSave()

    /**
     * Get defines schemes for data processing.
     * 
     * @return Byte
     */
    public Byte getScheme()
    {
        return this.scheme;
    } //-- Byte getScheme()

    /**
     * Get enables or disables scroll for the datatable.
     * 
     * @return Byte
     */
    public Byte getScroll()
    {
        return this.scroll;
    } //-- Byte getScroll()

    /**
     * Get enables/disables scrolling the table just by whole rows
     * (i.e. you won't be allowed to scroll along the full length
     * of rows).
     * 
     * @return Byte
     */
    public Byte getScrollAlignY()
    {
        return this.scrollAlignY;
    } //-- Byte getScrollAlignY()

    /**
     * Get enables/disables horizontal scrolling.
     * 
     * @return Byte
     */
    public Byte getScrollX()
    {
        return this.scrollX;
    } //-- Byte getScrollX()

    /**
     * Get enables/disables vertical scrolling.
     * 
     * @return Byte
     */
    public Byte getScrollY()
    {
        return this.scrollY;
    } //-- Byte getScrollY()

    /**
     * Get sets the selection mode in DataTable.
     * 
     * @return Byte
     */
    public Byte getSelect()
    {
        return this.select;
    } //-- Byte getSelect()

    /**
     * Get array of span configurations for the datatable.
     * 
     * @return Byte
     */
    public Byte getSpans()
    {
        return this.spans;
    } //-- Byte getSpans()

    /**
     * Get sets a popup message appearing on pointing a mouse
     * cursor over the dedicated item.
     * 
     * @return Byte
     */
    public Byte getTooltip()
    {
        return this.tooltip;
    } //-- Byte getTooltip()

    /**
     * Get used for configuring presentation of items.
     * 
     * @return Byte
     */
    public Byte getType()
    {
        return this.type;
    } //-- Byte getType()

    /**
     * Get the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @return Byte
     */
    public Byte getUrl()
    {
        return this.url;
    } //-- Byte getUrl()

    /**
     * Get sets the width of the component.
     * 
     * @return Byte
     */
    public Byte getWidth()
    {
        return this.width;
    } //-- Byte getWidth()

    /**
     * Get defines height of datatable in rows.
     * 
     * @return Byte
     */
    public Byte getYCount()
    {
        return this.yCount;
    } //-- Byte getYCount()

    /**
     * Set defines or disables view change animation.
     * 
     * @param animate
     */
    public void setAnimate( Byte animate )
    {
        this.animate = animate;
    } //-- void setAnimate( Byte )

    /**
     * Set datatable adjust configuration to the data.
     * 
     * @param autoConfig
     */
    public void setAutoConfig( Byte autoConfig )
    {
        this.autoConfig = autoConfig;
    } //-- void setAutoConfig( Byte )

    /**
     * Set adjusts DataTable to the parent container size
     * vertically.
     * 
     * @param autoheight
     */
    public void setAutoheight( Byte autoheight )
    {
        this.autoheight = autoheight;
    } //-- void setAutoheight( Byte )

    /**
     * Set adjusts DataTable to the parent container size
     * horizontally.
     * 
     * @param autowidth
     */
    public void setAutowidth( Byte autowidth )
    {
        this.autowidth = autowidth;
    } //-- void setAutowidth( Byte )

    /**
     * Set enables/disables block selection.
     * 
     * @param blockselect
     */
    public void setBlockselect( Byte blockselect )
    {
        this.blockselect = blockselect;
    } //-- void setBlockselect( Byte )

    /**
     * Set used to hide the component borders.
     * 
     * @param borderless
     */
    public void setBorderless( Byte borderless )
    {
        this.borderless = borderless;
    } //-- void setBorderless( Byte )

    /**
     * Set controls behavior of checkbox editors in grid.
     * 
     * @param checkboxRefresh
     */
    public void setCheckboxRefresh( Byte checkboxRefresh )
    {
        this.checkboxRefresh = checkboxRefresh;
    } //-- void setCheckboxRefresh( Byte )

    /**
     * Set enables/disables clipboard support.
     * 
     * @param clipboard
     */
    public void setClipboard( Byte clipboard )
    {
        this.clipboard = clipboard;
    } //-- void setClipboard( Byte )

    /**
     * Set defines the default width for columns (in pixels).
     * 
     * @param columnWidth
     */
    public void setColumnWidth( Byte columnWidth )
    {
        this.columnWidth = columnWidth;
    } //-- void setColumnWidth( Byte )

    /**
     * Set configures columns of the table.
     * 
     * @param columns
     */
    public void setColumns( Byte columns )
    {
        this.columns = columns;
    } //-- void setColumns( Byte )

    /**
     * Set an html container (or its id) where the component needs
     * initializing.
     * 
     * @param container
     */
    public void setContainer( Byte container )
    {
        this.container = container;
    } //-- void setContainer( Byte )

    /**
     * Set the name of a css class that will be applied to the view
     * container.
     * 
     * @param css
     */
    public void setCss( Byte css )
    {
        this.css = css;
    } //-- void setCss( Byte )

    /**
     * Set an inline dataset that data to the component will be
     * load from.
     * 
     * @param data
     */
    public void setData( Byte data )
    {
        this.data = data;
    } //-- void setData( Byte )

    /**
     * Set the url to the data source that the component will use
     * to reload data from.
     * 
     * @param dataFeed
     */
    public void setDataFeed( Byte dataFeed )
    {
        this.dataFeed = dataFeed;
    } //-- void setDataFeed( Byte )

    /**
     * Set defines the start position DataTable will load data
     * from.
     * 
     * @param datafetch
     */
    public void setDatafetch( Byte datafetch )
    {
        this.datafetch = datafetch;
    } //-- void setDatafetch( Byte )

    /**
     * Set sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     * 
     * @param datathrottle
     */
    public void setDatathrottle( Byte datathrottle )
    {
        this.datathrottle = datathrottle;
    } //-- void setDatathrottle( Byte )

    /**
     * Set the type of loaded data.
     * 
     * @param datatype
     */
    public void setDatatype( Byte datatype )
    {
        this.datatype = datatype;
    } //-- void setDatatype( Byte )

    /**
     * Set sets CSV delimiters for clipboard operations.
     * 
     * @param delimiter
     */
    public void setDelimiter( Byte delimiter )
    {
        this.delimiter = delimiter;
    } //-- void setDelimiter( Byte )

    /**
     * Set disables item.
     * 
     * @param disabled
     */
    public void setDisabled( Byte disabled )
    {
        this.disabled = disabled;
    } //-- void setDisabled( Byte )

    /**
     * Set enables or disables drag-and-drop.
     * 
     * @param drag
     */
    public void setDrag( Byte drag )
    {
        this.drag = drag;
    } //-- void setDrag( Byte )

    /**
     * Set enables drag-and-drop support for columns.
     * 
     * @param dragColumn
     */
    public void setDragColumn( Byte dragColumn )
    {
        this.dragColumn = dragColumn;
    } //-- void setDragColumn( Byte )

    /**
     * Set enables autoscroll of component during drag-n-drop.
     * 
     * @param dragscroll
     */
    public void setDragscroll( Byte dragscroll )
    {
        this.dragscroll = dragscroll;
    } //-- void setDragscroll( Byte )

    /**
     * Set enables formular editing.
     * 
     * @param editMath
     */
    public void setEditMath( Byte editMath )
    {
        this.editMath = editMath;
    } //-- void setEditMath( Byte )

    /**
     * Set defines which data item is editable (in case of several
     * data item in the cell/line).
     * 
     * @param editValue
     */
    public void setEditValue( Byte editValue )
    {
        this.editValue = editValue;
    } //-- void setEditValue( Byte )

    /**
     * Set allows/denies editing in the table.
     * 
     * @param editable
     */
    public void setEditable( Byte editable )
    {
        this.editable = editable;
    } //-- void setEditable( Byte )

    /**
     * Set defines the action on which editors will be opened.
     * 
     * @param editaction
     */
    public void setEditaction( Byte editaction )
    {
        this.editaction = editaction;
    } //-- void setEditaction( Byte )

    /**
     * Set allows defining custom 'move' logic for the component.
     * 
     * @param externalData
     */
    public void setExternalData( Byte externalData )
    {
        this.externalData = externalData;
    } //-- void setExternalData( Byte )

    /**
     * Set defines filtering rules in tree-like components.
     * 
     * @param filterMode
     */
    public void setFilterMode( Byte filterMode )
    {
        this.filterMode = filterMode;
    } //-- void setFilterMode( Byte )

    /**
     * Set defines whether the height should be fixed for all rows
     * or can vary.
     * 
     * @param fixedRowHeight
     */
    public void setFixedRowHeight( Byte fixedRowHeight )
    {
        this.fixedRowHeight = fixedRowHeight;
    } //-- void setFixedRowHeight( Byte )

    /**
     * Set enables/disables the footer in DataTable (disabled, by
     * default).
     * 
     * @param footer
     */
    public void setFooter( Byte footer )
    {
        this.footer = footer;
    } //-- void setFooter( Byte )

    /**
     * Set linked form.
     * 
     * @param form
     */
    public void setForm( Byte form )
    {
        this.form = form;
    } //-- void setForm( Byte )

    /**
     * Set sets the view gravity (1 by default).
     * 
     * @param gravity
     */
    public void setGravity( Byte gravity )
    {
        this.gravity = gravity;
    } //-- void setGravity( Byte )

    /**
     * Set enables/disables the header in DataTable (enabled, by
     * default).
     * 
     * @param header
     */
    public void setHeader( Byte header )
    {
        this.header = header;
    } //-- void setHeader( Byte )

    /**
     * Set sets the heigth of the header row.
     * 
     * @param headerRowHeight
     */
    public void setHeaderRowHeight( Byte headerRowHeight )
    {
        this.headerRowHeight = headerRowHeight;
    } //-- void setHeaderRowHeight( Byte )

    /**
     * Set adds a headermenu to control column visibility.
     * 
     * @param headermenu
     */
    public void setHeadermenu( Byte headermenu )
    {
        this.headermenu = headermenu;
    } //-- void setHeadermenu( Byte )

    /**
     * Set sets the height of the component.
     * 
     * @param height
     */
    public void setHeight( Byte height )
    {
        this.height = height;
    } //-- void setHeight( Byte )

    /**
     * Set defines whether the view will be hidden initially.
     * 
     * @param hidden
     */
    public void setHidden( Byte hidden )
    {
        this.hidden = hidden;
    } //-- void setHidden( Byte )

    /**
     * Set the component ID.
     * 
     * @param id
     */
    public void setId( Byte id )
    {
        this.id = id;
    } //-- void setId( Byte )

    /**
     * Set the number of the fixed columns from the left side of
     * the table (actual for the split mode ).
     * 
     * @param leftSplit
     */
    public void setLeftSplit( Byte leftSplit )
    {
        this.leftSplit = leftSplit;
    } //-- void setLeftSplit( Byte )

    /**
     * Set validation during cell editing.
     * 
     * @param liveValidation
     */
    public void setLiveValidation( Byte liveValidation )
    {
        this.liveValidation = liveValidation;
    } //-- void setLiveValidation( Byte )

    /**
     * Set sets the number of items that will be loaded on each
     * scroll movement relative to the last item in the scrolling
     * direction.
     * 
     * @param loadahead
     */
    public void setLoadahead( Byte loadahead )
    {
        this.loadahead = loadahead;
    } //-- void setLoadahead( Byte )

    /**
     * Set enables math formulas in DataTable.
     * 
     * @param math
     */
    public void setMath( Byte math )
    {
        this.math = math;
    } //-- void setMath( Byte )

    /**
     * Set sets the maximum height for the view.
     * 
     * @param maxHeight
     */
    public void setMaxHeight( Byte maxHeight )
    {
        this.maxHeight = maxHeight;
    } //-- void setMaxHeight( Byte )

    /**
     * Set sets the maximum width for the view.
     * 
     * @param maxWidth
     */
    public void setMaxWidth( Byte maxWidth )
    {
        this.maxWidth = maxWidth;
    } //-- void setMaxWidth( Byte )

    /**
     * Set sets the minimum height for a row.
     * 
     * @param minColumnHeight
     */
    public void setMinColumnHeight( Byte minColumnHeight )
    {
        this.minColumnHeight = minColumnHeight;
    } //-- void setMinColumnHeight( Byte )

    /**
     * Set sets the minimum width for a column.
     * 
     * @param minColumnWidth
     */
    public void setMinColumnWidth( Byte minColumnWidth )
    {
        this.minColumnWidth = minColumnWidth;
    } //-- void setMinColumnWidth( Byte )

    /**
     * Set sets the minimal height for the view.
     * 
     * @param minHeight
     */
    public void setMinHeight( Byte minHeight )
    {
        this.minHeight = minHeight;
    } //-- void setMinHeight( Byte )

    /**
     * Set sets the minimal width for the view.
     * 
     * @param minWidth
     */
    public void setMinWidth( Byte minWidth )
    {
        this.minWidth = minWidth;
    } //-- void setMinWidth( Byte )

    /**
     * Set the delay between a real mouse action and invoking the
     * related events.
     * 
     * @param mouseEventDelay
     */
    public void setMouseEventDelay( Byte mouseEventDelay )
    {
        this.mouseEventDelay = mouseEventDelay;
    } //-- void setMouseEventDelay( Byte )

    /**
     * Set enables the multi selection mode.
     * 
     * @param multiselect
     */
    public void setMultiselect( Byte multiselect )
    {
        this.multiselect = multiselect;
    } //-- void setMultiselect( Byte )

    /**
     * Set activates the selection keyboard navigation.
     * 
     * @param navigation
     */
    public void setNavigation( Byte navigation )
    {
        this.navigation = navigation;
    } //-- void setNavigation( Byte )

    /**
     * Set allows attaching custom handlers to inner events of the
     * component.
     * 
     * @param on
     */
    public void setOn( Byte on )
    {
        this.on = on;
    } //-- void setOn( Byte )

    /**
     * Set attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @param onClick
     */
    public void setOnClick( Byte onClick )
    {
        this.onClick = onClick;
    } //-- void setOnClick( Byte )

    /**
     * Set a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @param onContext
     */
    public void setOnContext( Byte onContext )
    {
        this.onContext = onContext;
    } //-- void setOnContext( Byte )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onDblClick
     */
    public void setOnDblClick( Byte onDblClick )
    {
        this.onDblClick = onDblClick;
    } //-- void setOnDblClick( Byte )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onMouseMove
     */
    public void setOnMouseMove( Byte onMouseMove )
    {
        this.onMouseMove = onMouseMove;
    } //-- void setOnMouseMove( Byte )

    /**
     * Set defines paging configuration ( creates a 'ui.pager'
     * object).
     * 
     * @param pager
     */
    public void setPager( Byte pager )
    {
        this.pager = pager;
    } //-- void setPager( Byte )

    /**
     * Set invokes the full rendering of DataTable data.
     * 
     * @param prerender
     */
    public void setPrerender( Byte prerender )
    {
        this.prerender = prerender;
    } //-- void setPrerender( Byte )

    /**
     * Set a handler that is called just after the page has been
     * completely parsed.
     * 
     * @param ready
     */
    public void setReady( Byte ready )
    {
        this.ready = ready;
    } //-- void setReady( Byte )

    /**
     * Set defines how to treat items in case of reloading.
     * 
     * @param removeMissed
     */
    public void setRemoveMissed( Byte removeMissed )
    {
        this.removeMissed = removeMissed;
    } //-- void setRemoveMissed( Byte )

    /**
     * Set enables/disables horizontal resizing of columns.
     * 
     * @param resizeColumn
     */
    public void setResizeColumn( Byte resizeColumn )
    {
        this.resizeColumn = resizeColumn;
    } //-- void setResizeColumn( Byte )

    /**
     * Set enables/disables vertical resizing of rows.
     * 
     * @param resizeRow
     */
    public void setResizeRow( Byte resizeRow )
    {
        this.resizeRow = resizeRow;
    } //-- void setResizeRow( Byte )

    /**
     * Set sets the number of the fixed columns from the right side
     * of the table (actual for the split mode ).
     * 
     * @param rightSplit
     */
    public void setRightSplit( Byte rightSplit )
    {
        this.rightSplit = rightSplit;
    } //-- void setRightSplit( Byte )

    /**
     * Set sets the default height for rows.
     * 
     * @param rowHeight
     */
    public void setRowHeight( Byte rowHeight )
    {
        this.rowHeight = rowHeight;
    } //-- void setRowHeight( Byte )

    /**
     * Set default line height for grid's row.
     * 
     * @param rowLineHeight
     */
    public void setRowLineHeight( Byte rowLineHeight )
    {
        this.rowLineHeight = rowLineHeight;
    } //-- void setRowLineHeight( Byte )

    /**
     * Set set of validation rules for the component.
     * 
     * @param rules
     */
    public void setRules( Byte rules )
    {
        this.rules = rules;
    } //-- void setRules( Byte )

    /**
     * Set defines urls for datasaving.
     * 
     * @param save
     */
    public void setSave( Byte save )
    {
        this.save = save;
    } //-- void setSave( Byte )

    /**
     * Set defines schemes for data processing.
     * 
     * @param scheme
     */
    public void setScheme( Byte scheme )
    {
        this.scheme = scheme;
    } //-- void setScheme( Byte )

    /**
     * Set enables or disables scroll for the datatable.
     * 
     * @param scroll
     */
    public void setScroll( Byte scroll )
    {
        this.scroll = scroll;
    } //-- void setScroll( Byte )

    /**
     * Set enables/disables scrolling the table just by whole rows
     * (i.e. you won't be allowed to scroll along the full length
     * of rows).
     * 
     * @param scrollAlignY
     */
    public void setScrollAlignY( Byte scrollAlignY )
    {
        this.scrollAlignY = scrollAlignY;
    } //-- void setScrollAlignY( Byte )

    /**
     * Set enables/disables horizontal scrolling.
     * 
     * @param scrollX
     */
    public void setScrollX( Byte scrollX )
    {
        this.scrollX = scrollX;
    } //-- void setScrollX( Byte )

    /**
     * Set enables/disables vertical scrolling.
     * 
     * @param scrollY
     */
    public void setScrollY( Byte scrollY )
    {
        this.scrollY = scrollY;
    } //-- void setScrollY( Byte )

    /**
     * Set sets the selection mode in DataTable.
     * 
     * @param select
     */
    public void setSelect( Byte select )
    {
        this.select = select;
    } //-- void setSelect( Byte )

    /**
     * Set array of span configurations for the datatable.
     * 
     * @param spans
     */
    public void setSpans( Byte spans )
    {
        this.spans = spans;
    } //-- void setSpans( Byte )

    /**
     * Set sets a popup message appearing on pointing a mouse
     * cursor over the dedicated item.
     * 
     * @param tooltip
     */
    public void setTooltip( Byte tooltip )
    {
        this.tooltip = tooltip;
    } //-- void setTooltip( Byte )

    /**
     * Set used for configuring presentation of items.
     * 
     * @param type
     */
    public void setType( Byte type )
    {
        this.type = type;
    } //-- void setType( Byte )

    /**
     * Set the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @param url
     */
    public void setUrl( Byte url )
    {
        this.url = url;
    } //-- void setUrl( Byte )

    /**
     * Set sets the width of the component.
     * 
     * @param width
     */
    public void setWidth( Byte width )
    {
        this.width = width;
    } //-- void setWidth( Byte )

    /**
     * Set defines height of datatable in rows.
     * 
     * @param yCount
     */
    public void setYCount( Byte yCount )
    {
        this.yCount = yCount;
    } //-- void setYCount( Byte )

    /**
     * Adds an item to the store
     */
    public Byte add() {
        return null;
    }
    /**
     * Adds a css class to the cell
     */
    public void addCellCss() {
        return;
    }
    /**
     * Applied CSS class to a component item
     */
    public void addCss() {
        return;
    }
    /**
     * Adds a css class to the row
     */
    public void addRowCss() {
        return;
    }
    /**
     * Adds colspan or rowspan to the datatable
     */
    public void addSpan() {
        return;
    }
    /**
     * Adjusts the component to the size of the parent HTML container
     */
    public void adjust() {
        return;
    }
    /**
     * Adjusts a column to the width of the content
     */
    public Boolean adjustColumn() {
        return null;
    }
    /**
     * Autodetect height of rows in datatable
     */
    public void adjustRowHeight() {
        return;
    }
    /**
     * Attaches the handler to an inner event of the component (allows behaviour customizations)
     */
    public Byte attachEvent() {
        return null;
    }
    /**
     * Binds components
     */
    public void bind() {
        return;
    }
    /**
     * Temporarily blocks triggering of ALL events of the calling object
     */
    public void blockEvent() {
        return;
    }
    /**
     * Calls an inner event
     */
    public Boolean callEvent() {
        return null;
    }
    /**
     * Removes all items from the component
     */
    public void clearAll() {
        return;
    }
    /**
     * Removes css class from all items
     */
    public void clearCss() {
        return;
    }
    /**
     * Clears selection
     */
    public void clearSelection() {
        return;
    }
    /**
     * Removes all validation marks from the component
     */
    public void clearValidation() {
        return;
    }
    /**
     * Returns an array of unique values of the specified column
     */
    public Byte collectValues() {
        return null;
    }
    /**
     * Returns the id of the column at the specified index
     */
    public Byte columnId() {
        return null;
    }
    /**
     * Copies an item to the same or another object
     */
    public void copy() {
        return;
    }
    /**
     * Returns the count of items in the table
     */
    public Integer count() {
        return null;
    }
    /**
     * Redefines a single configuration property (or a hash of properties)
     */
    public void define() {
        return;
    }
    /**
     * Destructs the calling object
     */
    public void destructor() {
        return;
    }
    /**
     * Detaches a handler from an event (which was attached before by the attachEvent method)
     */
    public void detachEvent() {
        return;
    }
    /**
     * Disables the calling view (makes it dimmed and unclickable)
     */
    public void disable() {
        return;
    }
    /**
     * Iterates over all visible columns in the table
     */
    public void eachColumn() {
        return;
    }
    /**
     * Iterates over all rows in the table
     */
    public void eachRow() {
        return;
    }
    /**
     * Enables the edit mode for the specified item
     */
    public void edit() {
        return;
    }
    /**
     * Cancels the edit mode and closes all opened editors. The table is still editable
     */
    public void editCancel() {
        return;
    }
    /**
     * Enables the edit mode for the specified cell
     */
    public void editCell() {
        return;
    }
    /**
     * Enables the edit mode for the specified column
     */
    public void editColumn() {
        return;
    }
    /**
     * Closes the current editor and opens one in the next cell of the row
     */
    public Boolean editNext() {
        return null;
    }
    /**
     * Enables the edit mode for the specified row
     */
    public void editRow() {
        return;
    }
    /**
     * Stops the edit mode and closes all opened editors. The table is still editable
     */
    public void editStop() {
        return;
    }
    /**
     * Enables the calling view that was disabled by the 'disable' method
     */
    public void enable() {
        return;
    }
    /**
     * Checks whether an item with the specified id exists
     */
    public Boolean exists() {
        return null;
    }
    /**
     * Exports data to an Excel file
     */
    public void exportToExcel() {
        return;
    }
    /**
     * Exports data to a PDF file
     */
    public void exportToPDF() {
        return;
    }
    /**
     * Filters the component
     */
    public void filter() {
        return;
    }
    /**
     * Refilters DataTable by all specified filters
     */
    public void filterByAll() {
        return;
    }
    /**
     * Returns rows that match the criterion
     */
    public Byte find() {
        return null;
    }
    /**
     * Moves focus to the active editor
     */
    public void focusEditor() {
        return;
    }
    /**
     * Returns child views of the calling component
     */
    public Byte getChildViews() {
        return null;
    }
    /**
     * Returns the configuration object of the specified column
     */
    public Byte getColumnConfig() {
        return null;
    }
    /**
     * Returns the index of the column with the specified id
     */
    public Integer getColumnIndex() {
        return null;
    }
    /**
     * Returns info about active editor object
     */
    public Byte getEditState() {
        return null;
    }
    /**
     * Returns editor object
     */
    public Byte getEditor() {
        return null;
    }
    /**
     * Returns the value of the active (currently open) editor
     */
    public String getEditorValue() {
        return null;
    }
    /**
     * Returns the filter object that the component uses to filter the values of the specified column
     */
    public Byte getFilter() {
        return null;
    }
    /**
     * Gets the ID of the first row
     */
    public Byte getFirstId() {
        return null;
    }
    /**
     * Returns master form for the input
     */
    public Byte getFormView() {
        return null;
    }
    /**
     * Returns set of helpers for header content manipulation
     */
    public Byte getHeaderContent() {
        return null;
    }
    /**
     * Returns HTML element of the column's header
     */
    public Byte getHeaderNode() {
        return null;
    }
    /**
     * Returns the id of the item with the specified index
     */
    public Byte getIdByIndex() {
        return null;
    }
    /**
     * Returns the index of the item with the specified id
     */
    public Integer getIndexById() {
        return null;
    }
    /**
     * Gets the object of the data item with the specified id
     */
    public Byte getItem() {
        return null;
    }
    /**
     * Returns html element of the item
     */
    public void getItemNode() {
        return;
    }
    /**
     * Returns the id of the last row
     */
    public Byte getLastId() {
        return null;
    }
    /**
     * Returns the ID of an item which is positioned the specified step after the specified item
     */
    public Byte getNextId() {
        return null;
    }
    /**
     * Returns the main HTML container for the calling object
     */
    public Byte getNode() {
        return null;
    }
    /**
     * Returns the currently visible page in case of paged view
     */
    public Integer getPage() {
        return null;
    }
    /**
     * Returns the parent object of the calling element. Used while integrating with Webix Touch
     */
    public Byte getParentView() {
        return null;
    }
    /**
     * Returns the ID of an item which is positioned the specified step before the specified item
     */
    public Byte getPrevId() {
        return null;
    }
    /**
     * Returns the current position of scrolls
     */
    public Byte getScrollState() {
        return null;
    }
    /**
     * Returns the selected cells
     */
    public Byte getSelectedId() {
        return null;
    }
    /**
     * Gets an object of the selected data item
     */
    public void getSelectedItem() {
        return;
    }
    /**
     * Returns the current state of the table
     */
    public Byte getState() {
        return null;
    }
    /**
     * Returns text value of a cell
     */
    public String getText() {
        return null;
    }
    /**
     * Returns top parent view
     */
    public Byte getTopParentView() {
        return null;
    }
    /**
     * Returns count of visible rows
     */
    public Integer getVisibleCount() {
        return null;
    }
    /**
     * Groups data by the specified data property
     */
    public void group() {
        return;
    }
    /**
     * Checks if item has specific css class
     */
    public Boolean hasCss() {
        return null;
    }
    /**
     * Checks whether the component has the specified event
     */
    public Boolean hasEvent() {
        return null;
    }
    /**
     * Hides view. Used while integrating with Webix Touch
     */
    public void hide() {
        return;
    }
    /**
     * Hides the specified column
     */
    public void hideColumn() {
        return;
    }
    /**
     * Hides previously defined overlay
     */
    public void hideOverlay() {
        return;
    }
    /**
     * Returns true if column is visible
     */
    public Boolean isColumnVisible() {
        return null;
    }
    /**
     * Checks whether the view is enabled
     */
    public Boolean isEnabled() {
        return null;
    }
    /**
     * Checks whether the view is visible
     */
    public Boolean isVisible() {
        return null;
    }
    /**
     * Loads data from an external data source
     */
    public Byte load() {
        return null;
    }
    /**
     * Sends a request to load the specified number of records to the end or to the specified position
     */
    public void loadNext() {
        return;
    }
    /**
     * Converts an HTML node or event object to in-table position
     */
    public Byte locate() {
        return null;
    }
    /**
     * Applies the callback to a range of cells
     */
    public void mapCells() {
        return;
    }
    /**
     * Routes events from one object to another
     */
    public void mapEvent() {
        return;
    }
    /**
     * Executes some custom method for all cells in the currently selected block
     */
    public void mapSelection() {
        return;
    }
    /**
     * Marks the sorted column with a dedicated sign (asc/desc) in the header
     */
    public void markSorting() {
        return;
    }
    /**
     * Moves the specified item to a new position
     */
    public String move() {
        return null;
    }
    /**
     * Moves the specified item to the last position
     */
    public void moveBottom() {
        return;
    }
    /**
     * Moves column to different position
     */
    public void moveColumn() {
        return;
    }
    /**
     * Increases the item index and moves the item to the new position
     */
    public void moveDown() {
        return;
    }
    /**
     * Moves selection in the specified direction
     */
    public void moveSelection() {
        return;
    }
    /**
     * Moves the specified item to the first position
     */
    public void moveTop() {
        return;
    }
    /**
     * Decreases the item index and moves the item to the new position
     */
    public void moveUp() {
        return;
    }
    /**
     * Loads data to the component from an inline data source
     */
    public void parse() {
        return;
    }
    /**
     * Repaints the whole view or a certain item
     */
    public void refresh() {
        return;
    }
    /**
     * Refreshes the structure of DataTable
     */
    public void refreshColumns() {
        return;
    }
    /**
     * Rebuilds list of options in select filter
     */
    public void refreshFilter() {
        return;
    }
    /**
     * Refreshes the header row of DataTable
     */
    public void refreshHeaderContent() {
        return;
    }
    /**
     * Registers a filter element
     */
    public void registerFilter() {
        return;
    }
    /**
     * Removes the specified item from datastore
     */
    public void remove() {
        return;
    }
    /**
     * Remove css class from the cell of datatable
     */
    public void removeCellCss() {
        return;
    }
    /**
     * Removes CSS class from a component item
     */
    public void removeCss() {
        return;
    }
    /**
     * Remove css class from the row
     */
    public void removeRowCss() {
        return;
    }
    /**
     * Removes a rowspan/colspan from the datatable
     */
    public void removeSpan() {
        return;
    }
    /**
     * Renders the specified item or the whole component
     */
    public void render() {
        return;
    }
    /**
     * Adjusts the view to a new size
     */
    public void resize() {
        return;
    }
    /**
     * Scrolls the view to the defined position
     */
    public void scrollTo() {
        return;
    }
    /**
     * Selects the specified element
     */
    public void select() {
        return;
    }
    /**
     * Selects the specified range of elements
     */
    public void selectRange() {
        return;
    }
    /**
     * Serializes data to a json object
     */
    public Byte serialize() {
        return null;
    }
    /**
     * Makes the specified page visible (assuming that the pager was defined )
     */
    public void setPage() {
        return;
    }
    /**
     * Restores the specified state
     */
    public void setState() {
        return;
    }
    /**
     * Makes the component visible
     */
    public void show() {
        return;
    }
    /**
     * Scrolls the table (if needed) to make the specified cell visible
     */
    public void showCell() {
        return;
    }
    /**
     * Shows the column which was previously hidden by method 'hidecolumn'
     */
    public void showColumn() {
        return;
    }
    /**
     * Shows or hides a group of columns
     */
    public void showColumnBatch() {
        return;
    }
    /**
     * 'scrolls' the table to make the specified row visible
     */
    public void showItem() {
        return;
    }
    /**
     * 'scrolls' the table to make the specified row visible
     */
    public void showItemByIndex() {
        return;
    }
    /**
     * Shows the overlay message over the body of DataTable
     */
    public void showOverlay() {
        return;
    }
    /**
     * Sorts rows in DataTable
     */
    public void sort() {
        return;
    }
    /**
     * Allows you to sync two copy of data (all or just a part of it) from one DataCollection to another
     */
    public void sync() {
        return;
    }
    /**
     * Breaks "bind" link
     */
    public void unbind() {
        return;
    }
    /**
     * Cancels blocking events that was enabled by the 'blockEvent' command
     */
    public void unblockEvent() {
        return;
    }
    /**
     * Ungroups data
     */
    public void ungroup() {
        return;
    }
    /**
     * Cancels selection of the specified element
     */
    public void unselect() {
        return;
    }
    /**
     * Sets properties of the data item
     */
    public void updateItem() {
        return;
    }
    /**
     * Validates one record or all dataset against validation rules
     */
    public Boolean validate() {
        return null;
    }
    /**
     * Validates data in currently active editor
     */
    public Boolean validateEditor() {
        return null;
    }
}
