// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.7,
// any modifications will be overwritten.
// ==============================================================

package com.webix.ui.model.data;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import com.webix.ui.model.UnknownType;
import com.webix.ui.model.auxiliary.Calendar;
import com.webix.ui.model.auxiliary.Colorboard;
import com.webix.ui.model.auxiliary.Pager;
import com.webix.ui.model.auxiliary.Resizer;
import com.webix.ui.model.auxiliary.Spacer;
import com.webix.ui.model.auxiliary.Tooltip;
import com.webix.ui.model.auxiliary.Video;
import com.webix.ui.model.context.Context;
import com.webix.ui.model.context.Contextmenu;
import com.webix.ui.model.context.Datasuggest;
import com.webix.ui.model.context.Gridsuggest;
import com.webix.ui.model.context.Menu;
import com.webix.ui.model.context.Popup;
import com.webix.ui.model.context.Submenu;
import com.webix.ui.model.context.Suggest;
import com.webix.ui.model.context.Window;
import com.webix.ui.model.form.Button;
import com.webix.ui.model.form.Checkbox;
import com.webix.ui.model.form.Colorpicker;
import com.webix.ui.model.form.Combo;
import com.webix.ui.model.form.Counter;
import com.webix.ui.model.form.Datepicker;
import com.webix.ui.model.form.Fieldset;
import com.webix.ui.model.form.Icon;
import com.webix.ui.model.form.Label;
import com.webix.ui.model.form.Multiselect;
import com.webix.ui.model.form.Multitext;
import com.webix.ui.model.form.Radio;
import com.webix.ui.model.form.Richselect;
import com.webix.ui.model.form.Search;
import com.webix.ui.model.form.Segmented;
import com.webix.ui.model.form.Select;
import com.webix.ui.model.form.Slider;
import com.webix.ui.model.form.Tabbar;
import com.webix.ui.model.form.Text;
import com.webix.ui.model.form.Textarea;
import com.webix.ui.model.form.Toggle;
import com.webix.ui.model.html.Htmlform;
import com.webix.ui.model.html.Iframe;
import com.webix.ui.model.html.Scrollview;
import com.webix.ui.model.html.Template;
import com.webix.ui.model.layouts.Accordion;
import com.webix.ui.model.layouts.Accordionitem;
import com.webix.ui.model.layouts.Carousel;
import com.webix.ui.model.layouts.Form;
import com.webix.ui.model.layouts.Headerlayout;
import com.webix.ui.model.layouts.Layout;
import com.webix.ui.model.layouts.Multiview;
import com.webix.ui.model.layouts.Tabview;
import com.webix.ui.model.layouts.Toolbar;

/**
 * An editable table that can easily display huge data sets.The
 * component is full of various possibilities: filtering, sorting,
 * pagination, editing, nadigation, drag-and-drop,
 * internatialization, export to PDF, Excel etc. It also provides
 * the dynamic mode for fast handling thousands of records. Check
 * <a href="http://docs.webix.com//">datatable</a> documentation
 * for more detailed description.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
@com.webix.ui.model.SupportsEvent({com.webix.ui.model.Event.ON_AFTER_ADD, com.webix.ui.model.Event.ON_AFTER_COLUMN_DROP, com.webix.ui.model.Event.ON_AFTER_COLUMN_DROP_ORDER, com.webix.ui.model.Event.ON_AFTER_CONTEXT_MENU, com.webix.ui.model.Event.ON_AFTER_DELETE, com.webix.ui.model.Event.ON_AFTER_DROP, com.webix.ui.model.Event.ON_AFTER_EDIT_START, com.webix.ui.model.Event.ON_AFTER_EDIT_STOP, com.webix.ui.model.Event.ON_AFTER_FILTER, com.webix.ui.model.Event.ON_AFTER_LOAD, com.webix.ui.model.Event.ON_AFTER_RENDER, com.webix.ui.model.Event.ON_AFTER_SCROLL, com.webix.ui.model.Event.ON_AFTER_SELECT, com.webix.ui.model.Event.ON_AFTER_SORT, com.webix.ui.model.Event.ON_AFTER_UNSELECT, com.webix.ui.model.Event.ON_BEFORE_ADD, com.webix.ui.model.Event.ON_BEFORE_COLUMN_DRAG, com.webix.ui.model.Event.ON_BEFORE_COLUMN_DROP, com.webix.ui.model.Event.ON_BEFORE_COLUMN_DROP_ORDER, com.webix.ui.model.Event.ON_BEFORE_CONTEXT_MENU, com.webix.ui.model.Event.ON_BEFORE_DELETE, com.webix.ui.model.Event.ON_BEFORE_DRAG, com.webix.ui.model.Event.ON_BEFORE_DRAG_IN, com.webix.ui.model.Event.ON_BEFORE_DROP, com.webix.ui.model.Event.ON_BEFORE_DROP_OUT, com.webix.ui.model.Event.ON_BEFORE_EDIT_START, com.webix.ui.model.Event.ON_BEFORE_EDIT_STOP, com.webix.ui.model.Event.ON_BEFORE_FILTER, com.webix.ui.model.Event.ON_BEFORE_LOAD, com.webix.ui.model.Event.ON_BEFORE_RENDER, com.webix.ui.model.Event.ON_BEFORE_SELECT, com.webix.ui.model.Event.ON_BEFORE_SORT, com.webix.ui.model.Event.ON_BEFORE_UN_SELECT, com.webix.ui.model.Event.ON_BIND_REQUEST, com.webix.ui.model.Event.ON_CHECK, com.webix.ui.model.Event.ON_COLUMN_RESIZE, com.webix.ui.model.Event.ON_DATA_REQUEST, com.webix.ui.model.Event.ON_DATA_UPDATE, com.webix.ui.model.Event.ON_DESTRUCT, com.webix.ui.model.Event.ON_DRAG_OUT, com.webix.ui.model.Event.ON_HEADER_CLICK, com.webix.ui.model.Event.ON_ITEM_CLICK, com.webix.ui.model.Event.ON_ITEM_DBL_CLICK, com.webix.ui.model.Event.ON_LIVE_EDIT, com.webix.ui.model.Event.ON_LOAD_ERROR, com.webix.ui.model.Event.ON_LONG_TOUCH, com.webix.ui.model.Event.ON_MOUSE_MOVE, com.webix.ui.model.Event.ON_MOUSE_MOVING, com.webix.ui.model.Event.ON_MOUSE_OUT, com.webix.ui.model.Event.ON_RESIZE, com.webix.ui.model.Event.ON_ROTATE, com.webix.ui.model.Event.ON_ROW_RESIZE, com.webix.ui.model.Event.ON_SCROLL_X, com.webix.ui.model.Event.ON_SCROLL_Y, com.webix.ui.model.Event.ON_SELECT_CHANGE, com.webix.ui.model.Event.ON_STRUCTURE_LOAD, com.webix.ui.model.Event.ON_STRUCTURE_UPDATE, com.webix.ui.model.Event.ON_SWIPE_X, com.webix.ui.model.Event.ON_SWIPE_Y, com.webix.ui.model.Event.ON_TOUCH_END, com.webix.ui.model.Event.ON_TOUCH_MOVE, com.webix.ui.model.Event.ON_TOUCH_START, com.webix.ui.model.Event.ON_VALIDATION_ERROR, com.webix.ui.model.Event.ON_VALIDATION_SUCCESS, com.webix.ui.model.Event.ON_VIEW_RESIZE})
public class Datatable
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Defines or disables view change animation.
     */
    private UnknownType animate;

    /**
     * Datatable adjust configuration to the data.
     */
    private Boolean autoConfig;

    /**
     * Adjusts DataTable to the parent container size vertically.
     */
    private Boolean autoheight;

    /**
     * Adjusts DataTable to the parent container size horizontally.
     */
    private Boolean autowidth;

    /**
     * Enables/disables block selection.
     */
    private Boolean blockselect;

    /**
     * Used to hide the component borders.
     */
    private Boolean borderless;

    /**
     * Controls behavior of checkbox editors in grid.
     */
    private Boolean checkboxRefresh;

    /**
     * Enables/disables clipboard support.
     */
    private UnknownType clipboard;

    /**
     * Defines the default width for columns (in pixels).
     */
    private Integer columnWidth;

    /**
     * Field columns.
     */
    private java.util.List<UnknownType> columns;

    /**
     * An html container (or its id) where the component needs
     * initializing.
     */
    private UnknownType container;

    /**
     * The name of a css class that will be applied to the view
     * container.
     */
    private String css;

    /**
     * An inline dataset that data to the component will be load
     * from.
     */
    private UnknownType data;

    /**
     * The url to the data source that the component will use to
     * reload data from.
     */
    private UnknownType dataFeed;

    /**
     * Defines the start position DataTable will load data from.
     */
    private Integer datafetch;

    /**
     * Sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     */
    private UnknownType datathrottle;

    /**
     * The type of loaded data.
     */
    private String datatype;

    /**
     * Sets CSV delimiters for clipboard operations.
     */
    private UnknownType delimiter;

    /**
     * Disables item.
     */
    private Boolean disabled;

    /**
     * Enables or disables drag-and-drop.
     */
    private UnknownType drag;

    /**
     * Enables drag-and-drop support for columns.
     */
    private UnknownType dragColumn;

    /**
     * Enables autoscroll of component during drag-n-drop.
     */
    private UnknownType dragscroll;

    /**
     * Enables formular editing.
     */
    private Boolean editMath;

    /**
     * Defines which data item is editable (in case of several data
     * item in the cell/line).
     */
    private String editValue;

    /**
     * Allows/denies editing in the table.
     */
    private Boolean editable;

    /**
     * Defines the action on which editors will be opened.
     */
    private String editaction;

    /**
     * Allows defining custom 'move' logic for the component.
     */
    private UnknownType externalData;

    /**
     * Defines filtering rules in tree-like components.
     */
    private UnknownType filterMode;

    /**
     * Defines whether the height should be fixed for all rows or
     * can vary.
     */
    private Boolean fixedRowHeight;

    /**
     * Enables/disables the footer in DataTable (disabled, by
     * default).
     */
    private Boolean footer;

    /**
     * Linked form.
     */
    private String form;

    /**
     * Sets the view gravity (1 by default).
     */
    private Integer gravity;

    /**
     * Enables/disables the header in DataTable (enabled, by
     * default).
     */
    private Boolean header;

    /**
     * Sets the heigth of the header row.
     */
    private Integer headerRowHeight;

    /**
     * Adds a headermenu to control column visibility.
     */
    private UnknownType headermenu;

    /**
     * Sets the height of the component.
     */
    private Integer height;

    /**
     * Defines whether the view will be hidden initially.
     */
    private Boolean hidden;

    /**
     * The component ID.
     */
    private String id;

    /**
     * The number of the fixed columns from the left side of the
     * table (actual for the split mode ).
     */
    private Integer leftSplit;

    /**
     * Validation during cell editing.
     */
    private Boolean liveValidation;

    /**
     * Sets the number of items that will be loaded on each scroll
     * movement relative to the last item in the scrolling direction
     */
    private Integer loadahead;

    /**
     * Enables math formulas in DataTable.
     */
    private Boolean math;

    /**
     * Sets the maximum height for the view.
     */
    private Integer maxHeight;

    /**
     * Sets the maximum width for the view.
     */
    private Integer maxWidth;

    /**
     * Sets the minimum height for a row.
     */
    private Integer minColumnHeight;

    /**
     * Sets the minimum width for a column.
     */
    private Integer minColumnWidth;

    /**
     * Sets the minimal height for the view.
     */
    private Integer minHeight;

    /**
     * Sets the minimal width for the view.
     */
    private Integer minWidth;

    /**
     * The delay between a real mouse action and invoking the
     * related events.
     */
    private Integer mouseEventDelay;

    /**
     * Enables the multi selection mode.
     */
    private Boolean multiselect;

    /**
     * Activates the selection keyboard navigation.
     */
    private Boolean navigation;

    /**
     * Allows attaching custom handlers to inner events of the
     * component.
     */
    private UnknownType on;

    /**
     * Attaches a click behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onClick;

    /**
     * A property used to define custom context-click (right click)
     * handlers for elements in the DataTable cells
     * .
     */
    private UnknownType onContext;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onDblClick;

    /**
     * Attaches a dblclick behavior for component items with the
     * specified CSS class.
     */
    private UnknownType onMouseMove;

    /**
     * Defines paging configuration ( creates a 'ui.pager' object).
     */
    private UnknownType pager;

    /**
     * Invokes the full rendering of DataTable data.
     */
    private Boolean prerender;

    /**
     * A handler that is called just after the page has been
     * completely parsed.
     */
    private UnknownType ready;

    /**
     * Defines how to treat items in case of reloading.
     */
    private Boolean removeMissed;

    /**
     * Enables/disables horizontal resizing of columns.
     */
    private Boolean resizeColumn;

    /**
     * Enables/disables vertical resizing of rows.
     */
    private Boolean resizeRow;

    /**
     * Sets the number of the fixed columns from the right side of
     * the table (actual for the split mode ).
     */
    private Integer rightSplit;

    /**
     * Sets the default height for rows.
     */
    private Integer rowHeight;

    /**
     * Default line height for grid's row.
     */
    private UnknownType rowLineHeight;

    /**
     * Set of validation rules for the component.
     */
    private UnknownType rules;

    /**
     * Defines urls for datasaving.
     */
    private String save;

    /**
     * Defines schemes for data processing.
     */
    private UnknownType scheme;

    /**
     * Enables or disables scroll for the datatable.
     */
    private Boolean scroll;

    /**
     * Enables/disables scrolling the table just by whole rows
     * (i.e. you won't be allowed to scroll along the full length
     * of rows).
     */
    private Boolean scrollAlignY;

    /**
     * Enables/disables horizontal scrolling.
     */
    private Boolean scrollX;

    /**
     * Enables/disables vertical scrolling.
     */
    private Boolean scrollY;

    /**
     * Sets the selection mode in DataTable.
     */
    private UnknownType select;

    /**
     * Field spans.
     */
    private java.util.List<UnknownType> spans;

    /**
     * Sets a popup message appearing on pointing a mouse cursor
     * over the dedicated item.
     */
    private UnknownType tooltip;

    /**
     * Used for configuring presentation of items.
     */
    private UnknownType type;

    /**
     * The url of a data feed which will be loaded after component
     * initialization.
     */
    private String url;

    /**
     * Sets the width of the component.
     */
    private Integer width;

    /**
     * Defines height of datatable in rows.
     */
    private UnknownType yCount;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method addColumn.
     * 
     * @param unknownType
     */
    public void addColumn( UnknownType unknownType )
    {
        getColumns().add( unknownType );
    } //-- void addColumn( UnknownType )

    /**
     * Method addSpan.
     * 
     * @param unknownType
     */
    public void addSpan( UnknownType unknownType )
    {
        getSpans().add( unknownType );
    } //-- void addSpan( UnknownType )

    /**
     * Get defines or disables view change animation.
     * 
     * @return UnknownType
     */
    public UnknownType getAnimate()
    {
        return this.animate;
    } //-- UnknownType getAnimate()

    /**
     * Get enables/disables clipboard support.
     * 
     * @return UnknownType
     */
    public UnknownType getClipboard()
    {
        return this.clipboard;
    } //-- UnknownType getClipboard()

    /**
     * Get defines the default width for columns (in pixels).
     * 
     * @return Integer
     */
    public Integer getColumnWidth()
    {
        return this.columnWidth;
    } //-- Integer getColumnWidth()

    /**
     * Method getColumns.
     * 
     * @return List
     */
    public java.util.List<UnknownType> getColumns()
    {
        if ( this.columns == null )
        {
            this.columns = new java.util.ArrayList<UnknownType>();
        }

        return this.columns;
    } //-- java.util.List<UnknownType> getColumns()

    /**
     * Get an html container (or its id) where the component needs
     * initializing.
     * 
     * @return UnknownType
     */
    public UnknownType getContainer()
    {
        return this.container;
    } //-- UnknownType getContainer()

    /**
     * Get the name of a css class that will be applied to the view
     * container.
     * 
     * @return String
     */
    public String getCss()
    {
        return this.css;
    } //-- String getCss()

    /**
     * Get an inline dataset that data to the component will be
     * load from.
     * 
     * @return UnknownType
     */
    public UnknownType getData()
    {
        return this.data;
    } //-- UnknownType getData()

    /**
     * Get the url to the data source that the component will use
     * to reload data from.
     * 
     * @return UnknownType
     */
    public UnknownType getDataFeed()
    {
        return this.dataFeed;
    } //-- UnknownType getDataFeed()

    /**
     * Get defines the start position DataTable will load data
     * from.
     * 
     * @return Integer
     */
    public Integer getDatafetch()
    {
        return this.datafetch;
    } //-- Integer getDatafetch()

    /**
     * Get sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     * 
     * @return UnknownType
     */
    public UnknownType getDatathrottle()
    {
        return this.datathrottle;
    } //-- UnknownType getDatathrottle()

    /**
     * Get the type of loaded data.
     * 
     * @return String
     */
    public String getDatatype()
    {
        return this.datatype;
    } //-- String getDatatype()

    /**
     * Get sets CSV delimiters for clipboard operations.
     * 
     * @return UnknownType
     */
    public UnknownType getDelimiter()
    {
        return this.delimiter;
    } //-- UnknownType getDelimiter()

    /**
     * Get enables or disables drag-and-drop.
     * 
     * @return UnknownType
     */
    public UnknownType getDrag()
    {
        return this.drag;
    } //-- UnknownType getDrag()

    /**
     * Get enables drag-and-drop support for columns.
     * 
     * @return UnknownType
     */
    public UnknownType getDragColumn()
    {
        return this.dragColumn;
    } //-- UnknownType getDragColumn()

    /**
     * Get enables autoscroll of component during drag-n-drop.
     * 
     * @return UnknownType
     */
    public UnknownType getDragscroll()
    {
        return this.dragscroll;
    } //-- UnknownType getDragscroll()

    /**
     * Get defines which data item is editable (in case of several
     * data item in the cell/line).
     * 
     * @return String
     */
    public String getEditValue()
    {
        return this.editValue;
    } //-- String getEditValue()

    /**
     * Get defines the action on which editors will be opened.
     * 
     * @return String
     */
    public String getEditaction()
    {
        return this.editaction;
    } //-- String getEditaction()

    /**
     * Get allows defining custom 'move' logic for the component.
     * 
     * @return UnknownType
     */
    public UnknownType getExternalData()
    {
        return this.externalData;
    } //-- UnknownType getExternalData()

    /**
     * Get defines filtering rules in tree-like components.
     * 
     * @return UnknownType
     */
    public UnknownType getFilterMode()
    {
        return this.filterMode;
    } //-- UnknownType getFilterMode()

    /**
     * Get linked form.
     * 
     * @return String
     */
    public String getForm()
    {
        return this.form;
    } //-- String getForm()

    /**
     * Get sets the view gravity (1 by default).
     * 
     * @return Integer
     */
    public Integer getGravity()
    {
        return this.gravity;
    } //-- Integer getGravity()

    /**
     * Get sets the heigth of the header row.
     * 
     * @return Integer
     */
    public Integer getHeaderRowHeight()
    {
        return this.headerRowHeight;
    } //-- Integer getHeaderRowHeight()

    /**
     * Get adds a headermenu to control column visibility.
     * 
     * @return UnknownType
     */
    public UnknownType getHeadermenu()
    {
        return this.headermenu;
    } //-- UnknownType getHeadermenu()

    /**
     * Get sets the height of the component.
     * 
     * @return Integer
     */
    public Integer getHeight()
    {
        return this.height;
    } //-- Integer getHeight()

    /**
     * Get the component ID.
     * 
     * @return String
     */
    public String getId()
    {
        return this.id;
    } //-- String getId()

    /**
     * Get the number of the fixed columns from the left side of
     * the table (actual for the split mode ).
     * 
     * @return Integer
     */
    public Integer getLeftSplit()
    {
        return this.leftSplit;
    } //-- Integer getLeftSplit()

    /**
     * Get sets the number of items that will be loaded on each
     * scroll movement relative to the last item in the scrolling
     * direction.
     * 
     * @return Integer
     */
    public Integer getLoadahead()
    {
        return this.loadahead;
    } //-- Integer getLoadahead()

    /**
     * Get sets the maximum height for the view.
     * 
     * @return Integer
     */
    public Integer getMaxHeight()
    {
        return this.maxHeight;
    } //-- Integer getMaxHeight()

    /**
     * Get sets the maximum width for the view.
     * 
     * @return Integer
     */
    public Integer getMaxWidth()
    {
        return this.maxWidth;
    } //-- Integer getMaxWidth()

    /**
     * Get sets the minimum height for a row.
     * 
     * @return Integer
     */
    public Integer getMinColumnHeight()
    {
        return this.minColumnHeight;
    } //-- Integer getMinColumnHeight()

    /**
     * Get sets the minimum width for a column.
     * 
     * @return Integer
     */
    public Integer getMinColumnWidth()
    {
        return this.minColumnWidth;
    } //-- Integer getMinColumnWidth()

    /**
     * Get sets the minimal height for the view.
     * 
     * @return Integer
     */
    public Integer getMinHeight()
    {
        return this.minHeight;
    } //-- Integer getMinHeight()

    /**
     * Get sets the minimal width for the view.
     * 
     * @return Integer
     */
    public Integer getMinWidth()
    {
        return this.minWidth;
    } //-- Integer getMinWidth()

    /**
     * Get the delay between a real mouse action and invoking the
     * related events.
     * 
     * @return Integer
     */
    public Integer getMouseEventDelay()
    {
        return this.mouseEventDelay;
    } //-- Integer getMouseEventDelay()

    /**
     * Get allows attaching custom handlers to inner events of the
     * component.
     * 
     * @return UnknownType
     */
    public UnknownType getOn()
    {
        return this.on;
    } //-- UnknownType getOn()

    /**
     * Get attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnClick()
    {
        return this.onClick;
    } //-- UnknownType getOnClick()

    /**
     * Get a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @return UnknownType
     */
    public UnknownType getOnContext()
    {
        return this.onContext;
    } //-- UnknownType getOnContext()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnDblClick()
    {
        return this.onDblClick;
    } //-- UnknownType getOnDblClick()

    /**
     * Get attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @return UnknownType
     */
    public UnknownType getOnMouseMove()
    {
        return this.onMouseMove;
    } //-- UnknownType getOnMouseMove()

    /**
     * Get defines paging configuration ( creates a 'ui.pager'
     * object).
     * 
     * @return UnknownType
     */
    public UnknownType getPager()
    {
        return this.pager;
    } //-- UnknownType getPager()

    /**
     * Get a handler that is called just after the page has been
     * completely parsed.
     * 
     * @return UnknownType
     */
    public UnknownType getReady()
    {
        return this.ready;
    } //-- UnknownType getReady()

    /**
     * Get sets the number of the fixed columns from the right side
     * of the table (actual for the split mode ).
     * 
     * @return Integer
     */
    public Integer getRightSplit()
    {
        return this.rightSplit;
    } //-- Integer getRightSplit()

    /**
     * Get sets the default height for rows.
     * 
     * @return Integer
     */
    public Integer getRowHeight()
    {
        return this.rowHeight;
    } //-- Integer getRowHeight()

    /**
     * Get default line height for grid's row.
     * 
     * @return UnknownType
     */
    public UnknownType getRowLineHeight()
    {
        return this.rowLineHeight;
    } //-- UnknownType getRowLineHeight()

    /**
     * Get set of validation rules for the component.
     * 
     * @return UnknownType
     */
    public UnknownType getRules()
    {
        return this.rules;
    } //-- UnknownType getRules()

    /**
     * Get defines urls for datasaving.
     * 
     * @return String
     */
    public String getSave()
    {
        return this.save;
    } //-- String getSave()

    /**
     * Get defines schemes for data processing.
     * 
     * @return UnknownType
     */
    public UnknownType getScheme()
    {
        return this.scheme;
    } //-- UnknownType getScheme()

    /**
     * Get sets the selection mode in DataTable.
     * 
     * @return UnknownType
     */
    public UnknownType getSelect()
    {
        return this.select;
    } //-- UnknownType getSelect()

    /**
     * Method getSpans.
     * 
     * @return List
     */
    public java.util.List<UnknownType> getSpans()
    {
        if ( this.spans == null )
        {
            this.spans = new java.util.ArrayList<UnknownType>();
        }

        return this.spans;
    } //-- java.util.List<UnknownType> getSpans()

    /**
     * Get sets a popup message appearing on pointing a mouse
     * cursor over the dedicated item.
     * 
     * @return UnknownType
     */
    public UnknownType getTooltip()
    {
        return this.tooltip;
    } //-- UnknownType getTooltip()

    /**
     * Get used for configuring presentation of items.
     * 
     * @return UnknownType
     */
    public UnknownType getType()
    {
        return this.type;
    } //-- UnknownType getType()

    /**
     * Get the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @return String
     */
    public String getUrl()
    {
        return this.url;
    } //-- String getUrl()

    /**
     * Get sets the width of the component.
     * 
     * @return Integer
     */
    public Integer getWidth()
    {
        return this.width;
    } //-- Integer getWidth()

    /**
     * Get defines height of datatable in rows.
     * 
     * @return UnknownType
     */
    public UnknownType getYCount()
    {
        return this.yCount;
    } //-- UnknownType getYCount()

    /**
     * Get datatable adjust configuration to the data.
     * 
     * @return Boolean
     */
    public Boolean isAutoConfig()
    {
        return this.autoConfig;
    } //-- Boolean isAutoConfig()

    /**
     * Get adjusts DataTable to the parent container size
     * vertically.
     * 
     * @return Boolean
     */
    public Boolean isAutoheight()
    {
        return this.autoheight;
    } //-- Boolean isAutoheight()

    /**
     * Get adjusts DataTable to the parent container size
     * horizontally.
     * 
     * @return Boolean
     */
    public Boolean isAutowidth()
    {
        return this.autowidth;
    } //-- Boolean isAutowidth()

    /**
     * Get enables/disables block selection.
     * 
     * @return Boolean
     */
    public Boolean isBlockselect()
    {
        return this.blockselect;
    } //-- Boolean isBlockselect()

    /**
     * Get used to hide the component borders.
     * 
     * @return Boolean
     */
    public Boolean isBorderless()
    {
        return this.borderless;
    } //-- Boolean isBorderless()

    /**
     * Get controls behavior of checkbox editors in grid.
     * 
     * @return Boolean
     */
    public Boolean isCheckboxRefresh()
    {
        return this.checkboxRefresh;
    } //-- Boolean isCheckboxRefresh()

    /**
     * Get disables item.
     * 
     * @return Boolean
     */
    public Boolean isDisabled()
    {
        return this.disabled;
    } //-- Boolean isDisabled()

    /**
     * Get enables formular editing.
     * 
     * @return Boolean
     */
    public Boolean isEditMath()
    {
        return this.editMath;
    } //-- Boolean isEditMath()

    /**
     * Get allows/denies editing in the table.
     * 
     * @return Boolean
     */
    public Boolean isEditable()
    {
        return this.editable;
    } //-- Boolean isEditable()

    /**
     * Get defines whether the height should be fixed for all rows
     * or can vary.
     * 
     * @return Boolean
     */
    public Boolean isFixedRowHeight()
    {
        return this.fixedRowHeight;
    } //-- Boolean isFixedRowHeight()

    /**
     * Get enables/disables the footer in DataTable (disabled, by
     * default).
     * 
     * @return Boolean
     */
    public Boolean isFooter()
    {
        return this.footer;
    } //-- Boolean isFooter()

    /**
     * Get enables/disables the header in DataTable (enabled, by
     * default).
     * 
     * @return Boolean
     */
    public Boolean isHeader()
    {
        return this.header;
    } //-- Boolean isHeader()

    /**
     * Get defines whether the view will be hidden initially.
     * 
     * @return Boolean
     */
    public Boolean isHidden()
    {
        return this.hidden;
    } //-- Boolean isHidden()

    /**
     * Get validation during cell editing.
     * 
     * @return Boolean
     */
    public Boolean isLiveValidation()
    {
        return this.liveValidation;
    } //-- Boolean isLiveValidation()

    /**
     * Get enables math formulas in DataTable.
     * 
     * @return Boolean
     */
    public Boolean isMath()
    {
        return this.math;
    } //-- Boolean isMath()

    /**
     * Get enables the multi selection mode.
     * 
     * @return Boolean
     */
    public Boolean isMultiselect()
    {
        return this.multiselect;
    } //-- Boolean isMultiselect()

    /**
     * Get activates the selection keyboard navigation.
     * 
     * @return Boolean
     */
    public Boolean isNavigation()
    {
        return this.navigation;
    } //-- Boolean isNavigation()

    /**
     * Get invokes the full rendering of DataTable data.
     * 
     * @return Boolean
     */
    public Boolean isPrerender()
    {
        return this.prerender;
    } //-- Boolean isPrerender()

    /**
     * Get defines how to treat items in case of reloading.
     * 
     * @return Boolean
     */
    public Boolean isRemoveMissed()
    {
        return this.removeMissed;
    } //-- Boolean isRemoveMissed()

    /**
     * Get enables/disables horizontal resizing of columns.
     * 
     * @return Boolean
     */
    public Boolean isResizeColumn()
    {
        return this.resizeColumn;
    } //-- Boolean isResizeColumn()

    /**
     * Get enables/disables vertical resizing of rows.
     * 
     * @return Boolean
     */
    public Boolean isResizeRow()
    {
        return this.resizeRow;
    } //-- Boolean isResizeRow()

    /**
     * Get enables or disables scroll for the datatable.
     * 
     * @return Boolean
     */
    public Boolean isScroll()
    {
        return this.scroll;
    } //-- Boolean isScroll()

    /**
     * Get enables/disables scrolling the table just by whole rows
     * (i.e. you won't be allowed to scroll along the full length
     * of rows).
     * 
     * @return Boolean
     */
    public Boolean isScrollAlignY()
    {
        return this.scrollAlignY;
    } //-- Boolean isScrollAlignY()

    /**
     * Get enables/disables horizontal scrolling.
     * 
     * @return Boolean
     */
    public Boolean isScrollX()
    {
        return this.scrollX;
    } //-- Boolean isScrollX()

    /**
     * Get enables/disables vertical scrolling.
     * 
     * @return Boolean
     */
    public Boolean isScrollY()
    {
        return this.scrollY;
    } //-- Boolean isScrollY()

    /**
     * Method removeColumn.
     * 
     * @param unknownType
     */
    public void removeColumn( UnknownType unknownType )
    {
        getColumns().remove( unknownType );
    } //-- void removeColumn( UnknownType )

    /**
     * Method removeSpan.
     * 
     * @param unknownType
     */
    public void removeSpan( UnknownType unknownType )
    {
        getSpans().remove( unknownType );
    } //-- void removeSpan( UnknownType )

    /**
     * Set defines or disables view change animation.
     * 
     * @param animate
     */
    public void setAnimate( UnknownType animate )
    {
        this.animate = animate;
    } //-- void setAnimate( UnknownType )

    /**
     * Set datatable adjust configuration to the data.
     * 
     * @param autoConfig
     */
    public void setAutoConfig( Boolean autoConfig )
    {
        this.autoConfig = autoConfig;
    } //-- void setAutoConfig( Boolean )

    /**
     * Set adjusts DataTable to the parent container size
     * vertically.
     * 
     * @param autoheight
     */
    public void setAutoheight( Boolean autoheight )
    {
        this.autoheight = autoheight;
    } //-- void setAutoheight( Boolean )

    /**
     * Set adjusts DataTable to the parent container size
     * horizontally.
     * 
     * @param autowidth
     */
    public void setAutowidth( Boolean autowidth )
    {
        this.autowidth = autowidth;
    } //-- void setAutowidth( Boolean )

    /**
     * Set enables/disables block selection.
     * 
     * @param blockselect
     */
    public void setBlockselect( Boolean blockselect )
    {
        this.blockselect = blockselect;
    } //-- void setBlockselect( Boolean )

    /**
     * Set used to hide the component borders.
     * 
     * @param borderless
     */
    public void setBorderless( Boolean borderless )
    {
        this.borderless = borderless;
    } //-- void setBorderless( Boolean )

    /**
     * Set controls behavior of checkbox editors in grid.
     * 
     * @param checkboxRefresh
     */
    public void setCheckboxRefresh( Boolean checkboxRefresh )
    {
        this.checkboxRefresh = checkboxRefresh;
    } //-- void setCheckboxRefresh( Boolean )

    /**
     * Set enables/disables clipboard support.
     * 
     * @param clipboard
     */
    public void setClipboard( UnknownType clipboard )
    {
        this.clipboard = clipboard;
    } //-- void setClipboard( UnknownType )

    /**
     * Set defines the default width for columns (in pixels).
     * 
     * @param columnWidth
     */
    public void setColumnWidth( Integer columnWidth )
    {
        this.columnWidth = columnWidth;
    } //-- void setColumnWidth( Integer )

    /**
     * Set configures columns of the table.
     * 
     * @param columns
     */
    public void setColumns( java.util.List<UnknownType> columns )
    {
        this.columns = columns;
    } //-- void setColumns( java.util.List )

    /**
     * Set an html container (or its id) where the component needs
     * initializing.
     * 
     * @param container
     */
    public void setContainer( UnknownType container )
    {
        this.container = container;
    } //-- void setContainer( UnknownType )

    /**
     * Set the name of a css class that will be applied to the view
     * container.
     * 
     * @param css
     */
    public void setCss( String css )
    {
        this.css = css;
    } //-- void setCss( String )

    /**
     * Set an inline dataset that data to the component will be
     * load from.
     * 
     * @param data
     */
    public void setData( UnknownType data )
    {
        this.data = data;
    } //-- void setData( UnknownType )

    /**
     * Set the url to the data source that the component will use
     * to reload data from.
     * 
     * @param dataFeed
     */
    public void setDataFeed( UnknownType dataFeed )
    {
        this.dataFeed = dataFeed;
    } //-- void setDataFeed( UnknownType )

    /**
     * Set defines the start position DataTable will load data
     * from.
     * 
     * @param datafetch
     */
    public void setDatafetch( Integer datafetch )
    {
        this.datafetch = datafetch;
    } //-- void setDatafetch( Integer )

    /**
     * Set sets the polling interval (the time period between the
     * completion of a network request and the next request for
     * data).
     * 
     * @param datathrottle
     */
    public void setDatathrottle( UnknownType datathrottle )
    {
        this.datathrottle = datathrottle;
    } //-- void setDatathrottle( UnknownType )

    /**
     * Set the type of loaded data.
     * 
     * @param datatype
     */
    public void setDatatype( String datatype )
    {
        this.datatype = datatype;
    } //-- void setDatatype( String )

    /**
     * Set sets CSV delimiters for clipboard operations.
     * 
     * @param delimiter
     */
    public void setDelimiter( UnknownType delimiter )
    {
        this.delimiter = delimiter;
    } //-- void setDelimiter( UnknownType )

    /**
     * Set disables item.
     * 
     * @param disabled
     */
    public void setDisabled( Boolean disabled )
    {
        this.disabled = disabled;
    } //-- void setDisabled( Boolean )

    /**
     * Set enables or disables drag-and-drop.
     * 
     * @param drag
     */
    public void setDrag( UnknownType drag )
    {
        this.drag = drag;
    } //-- void setDrag( UnknownType )

    /**
     * Set enables drag-and-drop support for columns.
     * 
     * @param dragColumn
     */
    public void setDragColumn( UnknownType dragColumn )
    {
        this.dragColumn = dragColumn;
    } //-- void setDragColumn( UnknownType )

    /**
     * Set enables autoscroll of component during drag-n-drop.
     * 
     * @param dragscroll
     */
    public void setDragscroll( UnknownType dragscroll )
    {
        this.dragscroll = dragscroll;
    } //-- void setDragscroll( UnknownType )

    /**
     * Set enables formular editing.
     * 
     * @param editMath
     */
    public void setEditMath( Boolean editMath )
    {
        this.editMath = editMath;
    } //-- void setEditMath( Boolean )

    /**
     * Set defines which data item is editable (in case of several
     * data item in the cell/line).
     * 
     * @param editValue
     */
    public void setEditValue( String editValue )
    {
        this.editValue = editValue;
    } //-- void setEditValue( String )

    /**
     * Set allows/denies editing in the table.
     * 
     * @param editable
     */
    public void setEditable( Boolean editable )
    {
        this.editable = editable;
    } //-- void setEditable( Boolean )

    /**
     * Set defines the action on which editors will be opened.
     * 
     * @param editaction
     */
    public void setEditaction( String editaction )
    {
        this.editaction = editaction;
    } //-- void setEditaction( String )

    /**
     * Set allows defining custom 'move' logic for the component.
     * 
     * @param externalData
     */
    public void setExternalData( UnknownType externalData )
    {
        this.externalData = externalData;
    } //-- void setExternalData( UnknownType )

    /**
     * Set defines filtering rules in tree-like components.
     * 
     * @param filterMode
     */
    public void setFilterMode( UnknownType filterMode )
    {
        this.filterMode = filterMode;
    } //-- void setFilterMode( UnknownType )

    /**
     * Set defines whether the height should be fixed for all rows
     * or can vary.
     * 
     * @param fixedRowHeight
     */
    public void setFixedRowHeight( Boolean fixedRowHeight )
    {
        this.fixedRowHeight = fixedRowHeight;
    } //-- void setFixedRowHeight( Boolean )

    /**
     * Set enables/disables the footer in DataTable (disabled, by
     * default).
     * 
     * @param footer
     */
    public void setFooter( Boolean footer )
    {
        this.footer = footer;
    } //-- void setFooter( Boolean )

    /**
     * Set linked form.
     * 
     * @param form
     */
    public void setForm( String form )
    {
        this.form = form;
    } //-- void setForm( String )

    /**
     * Set sets the view gravity (1 by default).
     * 
     * @param gravity
     */
    public void setGravity( Integer gravity )
    {
        this.gravity = gravity;
    } //-- void setGravity( Integer )

    /**
     * Set enables/disables the header in DataTable (enabled, by
     * default).
     * 
     * @param header
     */
    public void setHeader( Boolean header )
    {
        this.header = header;
    } //-- void setHeader( Boolean )

    /**
     * Set sets the heigth of the header row.
     * 
     * @param headerRowHeight
     */
    public void setHeaderRowHeight( Integer headerRowHeight )
    {
        this.headerRowHeight = headerRowHeight;
    } //-- void setHeaderRowHeight( Integer )

    /**
     * Set adds a headermenu to control column visibility.
     * 
     * @param headermenu
     */
    public void setHeadermenu( UnknownType headermenu )
    {
        this.headermenu = headermenu;
    } //-- void setHeadermenu( UnknownType )

    /**
     * Set sets the height of the component.
     * 
     * @param height
     */
    public void setHeight( Integer height )
    {
        this.height = height;
    } //-- void setHeight( Integer )

    /**
     * Set defines whether the view will be hidden initially.
     * 
     * @param hidden
     */
    public void setHidden( Boolean hidden )
    {
        this.hidden = hidden;
    } //-- void setHidden( Boolean )

    /**
     * Set the component ID.
     * 
     * @param id
     */
    public void setId( String id )
    {
        this.id = id;
    } //-- void setId( String )

    /**
     * Set the number of the fixed columns from the left side of
     * the table (actual for the split mode ).
     * 
     * @param leftSplit
     */
    public void setLeftSplit( Integer leftSplit )
    {
        this.leftSplit = leftSplit;
    } //-- void setLeftSplit( Integer )

    /**
     * Set validation during cell editing.
     * 
     * @param liveValidation
     */
    public void setLiveValidation( Boolean liveValidation )
    {
        this.liveValidation = liveValidation;
    } //-- void setLiveValidation( Boolean )

    /**
     * Set sets the number of items that will be loaded on each
     * scroll movement relative to the last item in the scrolling
     * direction.
     * 
     * @param loadahead
     */
    public void setLoadahead( Integer loadahead )
    {
        this.loadahead = loadahead;
    } //-- void setLoadahead( Integer )

    /**
     * Set enables math formulas in DataTable.
     * 
     * @param math
     */
    public void setMath( Boolean math )
    {
        this.math = math;
    } //-- void setMath( Boolean )

    /**
     * Set sets the maximum height for the view.
     * 
     * @param maxHeight
     */
    public void setMaxHeight( Integer maxHeight )
    {
        this.maxHeight = maxHeight;
    } //-- void setMaxHeight( Integer )

    /**
     * Set sets the maximum width for the view.
     * 
     * @param maxWidth
     */
    public void setMaxWidth( Integer maxWidth )
    {
        this.maxWidth = maxWidth;
    } //-- void setMaxWidth( Integer )

    /**
     * Set sets the minimum height for a row.
     * 
     * @param minColumnHeight
     */
    public void setMinColumnHeight( Integer minColumnHeight )
    {
        this.minColumnHeight = minColumnHeight;
    } //-- void setMinColumnHeight( Integer )

    /**
     * Set sets the minimum width for a column.
     * 
     * @param minColumnWidth
     */
    public void setMinColumnWidth( Integer minColumnWidth )
    {
        this.minColumnWidth = minColumnWidth;
    } //-- void setMinColumnWidth( Integer )

    /**
     * Set sets the minimal height for the view.
     * 
     * @param minHeight
     */
    public void setMinHeight( Integer minHeight )
    {
        this.minHeight = minHeight;
    } //-- void setMinHeight( Integer )

    /**
     * Set sets the minimal width for the view.
     * 
     * @param minWidth
     */
    public void setMinWidth( Integer minWidth )
    {
        this.minWidth = minWidth;
    } //-- void setMinWidth( Integer )

    /**
     * Set the delay between a real mouse action and invoking the
     * related events.
     * 
     * @param mouseEventDelay
     */
    public void setMouseEventDelay( Integer mouseEventDelay )
    {
        this.mouseEventDelay = mouseEventDelay;
    } //-- void setMouseEventDelay( Integer )

    /**
     * Set enables the multi selection mode.
     * 
     * @param multiselect
     */
    public void setMultiselect( Boolean multiselect )
    {
        this.multiselect = multiselect;
    } //-- void setMultiselect( Boolean )

    /**
     * Set activates the selection keyboard navigation.
     * 
     * @param navigation
     */
    public void setNavigation( Boolean navigation )
    {
        this.navigation = navigation;
    } //-- void setNavigation( Boolean )

    /**
     * Set allows attaching custom handlers to inner events of the
     * component.
     * 
     * @param on
     */
    public void setOn( UnknownType on )
    {
        this.on = on;
    } //-- void setOn( UnknownType )

    /**
     * Set attaches a click behavior for component items with the
     * specified CSS class.
     * 
     * @param onClick
     */
    public void setOnClick( UnknownType onClick )
    {
        this.onClick = onClick;
    } //-- void setOnClick( UnknownType )

    /**
     * Set a property used to define custom context-click (right
     * click) handlers for elements in the DataTable cells.
     * 
     * @param onContext
     */
    public void setOnContext( UnknownType onContext )
    {
        this.onContext = onContext;
    } //-- void setOnContext( UnknownType )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onDblClick
     */
    public void setOnDblClick( UnknownType onDblClick )
    {
        this.onDblClick = onDblClick;
    } //-- void setOnDblClick( UnknownType )

    /**
     * Set attaches a dblclick behavior for component items with
     * the specified CSS class.
     * 
     * @param onMouseMove
     */
    public void setOnMouseMove( UnknownType onMouseMove )
    {
        this.onMouseMove = onMouseMove;
    } //-- void setOnMouseMove( UnknownType )

    /**
     * Set defines paging configuration ( creates a 'ui.pager'
     * object).
     * 
     * @param pager
     */
    public void setPager( UnknownType pager )
    {
        this.pager = pager;
    } //-- void setPager( UnknownType )

    /**
     * Set invokes the full rendering of DataTable data.
     * 
     * @param prerender
     */
    public void setPrerender( Boolean prerender )
    {
        this.prerender = prerender;
    } //-- void setPrerender( Boolean )

    /**
     * Set a handler that is called just after the page has been
     * completely parsed.
     * 
     * @param ready
     */
    public void setReady( UnknownType ready )
    {
        this.ready = ready;
    } //-- void setReady( UnknownType )

    /**
     * Set defines how to treat items in case of reloading.
     * 
     * @param removeMissed
     */
    public void setRemoveMissed( Boolean removeMissed )
    {
        this.removeMissed = removeMissed;
    } //-- void setRemoveMissed( Boolean )

    /**
     * Set enables/disables horizontal resizing of columns.
     * 
     * @param resizeColumn
     */
    public void setResizeColumn( Boolean resizeColumn )
    {
        this.resizeColumn = resizeColumn;
    } //-- void setResizeColumn( Boolean )

    /**
     * Set enables/disables vertical resizing of rows.
     * 
     * @param resizeRow
     */
    public void setResizeRow( Boolean resizeRow )
    {
        this.resizeRow = resizeRow;
    } //-- void setResizeRow( Boolean )

    /**
     * Set sets the number of the fixed columns from the right side
     * of the table (actual for the split mode ).
     * 
     * @param rightSplit
     */
    public void setRightSplit( Integer rightSplit )
    {
        this.rightSplit = rightSplit;
    } //-- void setRightSplit( Integer )

    /**
     * Set sets the default height for rows.
     * 
     * @param rowHeight
     */
    public void setRowHeight( Integer rowHeight )
    {
        this.rowHeight = rowHeight;
    } //-- void setRowHeight( Integer )

    /**
     * Set default line height for grid's row.
     * 
     * @param rowLineHeight
     */
    public void setRowLineHeight( UnknownType rowLineHeight )
    {
        this.rowLineHeight = rowLineHeight;
    } //-- void setRowLineHeight( UnknownType )

    /**
     * Set set of validation rules for the component.
     * 
     * @param rules
     */
    public void setRules( UnknownType rules )
    {
        this.rules = rules;
    } //-- void setRules( UnknownType )

    /**
     * Set defines urls for datasaving.
     * 
     * @param save
     */
    public void setSave( String save )
    {
        this.save = save;
    } //-- void setSave( String )

    /**
     * Set defines schemes for data processing.
     * 
     * @param scheme
     */
    public void setScheme( UnknownType scheme )
    {
        this.scheme = scheme;
    } //-- void setScheme( UnknownType )

    /**
     * Set enables or disables scroll for the datatable.
     * 
     * @param scroll
     */
    public void setScroll( Boolean scroll )
    {
        this.scroll = scroll;
    } //-- void setScroll( Boolean )

    /**
     * Set enables/disables scrolling the table just by whole rows
     * (i.e. you won't be allowed to scroll along the full length
     * of rows).
     * 
     * @param scrollAlignY
     */
    public void setScrollAlignY( Boolean scrollAlignY )
    {
        this.scrollAlignY = scrollAlignY;
    } //-- void setScrollAlignY( Boolean )

    /**
     * Set enables/disables horizontal scrolling.
     * 
     * @param scrollX
     */
    public void setScrollX( Boolean scrollX )
    {
        this.scrollX = scrollX;
    } //-- void setScrollX( Boolean )

    /**
     * Set enables/disables vertical scrolling.
     * 
     * @param scrollY
     */
    public void setScrollY( Boolean scrollY )
    {
        this.scrollY = scrollY;
    } //-- void setScrollY( Boolean )

    /**
     * Set sets the selection mode in DataTable.
     * 
     * @param select
     */
    public void setSelect( UnknownType select )
    {
        this.select = select;
    } //-- void setSelect( UnknownType )

    /**
     * Set array of span configurations for the datatable.
     * 
     * @param spans
     */
    public void setSpans( java.util.List<UnknownType> spans )
    {
        this.spans = spans;
    } //-- void setSpans( java.util.List )

    /**
     * Set sets a popup message appearing on pointing a mouse
     * cursor over the dedicated item.
     * 
     * @param tooltip
     */
    public void setTooltip( UnknownType tooltip )
    {
        this.tooltip = tooltip;
    } //-- void setTooltip( UnknownType )

    /**
     * Set used for configuring presentation of items.
     * 
     * @param type
     */
    public void setType( UnknownType type )
    {
        this.type = type;
    } //-- void setType( UnknownType )

    /**
     * Set the url of a data feed which will be loaded after
     * component initialization.
     * 
     * @param url
     */
    public void setUrl( String url )
    {
        this.url = url;
    } //-- void setUrl( String )

    /**
     * Set sets the width of the component.
     * 
     * @param width
     */
    public void setWidth( Integer width )
    {
        this.width = width;
    } //-- void setWidth( Integer )

    /**
     * Set defines height of datatable in rows.
     * 
     * @param yCount
     */
    public void setYCount( UnknownType yCount )
    {
        this.yCount = yCount;
    } //-- void setYCount( UnknownType )

    /**
     * Adds an item to the store
     */
    public Byte add() {
        return null;
    }
    /**
     * Adds a css class to the cell
     */
    public void addCellCss() {
        return;
    }
    /**
     * Applied CSS class to a component item
     */
    public void addCss() {
        return;
    }
    /**
     * Adds a css class to the row
     */
    public void addRowCss() {
        return;
    }
    /**
     * Adds colspan or rowspan to the datatable
     */
    public void addSpan() {
        return;
    }
    /**
     * Adjusts the component to the size of the parent HTML container
     */
    public void adjust() {
        return;
    }
    /**
     * Adjusts a column to the width of the content
     */
    public Boolean adjustColumn() {
        return null;
    }
    /**
     * Autodetect height of rows in datatable
     */
    public void adjustRowHeight() {
        return;
    }
    /**
     * Attaches the handler to an inner event of the component (allows behaviour customizations)
     */
    public Byte attachEvent() {
        return null;
    }
    /**
     * Binds components
     */
    public void bind() {
        return;
    }
    /**
     * Temporarily blocks triggering of ALL events of the calling object
     */
    public void blockEvent() {
        return;
    }
    /**
     * Calls an inner event
     */
    public Boolean callEvent() {
        return null;
    }
    /**
     * Removes all items from the component
     */
    public void clearAll() {
        return;
    }
    /**
     * Removes css class from all items
     */
    public void clearCss() {
        return;
    }
    /**
     * Clears selection
     */
    public void clearSelection() {
        return;
    }
    /**
     * Removes all validation marks from the component
     */
    public void clearValidation() {
        return;
    }
    /**
     * Returns an array of unique values of the specified column
     */
    public Byte collectValues() {
        return null;
    }
    /**
     * Returns the id of the column at the specified index
     */
    public Byte columnId() {
        return null;
    }
    /**
     * Copies an item to the same or another object
     */
    public void copy() {
        return;
    }
    /**
     * Returns the count of items in the table
     */
    public Integer count() {
        return null;
    }
    /**
     * Redefines a single configuration property (or a hash of properties)
     */
    public void define() {
        return;
    }
    /**
     * Destructs the calling object
     */
    public void destructor() {
        return;
    }
    /**
     * Detaches a handler from an event (which was attached before by the attachEvent method)
     */
    public void detachEvent() {
        return;
    }
    /**
     * Disables the calling view (makes it dimmed and unclickable)
     */
    public void disable() {
        return;
    }
    /**
     * Iterates over all visible columns in the table
     */
    public void eachColumn() {
        return;
    }
    /**
     * Iterates over all rows in the table
     */
    public void eachRow() {
        return;
    }
    /**
     * Enables the edit mode for the specified item
     */
    public void edit() {
        return;
    }
    /**
     * Cancels the edit mode and closes all opened editors. The table is still editable
     */
    public void editCancel() {
        return;
    }
    /**
     * Enables the edit mode for the specified cell
     */
    public void editCell() {
        return;
    }
    /**
     * Enables the edit mode for the specified column
     */
    public void editColumn() {
        return;
    }
    /**
     * Closes the current editor and opens one in the next cell of the row
     */
    public Boolean editNext() {
        return null;
    }
    /**
     * Enables the edit mode for the specified row
     */
    public void editRow() {
        return;
    }
    /**
     * Stops the edit mode and closes all opened editors. The table is still editable
     */
    public void editStop() {
        return;
    }
    /**
     * Enables the calling view that was disabled by the 'disable' method
     */
    public void enable() {
        return;
    }
    /**
     * Checks whether an item with the specified id exists
     */
    public Boolean exists() {
        return null;
    }
    /**
     * Exports data to an Excel file
     */
    public void exportToExcel() {
        return;
    }
    /**
     * Exports data to a PDF file
     */
    public void exportToPDF() {
        return;
    }
    /**
     * Filters the component
     */
    public void filter() {
        return;
    }
    /**
     * Refilters DataTable by all specified filters
     */
    public void filterByAll() {
        return;
    }
    /**
     * Returns rows that match the criterion
     */
    public Byte find() {
        return null;
    }
    /**
     * Moves focus to the active editor
     */
    public void focusEditor() {
        return;
    }
    /**
     * Returns child views of the calling component
     */
    public Byte getChildViews() {
        return null;
    }
    /**
     * Returns the configuration object of the specified column
     */
    public Byte getColumnConfig() {
        return null;
    }
    /**
     * Returns the index of the column with the specified id
     */
    public Integer getColumnIndex() {
        return null;
    }
    /**
     * Returns info about active editor object
     */
    public Byte getEditState() {
        return null;
    }
    /**
     * Returns editor object
     */
    public Byte getEditor() {
        return null;
    }
    /**
     * Returns the value of the active (currently open) editor
     */
    public String getEditorValue() {
        return null;
    }
    /**
     * Returns the filter object that the component uses to filter the values of the specified column
     */
    public Byte getFilter() {
        return null;
    }
    /**
     * Gets the ID of the first row
     */
    public Byte getFirstId() {
        return null;
    }
    /**
     * Returns master form for the input
     */
    public Byte getFormView() {
        return null;
    }
    /**
     * Returns set of helpers for header content manipulation
     */
    public Byte getHeaderContent() {
        return null;
    }
    /**
     * Returns HTML element of the column's header
     */
    public Byte getHeaderNode() {
        return null;
    }
    /**
     * Returns the id of the item with the specified index
     */
    public Byte getIdByIndex() {
        return null;
    }
    /**
     * Returns the index of the item with the specified id
     */
    public Integer getIndexById() {
        return null;
    }
    /**
     * Gets the object of the data item with the specified id
     */
    public Byte getItem() {
        return null;
    }
    /**
     * Returns html element of the item
     */
    public void getItemNode() {
        return;
    }
    /**
     * Returns the id of the last row
     */
    public Byte getLastId() {
        return null;
    }
    /**
     * Returns the ID of an item which is positioned the specified step after the specified item
     */
    public Byte getNextId() {
        return null;
    }
    /**
     * Returns the main HTML container for the calling object
     */
    public Byte getNode() {
        return null;
    }
    /**
     * Returns the currently visible page in case of paged view
     */
    public Integer getPage() {
        return null;
    }
    /**
     * Returns the parent object of the calling element. Used while integrating with Webix Touch
     */
    public Byte getParentView() {
        return null;
    }
    /**
     * Returns the ID of an item which is positioned the specified step before the specified item
     */
    public Byte getPrevId() {
        return null;
    }
    /**
     * Returns the current position of scrolls
     */
    public Byte getScrollState() {
        return null;
    }
    /**
     * Returns the selected cells
     */
    public Byte getSelectedId() {
        return null;
    }
    /**
     * Gets an object of the selected data item
     */
    public void getSelectedItem() {
        return;
    }
    /**
     * Returns the current state of the table
     */
    public Byte getState() {
        return null;
    }
    /**
     * Returns text value of a cell
     */
    public String getText() {
        return null;
    }
    /**
     * Returns top parent view
     */
    public Byte getTopParentView() {
        return null;
    }
    /**
     * Returns count of visible rows
     */
    public Integer getVisibleCount() {
        return null;
    }
    /**
     * Groups data by the specified data property
     */
    public void group() {
        return;
    }
    /**
     * Checks if item has specific css class
     */
    public Boolean hasCss() {
        return null;
    }
    /**
     * Checks whether the component has the specified event
     */
    public Boolean hasEvent() {
        return null;
    }
    /**
     * Hides view. Used while integrating with Webix Touch
     */
    public void hide() {
        return;
    }
    /**
     * Hides the specified column
     */
    public void hideColumn() {
        return;
    }
    /**
     * Hides previously defined overlay
     */
    public void hideOverlay() {
        return;
    }
    /**
     * Returns true if column is visible
     */
    public Boolean isColumnVisible() {
        return null;
    }
    /**
     * Checks whether the view is enabled
     */
    public Boolean isEnabled() {
        return null;
    }
    /**
     * Checks whether the view is visible
     */
    public Boolean isVisible() {
        return null;
    }
    /**
     * Loads data from an external data source
     */
    public Byte load() {
        return null;
    }
    /**
     * Sends a request to load the specified number of records to the end or to the specified position
     */
    public void loadNext() {
        return;
    }
    /**
     * Converts an HTML node or event object to in-table position
     */
    public Byte locate() {
        return null;
    }
    /**
     * Applies the callback to a range of cells
     */
    public void mapCells() {
        return;
    }
    /**
     * Routes events from one object to another
     */
    public void mapEvent() {
        return;
    }
    /**
     * Executes some custom method for all cells in the currently selected block
     */
    public void mapSelection() {
        return;
    }
    /**
     * Marks the sorted column with a dedicated sign (asc/desc) in the header
     */
    public void markSorting() {
        return;
    }
    /**
     * Moves the specified item to a new position
     */
    public String move() {
        return null;
    }
    /**
     * Moves the specified item to the last position
     */
    public void moveBottom() {
        return;
    }
    /**
     * Moves column to different position
     */
    public void moveColumn() {
        return;
    }
    /**
     * Increases the item index and moves the item to the new position
     */
    public void moveDown() {
        return;
    }
    /**
     * Moves selection in the specified direction
     */
    public void moveSelection() {
        return;
    }
    /**
     * Moves the specified item to the first position
     */
    public void moveTop() {
        return;
    }
    /**
     * Decreases the item index and moves the item to the new position
     */
    public void moveUp() {
        return;
    }
    /**
     * Loads data to the component from an inline data source
     */
    public void parse() {
        return;
    }
    /**
     * Repaints the whole view or a certain item
     */
    public void refresh() {
        return;
    }
    /**
     * Refreshes the structure of DataTable
     */
    public void refreshColumns() {
        return;
    }
    /**
     * Rebuilds list of options in select filter
     */
    public void refreshFilter() {
        return;
    }
    /**
     * Refreshes the header row of DataTable
     */
    public void refreshHeaderContent() {
        return;
    }
    /**
     * Registers a filter element
     */
    public void registerFilter() {
        return;
    }
    /**
     * Removes the specified item from datastore
     */
    public void remove() {
        return;
    }
    /**
     * Remove css class from the cell of datatable
     */
    public void removeCellCss() {
        return;
    }
    /**
     * Removes CSS class from a component item
     */
    public void removeCss() {
        return;
    }
    /**
     * Remove css class from the row
     */
    public void removeRowCss() {
        return;
    }
    /**
     * Removes a rowspan/colspan from the datatable
     */
    public void removeSpan() {
        return;
    }
    /**
     * Renders the specified item or the whole component
     */
    public void render() {
        return;
    }
    /**
     * Adjusts the view to a new size
     */
    public void resize() {
        return;
    }
    /**
     * Scrolls the view to the defined position
     */
    public void scrollTo() {
        return;
    }
    /**
     * Selects the specified element
     */
    public void select() {
        return;
    }
    /**
     * Selects the specified range of elements
     */
    public void selectRange() {
        return;
    }
    /**
     * Serializes data to a json object
     */
    public Byte serialize() {
        return null;
    }
    /**
     * Makes the specified page visible (assuming that the pager was defined )
     */
    public void setPage() {
        return;
    }
    /**
     * Restores the specified state
     */
    public void setState() {
        return;
    }
    /**
     * Makes the component visible
     */
    public void show() {
        return;
    }
    /**
     * Scrolls the table (if needed) to make the specified cell visible
     */
    public void showCell() {
        return;
    }
    /**
     * Shows the column which was previously hidden by method 'hidecolumn'
     */
    public void showColumn() {
        return;
    }
    /**
     * Shows or hides a group of columns
     */
    public void showColumnBatch() {
        return;
    }
    /**
     * 'scrolls' the table to make the specified row visible
     */
    public void showItem() {
        return;
    }
    /**
     * 'scrolls' the table to make the specified row visible
     */
    public void showItemByIndex() {
        return;
    }
    /**
     * Shows the overlay message over the body of DataTable
     */
    public void showOverlay() {
        return;
    }
    /**
     * Sorts rows in DataTable
     */
    public void sort() {
        return;
    }
    /**
     * Allows you to sync two copy of data (all or just a part of it) from one DataCollection to another
     */
    public void sync() {
        return;
    }
    /**
     * Breaks "bind" link
     */
    public void unbind() {
        return;
    }
    /**
     * Cancels blocking events that was enabled by the 'blockEvent' command
     */
    public void unblockEvent() {
        return;
    }
    /**
     * Ungroups data
     */
    public void ungroup() {
        return;
    }
    /**
     * Cancels selection of the specified element
     */
    public void unselect() {
        return;
    }
    /**
     * Sets properties of the data item
     */
    public void updateItem() {
        return;
    }
    /**
     * Validates one record or all dataset against validation rules
     */
    public Boolean validate() {
        return null;
    }
    /**
     * Validates data in currently active editor
     */
    public Boolean validateEditor() {
        return null;
    }
}
