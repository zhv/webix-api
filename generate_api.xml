<?xml version="1.0" encoding="UTF-8"?>
<project name="webix-api" default="help" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

	<property name="src.dir" location="src" />
	<property name="build.dir" location="build" />
	<property name="work.dir" location="${build.dir}/work" />
	<property name="tools.dir" location="${build.dir}/tools" />
	<property name="lib.dir" location="${build.dir}/lib" />
	<property name="build.config.dir" location="build-config" />
	<property name="jtidy.download.url" value="http://central.maven.org/maven2/net/sf/jtidy/jtidy/r938/jtidy-r938.jar" />

	<!--===================================================================-->

	<tstamp>
		<format property="build.time" pattern="yyyy-MM-dd'T'HH:mm:ss.SSSZ" />
	</tstamp>

	<macrodef name="macro_cached_action">
		<attribute name="cache-file" />
		<attribute name="verbose" default="false" />
		<element name="src-resources" optional="true" />
		<element name="tasks" />
		<element name="target-resources" optional="true" />
		<sequential>
			<local name="skip_tasks" />
			<condition property="skip_tasks">
				<or>
					<and>
						<resourcecount when="greater" count="0">
							<resources>
								<src-resources />
							</resources>
						</resourcecount>
						<uptodate targetfile="@{cache-file}">
							<srcresources>
								<src-resources />
							</srcresources>
						</uptodate>
					</and>
					<and>
						<resourcecount when="equal" count="0">
							<resources>
								<src-resources />
							</resources>
						</resourcecount>
						<not>
							<resourceexists>
								<file file="@{cache-file}" />
							</resourceexists>
						</not>
					</and>
				</or>
			</condition>

			<sequential unless:set="skip_tasks">
				<local name="skip_delete" />
				<condition property="skip_delete">
					<resourcecount when="less" count="1">
						<resources>
							<target-resources />
						</resources>
					</resourcecount>
				</condition>

				<delete unless:set="skip_delete" verbose="@{verbose}">
					<target-resources />
				</delete>

				<tasks />

				<echo message="${build.time}" file="@{cache-file}" />
			</sequential>
		</sequential>
	</macrodef>

	<macrodef name="macro_print_header">
		<attribute name="message" />
		<sequential>
			<echo message="==============================" />
			<echo message="@{message}" />
		</sequential>
	</macrodef>

	<macrodef name="macro_get_and_checksum">
		<attribute name="src-file" />
		<attribute name="dest-file" />
		<sequential>
			<local name="dest_dir" />
			<dirname property="dest_dir" file="@{dest-file}" />

			<local name="dest_basename" />
			<basename property="dest_basename" file="@{dest-file}" />

			<local name="file_exists" />
			<condition property="file_exists">
				<and>
					<resourceexists>
						<file file="${dest_dir}/${dest_basename}.sha1" />
					</resourceexists>
					<resourceexists>
						<file file="${dest_dir}/${dest_basename}" />
					</resourceexists>
				</and>
			</condition>

			<get unless:set="file_exists" dest="${dest_dir}">
				<url url="@{src-file}" />
				<url url="@{src-file}.sha1" />
				<firstmatchmapper>
					<globmapper from="@{src-file}.sha1" to="${dest_basename}.sha1" />
					<globmapper from="@{src-file}" to="${dest_basename}" />
				</firstmatchmapper>
			</get>

			<fail message="Checksum error, file: @{dest-file}, checksum file: ${dest_basename}.sha1">
				<condition>
					<not>
						<checksum file="@{dest-file}" algorithm="sha" fileext=".sha1" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<macrodef name="macro_apply_tidy">
		<attribute name="dest-dir" />
		<element name="src-fileset" />
		<sequential>
			<macro_print_header message="Apply tidy, out: @{dest-dir}" />

			<taskdef name="tidy" classname="org.w3c.tidy.ant.JTidyTask">
				<classpath path="${lib.dir}/jtidy.jar" />
			</taskdef>

			<tidy destdir="@{dest-dir}" failonerror="true">
				<parameter name="output-xhtml" value="true" />
				<parameter name="output-encoding" value="utf8" />
				<parameter name="drop-empty-paras" value="false" />
				<parameter name="wrap" value="0" />
				<parameter name="doctype" value="omit" />
				<src-fileset />
			</tidy>
		</sequential>
	</macrodef>

	<!--===================================================================-->

	<macrodef name="macro_init_step">
		<attribute name="dest-dir" />
		<sequential>
			<mkdir dir="@{dest-dir}/descriptor" />
			<mkdir dir="@{dest-dir}/urllist-xml" />
			<mkdir dir="@{dest-dir}/urllist-xml/type" />
			<mkdir dir="@{dest-dir}/urllist-xml/component" />
			<mkdir dir="@{dest-dir}/urllist-txt" />
			<mkdir dir="@{dest-dir}/sources" />
			<mkdir dir="@{dest-dir}/tidy" />
			<mkdir dir="@{dest-dir}/model" />
		</sequential>
	</macrodef>

	<macrodef name="macro_proceed_step">
		<attribute name="current-step" />
		<attribute name="next-step" default="" />
		<sequential>
			<macro_print_header message="Processing step, current: @{current-step}, next: @{next-step}" />

			<local name="current_work_dir" />
			<property name="current_work_dir" location="${work.dir}/@{current-step}" />

			<fileset id="descriptor_fs" dir="${current_work_dir}/descriptor" includes="**/*.xml" />

			<macro_cached_action cache-file="${current_work_dir}/split_descriptor.cache">
				<src-resources>
					<fileset refid="descriptor_fs" />
				</src-resources>
				<tasks>
					<macro_print_header message="Split source descriptor XML, out: ${current_work_dir}" />

					<apply executable="java" failonerror="true" skipemptyfilesets="true" parallel="true" maxparallel="100">
						<arg value="-Xmx32m" />
						<arg value="-classpath" />
						<arg path="${tools.dir}/classes" />
						<arg value="utils.SplitXml" />
						<arg path="${current_work_dir}" />
						<srcfile />
						<fileset refid="descriptor_fs" />
					</apply>
				</tasks>
				<target-resources>
					<fileset dir="${current_work_dir}">
						<include name="urllist-xml/**/*.xml" />
						<include name="model/**/*.xml" />
					</fileset>
				</target-resources>
			</macro_cached_action>

			<local name="is_last_step" />
			<condition property="is_last_step">
				<equals arg1="@{next-step}" arg2="" />
			</condition>

			<sequential unless:set="is_last_step">
				<local name="current_work_dir" />
				<property name="current_work_dir" location="${work.dir}/@{current-step}" />

				<!-- urllist-xml to urllist-txt -->
				<local name="urllist_txt_file" />
				<property name="urllist_txt_file" location="${current_work_dir}/urllist-txt/urllist.txt" />

				<fileset id="urllist_xml_fs" dir="${current_work_dir}/urllist-xml" includes="**/*.xml" />

				<macro_cached_action unless:set="generate_api.skip_download" cache-file="${current_work_dir}/prepare_urllist_txt.cache">
					<src-resources>
						<fileset refid="urllist_xml_fs" />
					</src-resources>
					<tasks>
						<macro_print_header message="Prepare urllist txt file, out: ${urllist_txt_file}" />

						<local name="dsc.urllist.url" />

						<xmlproperty prefix="dsc" keeproot="false">
							<concat ignoreempty="false">
								<fileset refid="urllist_xml_fs" />
								<header>&lt;xml&gt;</header>
								<footer>&lt;/xml&gt;</footer>
								<filterchain>
									<replaceregex pattern="&lt;\?.*?\?&gt;" flags="gm" />
								</filterchain>
							</concat>
						</xmlproperty>

						<property unless:set="dsc.urllist.url" name="dsc.urllist.url" value="" />

						<concat destfile="${urllist_txt_file}" ignoreempty="false" overwrite="true">
							<propertyresource name="dsc.urllist.url" />
							<filterchain>
								<tokenfilter delimoutput="\n">
									<stringtokenizer delims="," />
								</tokenfilter>
								<fixcrlf eol="lf" tab="remove" tablength="2" />
								<trim />
								<ignoreblank />
								<sortfilter />
								<uniqfilter />
							</filterchain>
						</concat>
					</tasks>
					<target-resources>
						<fileset file="${urllist_txt_file}" />
					</target-resources>
				</macro_cached_action>

				<!-- download sources -->
				<macro_cached_action cache-file="${current_work_dir}/download_sources.cache">
					<src-resources>
						<fileset file="${urllist_txt_file}" />
					</src-resources>
					<tasks>
						<!--
						<local name="skip_download" />
						<condition property="skip_download">
							<resourcecount when="less" count="1">
								<resourcelist>
									<file file="${urllist_txt_file}" />
								</resourcelist>
							</resourcecount>
						</condition>

						<sequential unless:set="skip_download">
						-->
						<macro_print_header message="Download source, out: ${current_work_dir}/sources" />

						<get dest="${current_work_dir}/sources">
							<resourcelist>
								<file file="${urllist_txt_file}" />
								<filterchain>
									<replacestring from="$" to="$$" />
								</filterchain>
							</resourcelist>
						</get>
						<!-- </sequential> -->
					</tasks>
					<target-resources>
						<fileset dir="${current_work_dir}/sources" includes="**" />
					</target-resources>
				</macro_cached_action>

				<!-- apply tidy -->
				<fileset id="sources_fs" dir="${current_work_dir}/sources" includes="**/*.html" />

				<macro_cached_action unless:set="generate_api.skip_tidy" cache-file="${current_work_dir}/apply_tidy.cache">
					<src-resources>
						<fileset refid="sources_fs" />
					</src-resources>
					<tasks>
						<macro_apply_tidy dest-dir="${current_work_dir}/tidy">
							<src-fileset>
								<fileset refid="sources_fs" />
							</src-fileset>
						</macro_apply_tidy>
					</tasks>
					<target-resources>
						<fileset dir="${current_work_dir}/tidy" includes="**" />
					</target-resources>
				</macro_cached_action>

				<!-- apply xslt -->
				<fileset id="tidy_fs" dir="${current_work_dir}/tidy" includes="**/*.html" />

				<macro_cached_action unless:set="generate_api.skip_xslt" cache-file="${current_work_dir}/apply_xslt.cache">
					<src-resources>
						<fileset refid="tidy_fs" />
					</src-resources>
					<tasks>
						<macro_print_header message="Apply XSLT, out: ${work.dir}/@{next-step}/descriptor" />

						<xslt destdir="${work.dir}/@{next-step}/descriptor" style="${build.config.dir}/source2descriptor.xsl" extension=".xml" useimplicitfileset="false" filenameparameter="sourcefile" failonnoresources="false">
							<param name="step.current" expression="@{current-step}" />
							<param name="step.next" expression="@{next-step}" />
							<fileset refid="tidy_fs" />
						</xslt>
					</tasks>
					<target-resources>
						<fileset dir="${work.dir}/@{next-step}/descriptor" includes="**" />
					</target-resources>
				</macro_cached_action>

			</sequential>
		</sequential>
	</macrodef>

	<!--===================================================================-->

	<target name="help">
		<local name="help_content" />
		<loadfile property="help_content" srcFile="generate_api.md" />
		<echo message="${help_content}" />
	</target>

	<target name="clean">
		<delete dir="${work.dir}" />
	</target>

	<target name="clean_all" depends="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="clean_generated">
		<mkdir dir="${build.dir}/sources-bkp" />

		<move todir="${build.dir}/sources-bkp">
			<fileset dir="${work.dir}" includes="step?/sources/**/*" />
		</move>

		<antcall target="clean" />
		<antcall target="init" />

		<move todir="${work.dir}">
			<fileset dir="${build.dir}/sources-bkp" includes="step?/sources/**/*" />
		</move>

		<delete dir="${build.dir}/sources-bkp" />
	</target>

	<target name="init">
		<macro_init_step dest-dir="${work.dir}/step1" />
		<macro_init_step dest-dir="${work.dir}/step2" />
		<macro_init_step dest-dir="${work.dir}/step3" />
		<macro_init_step dest-dir="${work.dir}/step4" />
		<macro_init_step dest-dir="${work.dir}/step5" />

		<mkdir dir="${work.dir}/model" />
		<mkdir dir="${work.dir}/mdo" />
		<mkdir dir="${work.dir}/xml2java" />
		<mkdir dir="${work.dir}/java" />
	</target>

	<target name="prepare_tools">
		<mkdir dir="${lib.dir}" />
		<macro_get_and_checksum src-file="${jtidy.download.url}" dest-file="${lib.dir}/jtidy.jar" />

		<mkdir dir="${tools.dir}/classes" />
		<javac srcdir="${src.dir}/tools/java" destdir="${tools.dir}/classes" includeAntRuntime="false" />
	</target>

	<target name="step1" depends="init,prepare_tools">
		<macro_cached_action cache-file="${work.dir}/descriptor_initial.cache">
			<src-resources>
				<fileset file="${build.config.dir}/descriptor_initial.xml" />
			</src-resources>
			<tasks>
				<copy file="${build.config.dir}/descriptor_initial.xml" todir="${work.dir}/step1/descriptor" />
			</tasks>
		</macro_cached_action>

		<macro_proceed_step current-step="step1" next-step="step2" />
	</target>

	<target name="step2" depends="init,prepare_tools,step1">
		<macro_proceed_step current-step="step2" next-step="step3" />
	</target>

	<target name="step3" depends="init,prepare_tools,step2">
		<macro_proceed_step current-step="step3" next-step="step4" />
	</target>

	<target name="step4" depends="init,prepare_tools,step3">
		<macro_proceed_step current-step="step4" next-step="step5" />
	</target>

	<target name="step5" depends="init,prepare_tools,step4">
		<macro_proceed_step current-step="step5" />
	</target>

	<target name="generate_model" depends="init">
		<fileset id="src_fs" dir="${work.dir}" includes="step?/model/**/*.xml" />
		<macro_cached_action cache-file="${work.dir}/generate_model.cache">
			<src-resources>
				<fileset refid="src_fs" />
			</src-resources>
			<tasks>
				<macro_print_header message="Generating model file: ${work.dir}/model/model-cumulative.xml" />

				<concat destfile="${work.dir}/model/model-cumulative.xml" overwrite="true">
					<fileset refid="src_fs" />
					<header>&lt;model&gt;</header>
					<footer>&lt;/model&gt;</footer>
				</concat>
			</tasks>
		</macro_cached_action>
	</target>

	<target name="generate_mdo" depends="init,prepare_tools,generate_model">
		<macro_cached_action cache-file="${work.dir}/generate_mdo.cache">
			<src-resources>
				<union>
					<fileset file="${build.config.dir}/model2generated.xsl" />
					<fileset file="${work.dir}/model/model-cumulative.xml" />
				</union>
			</src-resources>
			<tasks>
				<macro_print_header message="Transforming model file to Modello mdo file" />

				<xslt in="${work.dir}/model/model-cumulative.xml" out="${work.dir}/mdo/webix-api.mdo" style="${build.config.dir}/model2generated.xsl" />
			</tasks>
		</macro_cached_action>
	</target>

	<target name="generate_xml" depends="init,prepare_tools,generate_mdo">
		<macro_cached_action cache-file="${work.dir}/generate_xml.cache">
			<src-resources>
				<union>
					<file name="${build.config.dir}/model2xml2java.xsl" />
					<file name="${work.dir}/model/model-cumulative.xml" />
				</union>
			</src-resources>
			<tasks>
				<macro_print_header message="Transforming model file to xml2java file" />

				<xslt in="${work.dir}/model/model-cumulative.xml" out="${work.dir}/xml2java-cumulative.xml" style="${build.config.dir}/model2xml2java.xsl" />

				<java classname="utils.SplitXml" classpath="${tools.dir}/classes">
					<arg path="${work.dir}/xml2java" />
					<arg path="${work.dir}/xml2java-cumulative.xml" />
				</java>
			</tasks>
			<target-resources>
				<fileset dir="${work.dir}/xml2java" includes="**" />
			</target-resources>
		</macro_cached_action>
	</target>

	<target name="generate_java" depends="init,generate_xml">
		<fileset id="src_fs" dir="${work.dir}/xml2java" includes="**/*.xml" />
		<macro_cached_action cache-file="${work.dir}/generate_java.cache">
			<src-resources>
				<union>
					<fileset file="${build.config.dir}/xml2java.xsl" />
					<fileset refid="src_fs" />
				</union>
			</src-resources>
			<tasks>
				<macro_print_header message="Generating java sources" />

				<xslt destdir="${work.dir}/java" style="${build.config.dir}/xml2java.xsl" extension=".java" useimplicitfileset="false" filenameparameter="sourcefile" failonnoresources="false">
					<fileset refid="src_fs" />
				</xslt>
			</tasks>
			<target-resources>
				<fileset dir="${work.dir}/java" includes="**" />
			</target-resources>
		</macro_cached_action>
	</target>

	<target name="generate" depends="init">
		<macro_print_header message="Generating Webix UI API" />

		<antcall target="step5" unless:set="generate_api.skip_steps" />

		<antcall target="generate_java" />
	</target>

</project>